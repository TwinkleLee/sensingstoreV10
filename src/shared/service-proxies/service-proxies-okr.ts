/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_OKR_URL = new InjectionToken<string>('API_OKR_URL');

@Injectable()
export class FileServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_OKR_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    downloadTempFile(fileName: string, fileType: string, fileToken: string): Observable<void> {
        let url_ = this.baseUrl + "/api/File/DownloadTempFile?";
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined and cannot be null.");
        else
            url_ += "FileName=" + encodeURIComponent("" + fileName) + "&"; 
        if (fileType === undefined || fileType === null)
            throw new Error("The parameter 'fileType' must be defined and cannot be null.");
        else
            url_ += "FileType=" + encodeURIComponent("" + fileType) + "&"; 
        if (fileToken === undefined || fileToken === null)
            throw new Error("The parameter 'fileToken' must be defined and cannot be null.");
        else
            url_ += "FileToken=" + encodeURIComponent("" + fileToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadTempFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadTempFile(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDownloadTempFile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class IdentityServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_OKR_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getClaims(): Observable<string> {
        let url_ = this.baseUrl + "/Identity/GetClaims";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClaims(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetClaims(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class OKRServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_OKR_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getUsersForObjective(): Observable<SimpleUserDto[]> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetUsersForObjective";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsersForObjective(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsersForObjective(<any>response_);
                } catch (e) {
                    return <Observable<SimpleUserDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SimpleUserDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetUsersForObjective(response: HttpResponseBase): Observable<SimpleUserDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SimpleUserDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SimpleUserDto[]>(<any>null);
    }

    /**
     * @param objectiveId (optional) 
     * @return Success
     */
    getUsersForKeyResult(objectiveId: number | null | undefined): Observable<SimpleUserDto[]> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetUsersForKeyResult?";
        if (objectiveId !== undefined)
            url_ += "objectiveId=" + encodeURIComponent("" + objectiveId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsersForKeyResult(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsersForKeyResult(<any>response_);
                } catch (e) {
                    return <Observable<SimpleUserDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SimpleUserDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetUsersForKeyResult(response: HttpResponseBase): Observable<SimpleUserDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SimpleUserDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SimpleUserDto[]>(<any>null);
    }

    /**
     * @param keyResultId (optional) 
     * @return Success
     */
    getUsersForExcute(keyResultId: number | null | undefined): Observable<SimpleUserDto[]> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetUsersForExcute?";
        if (keyResultId !== undefined)
            url_ += "keyResultId=" + encodeURIComponent("" + keyResultId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsersForExcute(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsersForExcute(<any>response_);
                } catch (e) {
                    return <Observable<SimpleUserDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SimpleUserDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetUsersForExcute(response: HttpResponseBase): Observable<SimpleUserDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SimpleUserDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SimpleUserDto[]>(<any>null);
    }

    /**
     * @param status (optional) 
     * @param charge (optional) 
     * @param category (optional) 
     * @param startTime (optional) 
     * @param endTime (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getObjectives(status: Status | null | undefined, charge: Charge | null | undefined, category: Category | null | undefined, startTime: moment.Moment | null | undefined, endTime: moment.Moment | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfObjectiveDto> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetObjectives?";
        if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&"; 
        if (charge !== undefined)
            url_ += "Charge=" + encodeURIComponent("" + charge) + "&"; 
        if (category !== undefined)
            url_ += "Category=" + encodeURIComponent("" + category) + "&"; 
        if (startTime !== undefined)
            url_ += "StartTime=" + encodeURIComponent(startTime ? "" + startTime.toJSON() : "") + "&"; 
        if (endTime !== undefined)
            url_ += "EndTime=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetObjectives(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetObjectives(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfObjectiveDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfObjectiveDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetObjectives(response: HttpResponseBase): Observable<PagedResultDtoOfObjectiveDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfObjectiveDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfObjectiveDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getSingleObjective(id: number | null | undefined): Observable<SingleObjectiveDto> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetSingleObjective?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSingleObjective(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSingleObjective(<any>response_);
                } catch (e) {
                    return <Observable<SingleObjectiveDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<SingleObjectiveDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetSingleObjective(response: HttpResponseBase): Observable<SingleObjectiveDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SingleObjectiveDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SingleObjectiveDto>(<any>null);
    }

    /**
     * @param objectiveId (optional) 
     * @param completed (optional) 
     * @param startTime (optional) 
     * @param endTime (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getKeyResultList(objectiveId: number | null | undefined, completed: boolean | null | undefined, startTime: moment.Moment | null | undefined, endTime: moment.Moment | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfKeyResultDto> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetKeyResultList?";
        if (objectiveId !== undefined)
            url_ += "ObjectiveId=" + encodeURIComponent("" + objectiveId) + "&"; 
        if (completed !== undefined)
            url_ += "Completed=" + encodeURIComponent("" + completed) + "&"; 
        if (startTime !== undefined)
            url_ += "StartTime=" + encodeURIComponent(startTime ? "" + startTime.toJSON() : "") + "&"; 
        if (endTime !== undefined)
            url_ += "EndTime=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetKeyResultList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetKeyResultList(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfKeyResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfKeyResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetKeyResultList(response: HttpResponseBase): Observable<PagedResultDtoOfKeyResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfKeyResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfKeyResultDto>(<any>null);
    }

    /**
     * @param ids (optional) 
     * @return Success
     */
    batchDeleteKeyResult(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/BatchDeleteKeyResult";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBatchDeleteKeyResult(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchDeleteKeyResult(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processBatchDeleteKeyResult(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param ids (optional) 
     * @return Success
     */
    batchDeleteExecute(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/BatchDeleteExecute";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBatchDeleteExecute(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchDeleteExecute(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processBatchDeleteExecute(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param keyResultId (optional) 
     * @param complete (optional) 
     * @param startTime (optional) 
     * @param endTime (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getExecuteList(keyResultId: number | null | undefined, complete: boolean | null | undefined, startTime: moment.Moment | null | undefined, endTime: moment.Moment | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfExcuteDto> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetExecuteList?";
        if (keyResultId !== undefined)
            url_ += "KeyResultId=" + encodeURIComponent("" + keyResultId) + "&"; 
        if (complete !== undefined)
            url_ += "Complete=" + encodeURIComponent("" + complete) + "&"; 
        if (startTime !== undefined)
            url_ += "StartTime=" + encodeURIComponent(startTime ? "" + startTime.toJSON() : "") + "&"; 
        if (endTime !== undefined)
            url_ += "EndTime=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExecuteList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExecuteList(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfExcuteDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfExcuteDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetExecuteList(response: HttpResponseBase): Observable<PagedResultDtoOfExcuteDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfExcuteDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfExcuteDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    createObjective(input: CreateObjectiveInput | null | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/OKR/CreateObjective";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateObjective(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateObjective(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreateObjective(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    updateObjective(input: UpdateObjectiveInput | null | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/OKR/UpdateObjective";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateObjective(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateObjective(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateObjective(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteObjective(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/DeleteObjective?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteObjective(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteObjective(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteObjective(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param ids (optional) 
     * @return Success
     */
    batchDeleteObjective(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/BatchDeleteObjective";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBatchDeleteObjective(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchDeleteObjective(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processBatchDeleteObjective(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    addOrUpdateAttentionToObjective4Me(input: AddOrUpdateAttentionToObjectiveInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/AddOrUpdateAttentionToObjective4Me";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateAttentionToObjective4Me(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateAttentionToObjective4Me(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateAttentionToObjective4Me(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    completeObjective(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/CompleteObjective?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCompleteObjective(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCompleteObjective(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCompleteObjective(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    addOrUpdateKeyResult(input: AddOrUpdateKeyResultInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/AddOrUpdateKeyResult";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateKeyResult(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateKeyResult(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateKeyResult(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getKeyResultById(id: number | null | undefined): Observable<SingleKeyResultDto> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetKeyResultById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetKeyResultById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetKeyResultById(<any>response_);
                } catch (e) {
                    return <Observable<SingleKeyResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<SingleKeyResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetKeyResultById(response: HttpResponseBase): Observable<SingleKeyResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SingleKeyResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SingleKeyResultDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteKeyResult(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/DeleteKeyResult?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteKeyResult(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteKeyResult(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteKeyResult(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    addOrUpdateExcute(input: AddOrUpdateExcuteInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/AddOrUpdateExcute";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateExcute(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateExcute(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateExcute(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param objectiveId (optional) 
     * @param keyResultId (optional) 
     * @return Success
     */
    getExcutes(objectiveId: number | null | undefined, keyResultId: number | null | undefined): Observable<ExcuteDto[]> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetExcutes?";
        if (objectiveId !== undefined)
            url_ += "ObjectiveId=" + encodeURIComponent("" + objectiveId) + "&"; 
        if (keyResultId !== undefined)
            url_ += "KeyResultId=" + encodeURIComponent("" + keyResultId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExcutes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExcutes(<any>response_);
                } catch (e) {
                    return <Observable<ExcuteDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExcuteDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetExcutes(response: HttpResponseBase): Observable<ExcuteDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExcuteDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExcuteDto[]>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getExecuteById(id: number | null | undefined): Observable<SingleExecuteDto> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetExecuteById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExecuteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExecuteById(<any>response_);
                } catch (e) {
                    return <Observable<SingleExecuteDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<SingleExecuteDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetExecuteById(response: HttpResponseBase): Observable<SingleExecuteDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SingleExecuteDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SingleExecuteDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteExcute(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/DeleteExcute?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteExcute(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteExcute(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteExcute(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    completeExcute(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/CompleteExcute?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCompleteExcute(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCompleteExcute(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCompleteExcute(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getSingleObjectiveUsers(id: number | null | undefined): Observable<ObjectiveUsersDto> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetSingleObjectiveUsers?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSingleObjectiveUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSingleObjectiveUsers(<any>response_);
                } catch (e) {
                    return <Observable<ObjectiveUsersDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ObjectiveUsersDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetSingleObjectiveUsers(response: HttpResponseBase): Observable<ObjectiveUsersDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ObjectiveUsersDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ObjectiveUsersDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    updateObjectiveUsers(input: UpdateObjectiveUsersInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/UpdateObjectiveUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateObjectiveUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateObjectiveUsers(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateObjectiveUsers(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param recordAction (optional) 
     * @param collectionTime (optional) 
     * @param objectiveId (optional) 
     * @param keyResultId (optional) 
     * @param excuteId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getObjectiveRecord(recordAction: RecordAction | null | undefined, collectionTime: moment.Moment | null | undefined, objectiveId: number | null | undefined, keyResultId: number | null | undefined, excuteId: number | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfObjectiveRecordDto> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetObjectiveRecord?";
        if (recordAction !== undefined)
            url_ += "RecordAction=" + encodeURIComponent("" + recordAction) + "&"; 
        if (collectionTime !== undefined)
            url_ += "CollectionTime=" + encodeURIComponent(collectionTime ? "" + collectionTime.toJSON() : "") + "&"; 
        if (objectiveId !== undefined)
            url_ += "ObjectiveId=" + encodeURIComponent("" + objectiveId) + "&"; 
        if (keyResultId !== undefined)
            url_ += "KeyResultId=" + encodeURIComponent("" + keyResultId) + "&"; 
        if (excuteId !== undefined)
            url_ += "ExcuteId=" + encodeURIComponent("" + excuteId) + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetObjectiveRecord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetObjectiveRecord(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfObjectiveRecordDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfObjectiveRecordDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetObjectiveRecord(response: HttpResponseBase): Observable<PagedResultDtoOfObjectiveRecordDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfObjectiveRecordDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfObjectiveRecordDto>(<any>null);
    }

    /**
     * @return Success
     */
    getReport(): Observable<ReportDto> {
        let url_ = this.baseUrl + "/api/services/app/OKR/GetReport";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReport(<any>response_);
                } catch (e) {
                    return <Observable<ReportDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ReportDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetReport(response: HttpResponseBase): Observable<ReportDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReportDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReportDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    addOrUpdateObjectiveProgressRecord(input: AddOrUpdateObjectiveProgressRecordInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OKR/AddOrUpdateObjectiveProgressRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateObjectiveProgressRecord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateObjectiveProgressRecord(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateObjectiveProgressRecord(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class SimpleUserDto implements ISimpleUserDto {
    tenantId!: number | undefined;
    userId!: number | undefined;
    userName!: string | undefined;

    constructor(data?: ISimpleUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): SimpleUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface ISimpleUserDto {
    tenantId: number | undefined;
    userId: number | undefined;
    userName: string | undefined;
}

export class PagedResultDtoOfObjectiveDto implements IPagedResultDtoOfObjectiveDto {
    totalCount!: number | undefined;
    items!: ObjectiveDto[] | undefined;

    constructor(data?: IPagedResultDtoOfObjectiveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ObjectiveDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfObjectiveDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfObjectiveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfObjectiveDto {
    totalCount: number | undefined;
    items: ObjectiveDto[] | undefined;
}

export class ObjectiveDto implements IObjectiveDto {
    id!: number | undefined;
    tenantId!: number | undefined;
    displayName!: string | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    keyResults!: ObjectiveKeyResultDto[] | undefined;
    status!: ObjectiveDtoStatus | undefined;
    remainingDays!: number | undefined;
    totalExcuteCount!: number | undefined;
    completeExcuteCount!: number | undefined;
    progressPercent!: number | undefined;
    headerUserName!: string[] | undefined;
    headerUserId!: number[] | undefined;
    joinUserId!: number[] | undefined;
    category!: ObjectiveDtoCategory | undefined;
    autoCalculateProgress!: boolean | undefined;
    parent!: ObjectiveDtoParent | undefined;
    parentId!: number | undefined;
    parentName!: string | undefined;
    attention!: boolean | undefined;

    constructor(data?: IObjectiveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.tenantId = data["tenantId"];
            this.displayName = data["displayName"];
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : <any>undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : <any>undefined;
            if (Array.isArray(data["keyResults"])) {
                this.keyResults = [] as any;
                for (let item of data["keyResults"])
                    this.keyResults!.push(ObjectiveKeyResultDto.fromJS(item));
            }
            this.status = data["status"];
            this.remainingDays = data["remainingDays"];
            this.totalExcuteCount = data["totalExcuteCount"];
            this.completeExcuteCount = data["completeExcuteCount"];
            this.progressPercent = data["progressPercent"];
            if (Array.isArray(data["headerUserName"])) {
                this.headerUserName = [] as any;
                for (let item of data["headerUserName"])
                    this.headerUserName!.push(item);
            }
            if (Array.isArray(data["headerUserId"])) {
                this.headerUserId = [] as any;
                for (let item of data["headerUserId"])
                    this.headerUserId!.push(item);
            }
            if (Array.isArray(data["joinUserId"])) {
                this.joinUserId = [] as any;
                for (let item of data["joinUserId"])
                    this.joinUserId!.push(item);
            }
            this.category = data["category"];
            this.autoCalculateProgress = data["autoCalculateProgress"];
            this.parent = data["parent"];
            this.parentId = data["parentId"];
            this.parentName = data["parentName"];
            this.attention = data["attention"];
        }
    }

    static fromJS(data: any): ObjectiveDto {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectiveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["displayName"] = this.displayName;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        if (Array.isArray(this.keyResults)) {
            data["keyResults"] = [];
            for (let item of this.keyResults)
                data["keyResults"].push(item.toJSON());
        }
        data["status"] = this.status;
        data["remainingDays"] = this.remainingDays;
        data["totalExcuteCount"] = this.totalExcuteCount;
        data["completeExcuteCount"] = this.completeExcuteCount;
        data["progressPercent"] = this.progressPercent;
        if (Array.isArray(this.headerUserName)) {
            data["headerUserName"] = [];
            for (let item of this.headerUserName)
                data["headerUserName"].push(item);
        }
        if (Array.isArray(this.headerUserId)) {
            data["headerUserId"] = [];
            for (let item of this.headerUserId)
                data["headerUserId"].push(item);
        }
        if (Array.isArray(this.joinUserId)) {
            data["joinUserId"] = [];
            for (let item of this.joinUserId)
                data["joinUserId"].push(item);
        }
        data["category"] = this.category;
        data["autoCalculateProgress"] = this.autoCalculateProgress;
        data["parent"] = this.parent;
        data["parentId"] = this.parentId;
        data["parentName"] = this.parentName;
        data["attention"] = this.attention;
        return data; 
    }
}

export interface IObjectiveDto {
    id: number | undefined;
    tenantId: number | undefined;
    displayName: string | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    keyResults: ObjectiveKeyResultDto[] | undefined;
    status: ObjectiveDtoStatus | undefined;
    remainingDays: number | undefined;
    totalExcuteCount: number | undefined;
    completeExcuteCount: number | undefined;
    progressPercent: number | undefined;
    headerUserName: string[] | undefined;
    headerUserId: number[] | undefined;
    joinUserId: number[] | undefined;
    category: ObjectiveDtoCategory | undefined;
    autoCalculateProgress: boolean | undefined;
    parent: ObjectiveDtoParent | undefined;
    parentId: number | undefined;
    parentName: string | undefined;
    attention: boolean | undefined;
}

export class ObjectiveKeyResultDto implements IObjectiveKeyResultDto {
    keyResultId!: number | undefined;
    keyResultName!: string | undefined;
    keyResultProgressPercent!: number | undefined;

    constructor(data?: IObjectiveKeyResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.keyResultId = data["keyResultId"];
            this.keyResultName = data["keyResultName"];
            this.keyResultProgressPercent = data["keyResultProgressPercent"];
        }
    }

    static fromJS(data: any): ObjectiveKeyResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectiveKeyResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keyResultId"] = this.keyResultId;
        data["keyResultName"] = this.keyResultName;
        data["keyResultProgressPercent"] = this.keyResultProgressPercent;
        return data; 
    }
}

export interface IObjectiveKeyResultDto {
    keyResultId: number | undefined;
    keyResultName: string | undefined;
    keyResultProgressPercent: number | undefined;
}

export class SingleObjectiveDto implements ISingleObjectiveDto {
    id!: number | undefined;
    tenantId!: number | undefined;
    displayName!: string | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    keyResults!: KeyResultDto[] | undefined;
    status!: SingleObjectiveDtoStatus | undefined;
    remainingDays!: number | undefined;
    totalExcuteCount!: number | undefined;
    completeExcuteCount!: number | undefined;
    progressPercent!: number | undefined;
    headerUserName!: string[] | undefined;
    parent!: SingleObjectiveDtoParent | undefined;
    parentId!: number | undefined;
    attention!: boolean | undefined;
    category!: SingleObjectiveDtoCategory | undefined;
    autoCalculateProgress!: boolean | undefined;

    constructor(data?: ISingleObjectiveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.tenantId = data["tenantId"];
            this.displayName = data["displayName"];
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : <any>undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : <any>undefined;
            if (Array.isArray(data["keyResults"])) {
                this.keyResults = [] as any;
                for (let item of data["keyResults"])
                    this.keyResults!.push(KeyResultDto.fromJS(item));
            }
            this.status = data["status"];
            this.remainingDays = data["remainingDays"];
            this.totalExcuteCount = data["totalExcuteCount"];
            this.completeExcuteCount = data["completeExcuteCount"];
            this.progressPercent = data["progressPercent"];
            if (Array.isArray(data["headerUserName"])) {
                this.headerUserName = [] as any;
                for (let item of data["headerUserName"])
                    this.headerUserName!.push(item);
            }
            this.parent = data["parent"];
            this.parentId = data["parentId"];
            this.attention = data["attention"];
            this.category = data["category"];
            this.autoCalculateProgress = data["autoCalculateProgress"];
        }
    }

    static fromJS(data: any): SingleObjectiveDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleObjectiveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["displayName"] = this.displayName;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        if (Array.isArray(this.keyResults)) {
            data["keyResults"] = [];
            for (let item of this.keyResults)
                data["keyResults"].push(item.toJSON());
        }
        data["status"] = this.status;
        data["remainingDays"] = this.remainingDays;
        data["totalExcuteCount"] = this.totalExcuteCount;
        data["completeExcuteCount"] = this.completeExcuteCount;
        data["progressPercent"] = this.progressPercent;
        if (Array.isArray(this.headerUserName)) {
            data["headerUserName"] = [];
            for (let item of this.headerUserName)
                data["headerUserName"].push(item);
        }
        data["parent"] = this.parent;
        data["parentId"] = this.parentId;
        data["attention"] = this.attention;
        data["category"] = this.category;
        data["autoCalculateProgress"] = this.autoCalculateProgress;
        return data; 
    }
}

export interface ISingleObjectiveDto {
    id: number | undefined;
    tenantId: number | undefined;
    displayName: string | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    keyResults: KeyResultDto[] | undefined;
    status: SingleObjectiveDtoStatus | undefined;
    remainingDays: number | undefined;
    totalExcuteCount: number | undefined;
    completeExcuteCount: number | undefined;
    progressPercent: number | undefined;
    headerUserName: string[] | undefined;
    parent: SingleObjectiveDtoParent | undefined;
    parentId: number | undefined;
    attention: boolean | undefined;
    category: SingleObjectiveDtoCategory | undefined;
    autoCalculateProgress: boolean | undefined;
}

export class KeyResultDto implements IKeyResultDto {
    id!: number | undefined;
    objectiveId!: number | undefined;
    tenantId!: number | undefined;
    displayName!: string | undefined;
    completed!: boolean | undefined;
    excutes!: ExcuteDto[] | undefined;
    confidencePercent!: number | undefined;
    progressPercent!: number | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    weighting!: number | undefined;
    target!: string | undefined;
    remainingDays!: number | undefined;
    description!: string | undefined;
    headerUserIds!: number[] | undefined;
    joinUserIds!: number[] | undefined;

    constructor(data?: IKeyResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.objectiveId = data["objectiveId"];
            this.tenantId = data["tenantId"];
            this.displayName = data["displayName"];
            this.completed = data["completed"];
            if (Array.isArray(data["excutes"])) {
                this.excutes = [] as any;
                for (let item of data["excutes"])
                    this.excutes!.push(ExcuteDto.fromJS(item));
            }
            this.confidencePercent = data["confidencePercent"];
            this.progressPercent = data["progressPercent"];
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : <any>undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : <any>undefined;
            this.weighting = data["weighting"];
            this.target = data["target"];
            this.remainingDays = data["remainingDays"];
            this.description = data["description"];
            if (Array.isArray(data["headerUserIds"])) {
                this.headerUserIds = [] as any;
                for (let item of data["headerUserIds"])
                    this.headerUserIds!.push(item);
            }
            if (Array.isArray(data["joinUserIds"])) {
                this.joinUserIds = [] as any;
                for (let item of data["joinUserIds"])
                    this.joinUserIds!.push(item);
            }
        }
    }

    static fromJS(data: any): KeyResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new KeyResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["objectiveId"] = this.objectiveId;
        data["tenantId"] = this.tenantId;
        data["displayName"] = this.displayName;
        data["completed"] = this.completed;
        if (Array.isArray(this.excutes)) {
            data["excutes"] = [];
            for (let item of this.excutes)
                data["excutes"].push(item.toJSON());
        }
        data["confidencePercent"] = this.confidencePercent;
        data["progressPercent"] = this.progressPercent;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["weighting"] = this.weighting;
        data["target"] = this.target;
        data["remainingDays"] = this.remainingDays;
        data["description"] = this.description;
        if (Array.isArray(this.headerUserIds)) {
            data["headerUserIds"] = [];
            for (let item of this.headerUserIds)
                data["headerUserIds"].push(item);
        }
        if (Array.isArray(this.joinUserIds)) {
            data["joinUserIds"] = [];
            for (let item of this.joinUserIds)
                data["joinUserIds"].push(item);
        }
        return data; 
    }
}

export interface IKeyResultDto {
    id: number | undefined;
    objectiveId: number | undefined;
    tenantId: number | undefined;
    displayName: string | undefined;
    completed: boolean | undefined;
    excutes: ExcuteDto[] | undefined;
    confidencePercent: number | undefined;
    progressPercent: number | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    weighting: number | undefined;
    target: string | undefined;
    remainingDays: number | undefined;
    description: string | undefined;
    headerUserIds: number[] | undefined;
    joinUserIds: number[] | undefined;
}

export class ExcuteDto implements IExcuteDto {
    id!: number | undefined;
    displayName!: string | undefined;
    keyResultId!: number | undefined;
    current!: string | undefined;
    target!: string | undefined;
    progressPercent!: number | undefined;
    description!: string | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    confidencePercent!: number | undefined;
    priority!: ExcuteDtoPriority | undefined;
    contributionPercent!: number | undefined;
    complete!: boolean | undefined;
    score!: number | undefined;
    headerUserIds!: number[] | undefined;
    joinUserIds!: number[] | undefined;
    executeUserIds!: number[] | undefined;

    constructor(data?: IExcuteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.keyResultId = data["keyResultId"];
            this.current = data["current"];
            this.target = data["target"];
            this.progressPercent = data["progressPercent"];
            this.description = data["description"];
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : <any>undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : <any>undefined;
            this.confidencePercent = data["confidencePercent"];
            this.priority = data["priority"];
            this.contributionPercent = data["contributionPercent"];
            this.complete = data["complete"];
            this.score = data["score"];
            if (Array.isArray(data["headerUserIds"])) {
                this.headerUserIds = [] as any;
                for (let item of data["headerUserIds"])
                    this.headerUserIds!.push(item);
            }
            if (Array.isArray(data["joinUserIds"])) {
                this.joinUserIds = [] as any;
                for (let item of data["joinUserIds"])
                    this.joinUserIds!.push(item);
            }
            if (Array.isArray(data["executeUserIds"])) {
                this.executeUserIds = [] as any;
                for (let item of data["executeUserIds"])
                    this.executeUserIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ExcuteDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExcuteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["keyResultId"] = this.keyResultId;
        data["current"] = this.current;
        data["target"] = this.target;
        data["progressPercent"] = this.progressPercent;
        data["description"] = this.description;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["confidencePercent"] = this.confidencePercent;
        data["priority"] = this.priority;
        data["contributionPercent"] = this.contributionPercent;
        data["complete"] = this.complete;
        data["score"] = this.score;
        if (Array.isArray(this.headerUserIds)) {
            data["headerUserIds"] = [];
            for (let item of this.headerUserIds)
                data["headerUserIds"].push(item);
        }
        if (Array.isArray(this.joinUserIds)) {
            data["joinUserIds"] = [];
            for (let item of this.joinUserIds)
                data["joinUserIds"].push(item);
        }
        if (Array.isArray(this.executeUserIds)) {
            data["executeUserIds"] = [];
            for (let item of this.executeUserIds)
                data["executeUserIds"].push(item);
        }
        return data; 
    }
}

export interface IExcuteDto {
    id: number | undefined;
    displayName: string | undefined;
    keyResultId: number | undefined;
    current: string | undefined;
    target: string | undefined;
    progressPercent: number | undefined;
    description: string | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    confidencePercent: number | undefined;
    priority: ExcuteDtoPriority | undefined;
    contributionPercent: number | undefined;
    complete: boolean | undefined;
    score: number | undefined;
    headerUserIds: number[] | undefined;
    joinUserIds: number[] | undefined;
    executeUserIds: number[] | undefined;
}

export class PagedResultDtoOfKeyResultDto implements IPagedResultDtoOfKeyResultDto {
    totalCount!: number | undefined;
    items!: KeyResultDto[] | undefined;

    constructor(data?: IPagedResultDtoOfKeyResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(KeyResultDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfKeyResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfKeyResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfKeyResultDto {
    totalCount: number | undefined;
    items: KeyResultDto[] | undefined;
}

export class PagedResultDtoOfExcuteDto implements IPagedResultDtoOfExcuteDto {
    totalCount!: number | undefined;
    items!: ExcuteDto[] | undefined;

    constructor(data?: IPagedResultDtoOfExcuteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ExcuteDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfExcuteDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfExcuteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfExcuteDto {
    totalCount: number | undefined;
    items: ExcuteDto[] | undefined;
}

export class CreateObjectiveInput implements ICreateObjectiveInput {
    displayName!: string | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    headerUserId!: number[] | undefined;
    joinUserIds!: number[] | undefined;
    parentId!: number | undefined;
    parent!: CreateObjectiveInputParent | undefined;
    category!: CreateObjectiveInputCategory | undefined;
    autoCalculateProgress!: boolean | undefined;

    constructor(data?: ICreateObjectiveInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : <any>undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : <any>undefined;
            if (Array.isArray(data["headerUserId"])) {
                this.headerUserId = [] as any;
                for (let item of data["headerUserId"])
                    this.headerUserId!.push(item);
            }
            if (Array.isArray(data["joinUserIds"])) {
                this.joinUserIds = [] as any;
                for (let item of data["joinUserIds"])
                    this.joinUserIds!.push(item);
            }
            this.parentId = data["parentId"];
            this.parent = data["parent"];
            this.category = data["category"];
            this.autoCalculateProgress = data["autoCalculateProgress"];
        }
    }

    static fromJS(data: any): CreateObjectiveInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateObjectiveInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        if (Array.isArray(this.headerUserId)) {
            data["headerUserId"] = [];
            for (let item of this.headerUserId)
                data["headerUserId"].push(item);
        }
        if (Array.isArray(this.joinUserIds)) {
            data["joinUserIds"] = [];
            for (let item of this.joinUserIds)
                data["joinUserIds"].push(item);
        }
        data["parentId"] = this.parentId;
        data["parent"] = this.parent;
        data["category"] = this.category;
        data["autoCalculateProgress"] = this.autoCalculateProgress;
        return data; 
    }
}

export interface ICreateObjectiveInput {
    displayName: string | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    headerUserId: number[] | undefined;
    joinUserIds: number[] | undefined;
    parentId: number | undefined;
    parent: CreateObjectiveInputParent | undefined;
    category: CreateObjectiveInputCategory | undefined;
    autoCalculateProgress: boolean | undefined;
}

export class UpdateObjectiveInput implements IUpdateObjectiveInput {
    id!: number | undefined;
    displayName!: string | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    headerUserId!: number[] | undefined;
    joinUserIds!: number[] | undefined;
    parentId!: number | undefined;
    parent!: UpdateObjectiveInputParent | undefined;
    category!: UpdateObjectiveInputCategory | undefined;
    autoCalculateProgress!: boolean | undefined;

    constructor(data?: IUpdateObjectiveInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : <any>undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : <any>undefined;
            if (Array.isArray(data["headerUserId"])) {
                this.headerUserId = [] as any;
                for (let item of data["headerUserId"])
                    this.headerUserId!.push(item);
            }
            if (Array.isArray(data["joinUserIds"])) {
                this.joinUserIds = [] as any;
                for (let item of data["joinUserIds"])
                    this.joinUserIds!.push(item);
            }
            this.parentId = data["parentId"];
            this.parent = data["parent"];
            this.category = data["category"];
            this.autoCalculateProgress = data["autoCalculateProgress"];
        }
    }

    static fromJS(data: any): UpdateObjectiveInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateObjectiveInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        if (Array.isArray(this.headerUserId)) {
            data["headerUserId"] = [];
            for (let item of this.headerUserId)
                data["headerUserId"].push(item);
        }
        if (Array.isArray(this.joinUserIds)) {
            data["joinUserIds"] = [];
            for (let item of this.joinUserIds)
                data["joinUserIds"].push(item);
        }
        data["parentId"] = this.parentId;
        data["parent"] = this.parent;
        data["category"] = this.category;
        data["autoCalculateProgress"] = this.autoCalculateProgress;
        return data; 
    }
}

export interface IUpdateObjectiveInput {
    id: number | undefined;
    displayName: string | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    headerUserId: number[] | undefined;
    joinUserIds: number[] | undefined;
    parentId: number | undefined;
    parent: UpdateObjectiveInputParent | undefined;
    category: UpdateObjectiveInputCategory | undefined;
    autoCalculateProgress: boolean | undefined;
}

export class AddOrUpdateAttentionToObjectiveInput implements IAddOrUpdateAttentionToObjectiveInput {
    objectiveId!: number | undefined;
    objectiveAction!: AddOrUpdateAttentionToObjectiveInputObjectiveAction | undefined;

    constructor(data?: IAddOrUpdateAttentionToObjectiveInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.objectiveId = data["objectiveId"];
            this.objectiveAction = data["objectiveAction"];
        }
    }

    static fromJS(data: any): AddOrUpdateAttentionToObjectiveInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateAttentionToObjectiveInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["objectiveId"] = this.objectiveId;
        data["objectiveAction"] = this.objectiveAction;
        return data; 
    }
}

export interface IAddOrUpdateAttentionToObjectiveInput {
    objectiveId: number | undefined;
    objectiveAction: AddOrUpdateAttentionToObjectiveInputObjectiveAction | undefined;
}

export class AddOrUpdateKeyResultInput implements IAddOrUpdateKeyResultInput {
    id!: number | undefined;
    objectiveId!: number | undefined;
    displayName!: string | undefined;
    completed!: boolean | undefined;
    confidencePercent!: number | undefined;
    weighting!: number | undefined;
    target!: string | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    description!: string | undefined;
    headerUserIds!: number[] | undefined;
    joinUserIds!: number[] | undefined;

    constructor(data?: IAddOrUpdateKeyResultInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.objectiveId = data["objectiveId"];
            this.displayName = data["displayName"];
            this.completed = data["completed"];
            this.confidencePercent = data["confidencePercent"];
            this.weighting = data["weighting"];
            this.target = data["target"];
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : <any>undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : <any>undefined;
            this.description = data["description"];
            if (Array.isArray(data["headerUserIds"])) {
                this.headerUserIds = [] as any;
                for (let item of data["headerUserIds"])
                    this.headerUserIds!.push(item);
            }
            if (Array.isArray(data["joinUserIds"])) {
                this.joinUserIds = [] as any;
                for (let item of data["joinUserIds"])
                    this.joinUserIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AddOrUpdateKeyResultInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateKeyResultInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["objectiveId"] = this.objectiveId;
        data["displayName"] = this.displayName;
        data["completed"] = this.completed;
        data["confidencePercent"] = this.confidencePercent;
        data["weighting"] = this.weighting;
        data["target"] = this.target;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["description"] = this.description;
        if (Array.isArray(this.headerUserIds)) {
            data["headerUserIds"] = [];
            for (let item of this.headerUserIds)
                data["headerUserIds"].push(item);
        }
        if (Array.isArray(this.joinUserIds)) {
            data["joinUserIds"] = [];
            for (let item of this.joinUserIds)
                data["joinUserIds"].push(item);
        }
        return data; 
    }
}

export interface IAddOrUpdateKeyResultInput {
    id: number | undefined;
    objectiveId: number | undefined;
    displayName: string | undefined;
    completed: boolean | undefined;
    confidencePercent: number | undefined;
    weighting: number | undefined;
    target: string | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    description: string | undefined;
    headerUserIds: number[] | undefined;
    joinUserIds: number[] | undefined;
}

export class SingleKeyResultDto implements ISingleKeyResultDto {
    id!: number | undefined;
    objectiveId!: number | undefined;
    tenantId!: number | undefined;
    displayName!: string | undefined;
    completed!: boolean | undefined;
    confidencePercent!: number | undefined;
    progressPercent!: number | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    weighting!: number | undefined;
    remainingDays!: number | undefined;
    description!: string | undefined;
    headerUsers!: SimpleUserDto[] | undefined;
    joinUsers!: SimpleUserDto[] | undefined;

    constructor(data?: ISingleKeyResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.objectiveId = data["objectiveId"];
            this.tenantId = data["tenantId"];
            this.displayName = data["displayName"];
            this.completed = data["completed"];
            this.confidencePercent = data["confidencePercent"];
            this.progressPercent = data["progressPercent"];
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : <any>undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : <any>undefined;
            this.weighting = data["weighting"];
            this.remainingDays = data["remainingDays"];
            this.description = data["description"];
            if (Array.isArray(data["headerUsers"])) {
                this.headerUsers = [] as any;
                for (let item of data["headerUsers"])
                    this.headerUsers!.push(SimpleUserDto.fromJS(item));
            }
            if (Array.isArray(data["joinUsers"])) {
                this.joinUsers = [] as any;
                for (let item of data["joinUsers"])
                    this.joinUsers!.push(SimpleUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SingleKeyResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleKeyResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["objectiveId"] = this.objectiveId;
        data["tenantId"] = this.tenantId;
        data["displayName"] = this.displayName;
        data["completed"] = this.completed;
        data["confidencePercent"] = this.confidencePercent;
        data["progressPercent"] = this.progressPercent;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["weighting"] = this.weighting;
        data["remainingDays"] = this.remainingDays;
        data["description"] = this.description;
        if (Array.isArray(this.headerUsers)) {
            data["headerUsers"] = [];
            for (let item of this.headerUsers)
                data["headerUsers"].push(item.toJSON());
        }
        if (Array.isArray(this.joinUsers)) {
            data["joinUsers"] = [];
            for (let item of this.joinUsers)
                data["joinUsers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISingleKeyResultDto {
    id: number | undefined;
    objectiveId: number | undefined;
    tenantId: number | undefined;
    displayName: string | undefined;
    completed: boolean | undefined;
    confidencePercent: number | undefined;
    progressPercent: number | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    weighting: number | undefined;
    remainingDays: number | undefined;
    description: string | undefined;
    headerUsers: SimpleUserDto[] | undefined;
    joinUsers: SimpleUserDto[] | undefined;
}

export class AddOrUpdateExcuteInput implements IAddOrUpdateExcuteInput {
    id!: number | undefined;
    keyResultId!: number | undefined;
    displayName!: string | undefined;
    current!: string | undefined;
    target!: string | undefined;
    contributionPercent!: number | undefined;
    complete!: boolean | undefined;
    description!: string | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    confidencePercent!: number | undefined;
    priority!: AddOrUpdateExcuteInputPriority | undefined;
    score!: number | undefined;
    headerUserIds!: number[] | undefined;
    joinUserIds!: number[] | undefined;

    constructor(data?: IAddOrUpdateExcuteInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.keyResultId = data["keyResultId"];
            this.displayName = data["displayName"];
            this.current = data["current"];
            this.target = data["target"];
            this.contributionPercent = data["contributionPercent"];
            this.complete = data["complete"];
            this.description = data["description"];
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : <any>undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : <any>undefined;
            this.confidencePercent = data["confidencePercent"];
            this.priority = data["priority"];
            this.score = data["score"];
            if (Array.isArray(data["headerUserIds"])) {
                this.headerUserIds = [] as any;
                for (let item of data["headerUserIds"])
                    this.headerUserIds!.push(item);
            }
            if (Array.isArray(data["joinUserIds"])) {
                this.joinUserIds = [] as any;
                for (let item of data["joinUserIds"])
                    this.joinUserIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AddOrUpdateExcuteInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateExcuteInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["keyResultId"] = this.keyResultId;
        data["displayName"] = this.displayName;
        data["current"] = this.current;
        data["target"] = this.target;
        data["contributionPercent"] = this.contributionPercent;
        data["complete"] = this.complete;
        data["description"] = this.description;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["confidencePercent"] = this.confidencePercent;
        data["priority"] = this.priority;
        data["score"] = this.score;
        if (Array.isArray(this.headerUserIds)) {
            data["headerUserIds"] = [];
            for (let item of this.headerUserIds)
                data["headerUserIds"].push(item);
        }
        if (Array.isArray(this.joinUserIds)) {
            data["joinUserIds"] = [];
            for (let item of this.joinUserIds)
                data["joinUserIds"].push(item);
        }
        return data; 
    }
}

export interface IAddOrUpdateExcuteInput {
    id: number | undefined;
    keyResultId: number | undefined;
    displayName: string | undefined;
    current: string | undefined;
    target: string | undefined;
    contributionPercent: number | undefined;
    complete: boolean | undefined;
    description: string | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    confidencePercent: number | undefined;
    priority: AddOrUpdateExcuteInputPriority | undefined;
    score: number | undefined;
    headerUserIds: number[] | undefined;
    joinUserIds: number[] | undefined;
}

export class SingleExecuteDto implements ISingleExecuteDto {
    id!: number | undefined;
    displayName!: string | undefined;
    current!: string | undefined;
    target!: string | undefined;
    contributionPercent!: number | undefined;
    complete!: boolean | undefined;
    description!: string | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    confidencePercent!: number | undefined;
    priority!: SingleExecuteDtoPriority | undefined;
    score!: number | undefined;
    headerUsers!: SimpleUserDto[] | undefined;
    joinUsers!: SimpleUserDto[] | undefined;

    constructor(data?: ISingleExecuteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.current = data["current"];
            this.target = data["target"];
            this.contributionPercent = data["contributionPercent"];
            this.complete = data["complete"];
            this.description = data["description"];
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : <any>undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : <any>undefined;
            this.confidencePercent = data["confidencePercent"];
            this.priority = data["priority"];
            this.score = data["score"];
            if (Array.isArray(data["headerUsers"])) {
                this.headerUsers = [] as any;
                for (let item of data["headerUsers"])
                    this.headerUsers!.push(SimpleUserDto.fromJS(item));
            }
            if (Array.isArray(data["joinUsers"])) {
                this.joinUsers = [] as any;
                for (let item of data["joinUsers"])
                    this.joinUsers!.push(SimpleUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SingleExecuteDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleExecuteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["current"] = this.current;
        data["target"] = this.target;
        data["contributionPercent"] = this.contributionPercent;
        data["complete"] = this.complete;
        data["description"] = this.description;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["confidencePercent"] = this.confidencePercent;
        data["priority"] = this.priority;
        data["score"] = this.score;
        if (Array.isArray(this.headerUsers)) {
            data["headerUsers"] = [];
            for (let item of this.headerUsers)
                data["headerUsers"].push(item.toJSON());
        }
        if (Array.isArray(this.joinUsers)) {
            data["joinUsers"] = [];
            for (let item of this.joinUsers)
                data["joinUsers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISingleExecuteDto {
    id: number | undefined;
    displayName: string | undefined;
    current: string | undefined;
    target: string | undefined;
    contributionPercent: number | undefined;
    complete: boolean | undefined;
    description: string | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    confidencePercent: number | undefined;
    priority: SingleExecuteDtoPriority | undefined;
    score: number | undefined;
    headerUsers: SimpleUserDto[] | undefined;
    joinUsers: SimpleUserDto[] | undefined;
}

export class ObjectiveUsersDto implements IObjectiveUsersDto {
    headerUsers!: IdNameDto[] | undefined;
    joinUsers!: IdNameDto[] | undefined;
    attentionUsers!: IdNameDto[] | undefined;

    constructor(data?: IObjectiveUsersDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["headerUsers"])) {
                this.headerUsers = [] as any;
                for (let item of data["headerUsers"])
                    this.headerUsers!.push(IdNameDto.fromJS(item));
            }
            if (Array.isArray(data["joinUsers"])) {
                this.joinUsers = [] as any;
                for (let item of data["joinUsers"])
                    this.joinUsers!.push(IdNameDto.fromJS(item));
            }
            if (Array.isArray(data["attentionUsers"])) {
                this.attentionUsers = [] as any;
                for (let item of data["attentionUsers"])
                    this.attentionUsers!.push(IdNameDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ObjectiveUsersDto {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectiveUsersDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.headerUsers)) {
            data["headerUsers"] = [];
            for (let item of this.headerUsers)
                data["headerUsers"].push(item.toJSON());
        }
        if (Array.isArray(this.joinUsers)) {
            data["joinUsers"] = [];
            for (let item of this.joinUsers)
                data["joinUsers"].push(item.toJSON());
        }
        if (Array.isArray(this.attentionUsers)) {
            data["attentionUsers"] = [];
            for (let item of this.attentionUsers)
                data["attentionUsers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IObjectiveUsersDto {
    headerUsers: IdNameDto[] | undefined;
    joinUsers: IdNameDto[] | undefined;
    attentionUsers: IdNameDto[] | undefined;
}

export class IdNameDto implements IIdNameDto {
    id!: number | undefined;
    name!: string | undefined;

    constructor(data?: IIdNameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): IdNameDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdNameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IIdNameDto {
    id: number | undefined;
    name: string | undefined;
}

export class UpdateObjectiveUsersInput implements IUpdateObjectiveUsersInput {
    objectiveId!: number | undefined;
    headerUserIds!: number[] | undefined;
    joinUserIds!: number[] | undefined;
    attentionUserIds!: number[] | undefined;

    constructor(data?: IUpdateObjectiveUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.objectiveId = data["objectiveId"];
            if (Array.isArray(data["headerUserIds"])) {
                this.headerUserIds = [] as any;
                for (let item of data["headerUserIds"])
                    this.headerUserIds!.push(item);
            }
            if (Array.isArray(data["joinUserIds"])) {
                this.joinUserIds = [] as any;
                for (let item of data["joinUserIds"])
                    this.joinUserIds!.push(item);
            }
            if (Array.isArray(data["attentionUserIds"])) {
                this.attentionUserIds = [] as any;
                for (let item of data["attentionUserIds"])
                    this.attentionUserIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateObjectiveUsersInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateObjectiveUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["objectiveId"] = this.objectiveId;
        if (Array.isArray(this.headerUserIds)) {
            data["headerUserIds"] = [];
            for (let item of this.headerUserIds)
                data["headerUserIds"].push(item);
        }
        if (Array.isArray(this.joinUserIds)) {
            data["joinUserIds"] = [];
            for (let item of this.joinUserIds)
                data["joinUserIds"].push(item);
        }
        if (Array.isArray(this.attentionUserIds)) {
            data["attentionUserIds"] = [];
            for (let item of this.attentionUserIds)
                data["attentionUserIds"].push(item);
        }
        return data; 
    }
}

export interface IUpdateObjectiveUsersInput {
    objectiveId: number | undefined;
    headerUserIds: number[] | undefined;
    joinUserIds: number[] | undefined;
    attentionUserIds: number[] | undefined;
}

export class PagedResultDtoOfObjectiveRecordDto implements IPagedResultDtoOfObjectiveRecordDto {
    totalCount!: number | undefined;
    items!: ObjectiveRecordDto[] | undefined;

    constructor(data?: IPagedResultDtoOfObjectiveRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ObjectiveRecordDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfObjectiveRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfObjectiveRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfObjectiveRecordDto {
    totalCount: number | undefined;
    items: ObjectiveRecordDto[] | undefined;
}

export class ObjectiveRecordDto implements IObjectiveRecordDto {
    id!: number | undefined;
    userId!: number | undefined;
    userName!: string | undefined;
    actionTime!: moment.Moment | undefined;
    description!: string | undefined;

    constructor(data?: IObjectiveRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userId = data["userId"];
            this.userName = data["userName"];
            this.actionTime = data["actionTime"] ? moment(data["actionTime"].toString()) : <any>undefined;
            this.description = data["description"];
        }
    }

    static fromJS(data: any): ObjectiveRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectiveRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["actionTime"] = this.actionTime ? this.actionTime.toISOString() : <any>undefined;
        data["description"] = this.description;
        return data; 
    }
}

export interface IObjectiveRecordDto {
    id: number | undefined;
    userId: number | undefined;
    userName: string | undefined;
    actionTime: moment.Moment | undefined;
    description: string | undefined;
}

export class ReportDto implements IReportDto {
    completePercent!: number | undefined;
    currentTargetPercent!: number | undefined;
    totalScore!: number | undefined;
    scoreRecords!: ScoreRecord[] | undefined;

    constructor(data?: IReportDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.completePercent = data["completePercent"];
            this.currentTargetPercent = data["currentTargetPercent"];
            this.totalScore = data["totalScore"];
            if (Array.isArray(data["scoreRecords"])) {
                this.scoreRecords = [] as any;
                for (let item of data["scoreRecords"])
                    this.scoreRecords!.push(ScoreRecord.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completePercent"] = this.completePercent;
        data["currentTargetPercent"] = this.currentTargetPercent;
        data["totalScore"] = this.totalScore;
        if (Array.isArray(this.scoreRecords)) {
            data["scoreRecords"] = [];
            for (let item of this.scoreRecords)
                data["scoreRecords"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IReportDto {
    completePercent: number | undefined;
    currentTargetPercent: number | undefined;
    totalScore: number | undefined;
    scoreRecords: ScoreRecord[] | undefined;
}

export class ScoreRecord implements IScoreRecord {
    userName!: string | undefined;
    dateTime!: moment.Moment | undefined;
    score!: number | undefined;
    action!: string | undefined;
    excuteDisplayName!: string | undefined;
    description!: string | undefined;

    constructor(data?: IScoreRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.dateTime = data["dateTime"] ? moment(data["dateTime"].toString()) : <any>undefined;
            this.score = data["score"];
            this.action = data["action"];
            this.excuteDisplayName = data["excuteDisplayName"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): ScoreRecord {
        data = typeof data === 'object' ? data : {};
        let result = new ScoreRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        data["score"] = this.score;
        data["action"] = this.action;
        data["excuteDisplayName"] = this.excuteDisplayName;
        data["description"] = this.description;
        return data; 
    }
}

export interface IScoreRecord {
    userName: string | undefined;
    dateTime: moment.Moment | undefined;
    score: number | undefined;
    action: string | undefined;
    excuteDisplayName: string | undefined;
    description: string | undefined;
}

export class AddOrUpdateObjectiveProgressRecordInput implements IAddOrUpdateObjectiveProgressRecordInput {
    objectiveId!: number | undefined;
    id!: number | undefined;
    value!: number | undefined;
    description!: string | undefined;

    constructor(data?: IAddOrUpdateObjectiveProgressRecordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.objectiveId = data["objectiveId"];
            this.id = data["id"];
            this.value = data["value"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): AddOrUpdateObjectiveProgressRecordInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateObjectiveProgressRecordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["objectiveId"] = this.objectiveId;
        data["id"] = this.id;
        data["value"] = this.value;
        data["description"] = this.description;
        return data; 
    }
}

export interface IAddOrUpdateObjectiveProgressRecordInput {
    objectiveId: number | undefined;
    id: number | undefined;
    value: number | undefined;
    description: string | undefined;
}

export enum Status {
    InProcess = "InProcess",
    Complete = "Complete",
}

export enum Charge {
    Header = "Header",
    Join = "Join",
    Attention = "Attention",
}

export enum Category {
    Company = "Company",
    Department = "Department",
    Team = "Team",
    Personal = "Personal",
}

export enum RecordAction {
    CreateObject = "CreateObject",
    UpdateObject = "UpdateObject",
    DeleteObject = "DeleteObject",
    CompleteObject = "CompleteObject",
    CreateKeyResult = "CreateKeyResult",
    UpdateKeyResult = "UpdateKeyResult",
    DeleteKeyResult = "DeleteKeyResult",
    ComleteKeyResult = "ComleteKeyResult",
    CreateExcute = "CreateExcute",
    UpdateExcute = "UpdateExcute",
    DeleteExcute = "DeleteExcute",
    CompleteExcute = "CompleteExcute",
    Score = "Score",
    PayAttention = "PayAttention",
    CancleAttention = "CancleAttention",
    UpdateObjectiveProgress = "UpdateObjectiveProgress",
}

export enum ObjectiveDtoStatus {
    InProcess = "InProcess",
    Complete = "Complete",
}

export enum ObjectiveDtoCategory {
    Company = "Company",
    Department = "Department",
    Team = "Team",
    Personal = "Personal",
}

export enum ObjectiveDtoParent {
    Objective = "Objective",
    KeyResult = "KeyResult",
}

export enum SingleObjectiveDtoStatus {
    InProcess = "InProcess",
    Complete = "Complete",
}

export enum SingleObjectiveDtoParent {
    Objective = "Objective",
    KeyResult = "KeyResult",
}

export enum SingleObjectiveDtoCategory {
    Company = "Company",
    Department = "Department",
    Team = "Team",
    Personal = "Personal",
}

export enum ExcuteDtoPriority {
    Highest = "Highest",
    High = "High",
    Middle = "Middle",
    Low = "Low",
    Lowest = "Lowest",
}

export enum CreateObjectiveInputParent {
    Objective = "Objective",
    KeyResult = "KeyResult",
}

export enum CreateObjectiveInputCategory {
    Company = "Company",
    Department = "Department",
    Team = "Team",
    Personal = "Personal",
}

export enum UpdateObjectiveInputParent {
    Objective = "Objective",
    KeyResult = "KeyResult",
}

export enum UpdateObjectiveInputCategory {
    Company = "Company",
    Department = "Department",
    Team = "Team",
    Personal = "Personal",
}

export enum AddOrUpdateAttentionToObjectiveInputObjectiveAction {
    PayAttention = "PayAttention",
    CancelAttention = "CancelAttention",
}

export enum AddOrUpdateExcuteInputPriority {
    Highest = "Highest",
    High = "High",
    Middle = "Middle",
    Low = "Low",
    Lowest = "Lowest",
}

export enum SingleExecuteDtoPriority {
    Highest = "Highest",
    High = "High",
    Middle = "Middle",
    Low = "Low",
    Lowest = "Lowest",
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}