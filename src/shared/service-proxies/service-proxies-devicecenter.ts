/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.3.0 (NJsonSchema v10.3.6.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { DateTime } from 'luxon';
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_DEVICECENTER_URL = new InjectionToken<string>('API_DEVICECENTER_URL');

@Injectable()
export class ApplyServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取审核列表
     * @param type (optional) 
     * @param applyStatus (optional) 
     * @param start (optional) 
     * @param end (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getApplyForms(type: string | null | undefined, applyStatus: string | null | undefined, start: moment.Moment | null | undefined, end: moment.Moment | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<ApplyFormDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Apply/GetApplyForms?";
        if (type !== undefined && type !== null)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (applyStatus !== undefined && applyStatus !== null)
            url_ += "ApplyStatus=" + encodeURIComponent("" + applyStatus) + "&";
        if (start !== undefined && start !== null)
            url_ += "Start=" + encodeURIComponent(start ? "" + start.toJSON() : "") + "&";
        if (end !== undefined && end !== null)
            url_ += "End=" + encodeURIComponent(end ? "" + end.toJSON() : "") + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApplyForms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApplyForms(<any>response_);
                } catch (e) {
                    return <Observable<ApplyFormDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplyFormDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetApplyForms(response: HttpResponseBase): Observable<ApplyFormDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplyFormDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplyFormDtoPagedResultDto>(<any>null);
    }

    /**
     * 新建审核表
     * @param body (optional) 
     * @return Success
     */
    createApplyForm(body: CreateApplyFormInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Apply/CreateApplyForm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateApplyForm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateApplyForm(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateApplyForm(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 审批特定提交
     * @param body (optional) 审批结果信息
     * @return Success
     */
    audit(body: AuditApplyFormInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Apply/Audit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAudit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAudit(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAudit(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 特定审批下的内容详细
     * @param appFormId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getApplyFormDetails(appFormId: number | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<IdNamePicDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Apply/GetApplyFormDetails?";
        if (appFormId === null)
            throw new Error("The parameter 'appFormId' cannot be null.");
        else if (appFormId !== undefined)
            url_ += "AppFormId=" + encodeURIComponent("" + appFormId) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApplyFormDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApplyFormDetails(<any>response_);
                } catch (e) {
                    return <Observable<IdNamePicDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<IdNamePicDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetApplyFormDetails(response: HttpResponseBase): Observable<IdNamePicDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdNamePicDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IdNamePicDtoPagedResultDto>(<any>null);
    }

    /**
     * 获取审核的设备详细
     * @param appFormId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getAuditDeviceDetails(appFormId: number | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<DeviceDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Apply/GetAuditDeviceDetails?";
        if (appFormId === null)
            throw new Error("The parameter 'appFormId' cannot be null.");
        else if (appFormId !== undefined)
            url_ += "AppFormId=" + encodeURIComponent("" + appFormId) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAuditDeviceDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAuditDeviceDetails(<any>response_);
                } catch (e) {
                    return <Observable<DeviceDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAuditDeviceDetails(response: HttpResponseBase): Observable<DeviceDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceDtoPagedResultDto>(<any>null);
    }
}

@Injectable()
export class AppPodServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取AppPod列表信息，安卓、Windows
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getAppPods(filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<AppPodDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/AppPod/GetAppPods?";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppPods(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppPods(<any>response_);
                } catch (e) {
                    return <Observable<AppPodDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppPodDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAppPods(response: HttpResponseBase): Observable<AppPodDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppPodDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppPodDtoPagedResultDto>(<any>null);
    }

    /**
     * 获取所有AppPod版本信息
     * @param appPodId (optional) 
     * @param osType (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getAppPodVersions(appPodId: number | null | undefined, osType: OsTypeEnum | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<AppPodVersionDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/AppPod/GetAppPodVersions?";
        if (appPodId !== undefined && appPodId !== null)
            url_ += "AppPodId=" + encodeURIComponent("" + appPodId) + "&";
        if (osType === null)
            throw new Error("The parameter 'osType' cannot be null.");
        else if (osType !== undefined)
            url_ += "OsType=" + encodeURIComponent("" + osType) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppPodVersions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppPodVersions(<any>response_);
                } catch (e) {
                    return <Observable<AppPodVersionDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppPodVersionDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAppPodVersions(response: HttpResponseBase): Observable<AppPodVersionDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppPodVersionDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppPodVersionDtoPagedResultDto>(<any>null);
    }

    /**
     * 获取AppPod版本详细信息
     * @param id (optional) AppPodVersionId
     * @return Success
     */
    getAppPodVersionDetail(id: number | undefined): Observable<AppPodVersionDto> {
        let url_ = this.baseUrl + "/api/services/app/AppPod/GetAppPodVersionDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppPodVersionDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppPodVersionDetail(<any>response_);
                } catch (e) {
                    return <Observable<AppPodVersionDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppPodVersionDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAppPodVersionDetail(response: HttpResponseBase): Observable<AppPodVersionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppPodVersionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppPodVersionDto>(<any>null);
    }

    /**
     * 获取某个产品的最新版本信息
     * @param appPodId (optional) 
     * @return Success
     */
    getAppPodLatestVersionDetail(appPodId: number | undefined): Observable<AppPodVersionDto> {
        let url_ = this.baseUrl + "/api/services/app/AppPod/GetAppPodLatestVersionDetail?";
        if (appPodId === null)
            throw new Error("The parameter 'appPodId' cannot be null.");
        else if (appPodId !== undefined)
            url_ += "appPodId=" + encodeURIComponent("" + appPodId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppPodLatestVersionDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppPodLatestVersionDetail(<any>response_);
                } catch (e) {
                    return <Observable<AppPodVersionDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppPodVersionDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAppPodLatestVersionDetail(response: HttpResponseBase): Observable<AppPodVersionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppPodVersionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppPodVersionDto>(<any>null);
    }

    /**
     * 创建Apppod version
     * @param body (optional) 
     * @return Success
     */
    createAppPodVersion(body: CreateAppPodVersionInput | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/AppPod/CreateAppPodVersion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateAppPodVersion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateAppPodVersion(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreateAppPodVersion(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * 更新appPod
     * @param body (optional) 
     * @return Success
     */
    updateAppPodVersion(body: UpdateAppPodVersionInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AppPod/UpdateAppPodVersion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAppPodVersion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAppPodVersion(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateAppPodVersion(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 新建设备后，调用接口绑定最新版本
     * @param body (optional) 
     * @return Success
     */
    setDefaultAppPodVersion4Device(body: SetDefaultAppPodVersionInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AppPod/SetDefaultAppPodVersion4Device";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetDefaultAppPodVersion4Device(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetDefaultAppPodVersion4Device(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSetDefaultAppPodVersion4Device(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取设备截屏图片url
     * @param deviceId 目标设备ID
     * @return Success
     */
    getDeviceScreenshot(deviceId: number): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/AppPod/GetDeviceScreenshot?";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined and cannot be null.");
        else
            url_ += "deviceId=" + encodeURIComponent("" + deviceId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceScreenshot(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceScreenshot(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceScreenshot(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * 获取设备下的appPod版本信息
     * @param deviceId (optional) 
     * @return Success
     */
    getDeviceAppPodVersion4Device(deviceId: number | undefined, osType: OsTypeEnum): Observable<DeviceAppPodVersionDto> {
        let url_ = this.baseUrl + "/api/services/app/AppPod/GetDeviceAppPodVersion4Device?";
        if (deviceId === null)
            throw new Error("The parameter 'deviceId' cannot be null.");
        else if (deviceId !== undefined)
            url_ += "deviceId=" + encodeURIComponent("" + deviceId) + "&";
        if (osType === undefined || osType === null)
            throw new Error("The parameter 'osType' must be defined and cannot be null.");
        else
            url_ += "OsType=" + encodeURIComponent("" + osType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceAppPodVersion4Device(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceAppPodVersion4Device(<any>response_);
                } catch (e) {
                    return <Observable<DeviceAppPodVersionDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceAppPodVersionDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceAppPodVersion4Device(response: HttpResponseBase): Observable<DeviceAppPodVersionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceAppPodVersionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceAppPodVersionDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changeDeviceApppodVersion4Device(body: ChangeDeviceAppPodVersionInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AppPod/ChangeDeviceApppodVersion4Device";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeDeviceApppodVersion4Device(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeDeviceApppodVersion4Device(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangeDeviceApppodVersion4Device(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class BrandServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取品牌的列表（支持分页）
     * @param tagId (optional) 品牌Tag的ID
     * @param catetoryIds (optional) 品牌分类Id
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getBrands(tagId: number | null | undefined, catetoryIds: number[] | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<BrandDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Brand/GetBrands?";
        if (tagId !== undefined && tagId !== null)
            url_ += "TagId=" + encodeURIComponent("" + tagId) + "&";
        if (catetoryIds !== undefined && catetoryIds !== null)
            catetoryIds && catetoryIds.forEach(item => { url_ += "CatetoryIds=" + encodeURIComponent("" + item) + "&"; });
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrands(<any>response_);
                } catch (e) {
                    return <Observable<BrandDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BrandDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetBrands(response: HttpResponseBase): Observable<BrandDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BrandDtoPagedResultDto>(<any>null);
    }

    /**
     * 获取单个的品牌
     * @param brandId (optional) 
     * @return Success
     */
    getSingleBrand(brandId: number | undefined): Observable<BrandDto> {
        let url_ = this.baseUrl + "/api/services/app/Brand/GetSingleBrand?";
        if (brandId === null)
            throw new Error("The parameter 'brandId' cannot be null.");
        else if (brandId !== undefined)
            url_ += "brandId=" + encodeURIComponent("" + brandId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSingleBrand(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSingleBrand(<any>response_);
                } catch (e) {
                    return <Observable<BrandDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BrandDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetSingleBrand(response: HttpResponseBase): Observable<BrandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BrandDto>(<any>null);
    }

    /**
     * 更新品牌
     * @param body (optional) 
     * @return Success
     */
    updateBrand(body: UpdateBrandInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Brand/UpdateBrand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateBrand(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateBrand(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateBrand(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 新建品牌
     * @param body (optional) 
     * @return Success
     */
    createBrand(body: CreateBrandInput | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Brand/CreateBrand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateBrand(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateBrand(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreateBrand(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * 删除品牌（商品相关内容在gateway调删除）
     * @param isIncludeProduct (optional) 
     * @param isAllBrands (optional) 
     * @param brandIds (optional) 
     * @return Success
     */
    deleteBrands(isIncludeProduct: boolean | undefined, isAllBrands: boolean | undefined, brandIds: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Brand/DeleteBrands?";
        if (isIncludeProduct === null)
            throw new Error("The parameter 'isIncludeProduct' cannot be null.");
        else if (isIncludeProduct !== undefined)
            url_ += "IsIncludeProduct=" + encodeURIComponent("" + isIncludeProduct) + "&";
        if (isAllBrands === null)
            throw new Error("The parameter 'isAllBrands' cannot be null.");
        else if (isAllBrands !== undefined)
            url_ += "IsAllBrands=" + encodeURIComponent("" + isAllBrands) + "&";
        if (brandIds !== undefined && brandIds !== null)
            brandIds && brandIds.forEach(item => { url_ += "BrandIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteBrands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteBrands(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteBrands(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取某个商品下所有的资源
     * @param entityId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getBrandResources(entityId: number | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<EntityFileDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Brand/GetBrandResources?";
        if (entityId === null)
            throw new Error("The parameter 'entityId' cannot be null.");
        else if (entityId !== undefined)
            url_ += "EntityId=" + encodeURIComponent("" + entityId) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrandResources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrandResources(<any>response_);
                } catch (e) {
                    return <Observable<EntityFileDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityFileDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetBrandResources(response: HttpResponseBase): Observable<EntityFileDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntityFileDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityFileDtoPagedResultDto>(<any>null);
    }

    /**
     * 删除品牌下的资源（多选删除）
     * @param ids (optional) 
     * @return Success
     */
    deleteBrandResources(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Brand/DeleteBrandResources?";
        if (ids !== undefined && ids !== null)
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteBrandResources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteBrandResources(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteBrandResources(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除商品下某一个资源
     * @param id (optional) 商品资源的id
     * @return Success
     */
    deleteBrandResource(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Brand/DeleteBrandResource?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteBrandResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteBrandResource(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteBrandResource(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 为某个商品添加资源
     * @param body (optional) 
     * @return Success
     */
    addBrandResource(body: CreateEntityResourceInput | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Brand/AddBrandResource";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddBrandResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddBrandResource(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processAddBrandResource(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * 为某个品牌更改资源
     * @param body (optional) 
     * @return Success
     */
    updateBrandResource(body: UpdateEntityResourceInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Brand/UpdateBrandResource";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateBrandResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateBrandResource(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateBrandResource(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 为品牌绑定Tag
     * @param body (optional) 
     * @return Success
     */
    bindTagsToBrands(body: SetBrandTagsDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Brand/BindTagsToBrands";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBindTagsToBrands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBindTagsToBrands(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processBindTagsToBrands(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 上线和下线品牌(品牌审核)
     * @param body (optional) 
     * @return Success
     */
    auditBrands(body: OnlineOrOffLineBrandInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Brand/AuditBrands";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuditBrands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuditBrands(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAuditBrands(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取所有品牌分类
     * @return Success
     */
    getBrandCategoryTrees(): Observable<BrandCategoryTreeItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Brand/GetBrandCategoryTrees";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrandCategoryTrees(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrandCategoryTrees(<any>response_);
                } catch (e) {
                    return <Observable<BrandCategoryTreeItemDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<BrandCategoryTreeItemDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetBrandCategoryTrees(response: HttpResponseBase): Observable<BrandCategoryTreeItemDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BrandCategoryTreeItemDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BrandCategoryTreeItemDto[]>(<any>null);
    }

    /**
     * 获取Brandcategory 列表
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getBrandCategories(filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<BrandCategoryDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Brand/GetBrandCategories?";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrandCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrandCategories(<any>response_);
                } catch (e) {
                    return <Observable<BrandCategoryDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BrandCategoryDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetBrandCategories(response: HttpResponseBase): Observable<BrandCategoryDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandCategoryDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BrandCategoryDtoPagedResultDto>(<any>null);
    }

    /**
     * 根据id 获取品牌分类
     * @param id (optional) 
     * @return Success
     */
    getSingleBrandCategory(id: number | undefined): Observable<BrandCategoryDto> {
        let url_ = this.baseUrl + "/api/services/app/Brand/GetSingleBrandCategory?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSingleBrandCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSingleBrandCategory(<any>response_);
                } catch (e) {
                    return <Observable<BrandCategoryDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BrandCategoryDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetSingleBrandCategory(response: HttpResponseBase): Observable<BrandCategoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandCategoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BrandCategoryDto>(<any>null);
    }

    /**
     * 创建Brandcategory
     * @param body (optional) 
     * @return Success
     */
    createBrandCategory(body: CreateBrandCategoryInput | undefined): Observable<BrandCategoryDto> {
        let url_ = this.baseUrl + "/api/services/app/Brand/CreateBrandCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateBrandCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateBrandCategory(<any>response_);
                } catch (e) {
                    return <Observable<BrandCategoryDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BrandCategoryDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateBrandCategory(response: HttpResponseBase): Observable<BrandCategoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandCategoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BrandCategoryDto>(<any>null);
    }

    /**
     * 更新brandcategory, 如果没有id,也可以根据code来更新
     * @param body (optional) 
     * @return Success
     */
    updateBrandCategory(body: UpdateBrandCategoryInput | undefined): Observable<BrandCategoryDto> {
        let url_ = this.baseUrl + "/api/services/app/Brand/UpdateBrandCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateBrandCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateBrandCategory(<any>response_);
                } catch (e) {
                    return <Observable<BrandCategoryDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BrandCategoryDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateBrandCategory(response: HttpResponseBase): Observable<BrandCategoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandCategoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BrandCategoryDto>(<any>null);
    }

    /**
     * 删除分类的时候 子分类也删除,商品也要清除分类
     * @param id (optional) 
     * @return Success
     */
    deleteBrandCategory(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Brand/DeleteBrandCategory?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteBrandCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteBrandCategory(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteBrandCategory(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取品牌的前几个（下拉列表用）
     * @param count (optional) 
     * @return Success
     */
    getBrandTopForSelect(count: number | undefined): Observable<IdNameDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Brand/GetBrandTopForSelect?";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrandTopForSelect(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrandTopForSelect(<any>response_);
                } catch (e) {
                    return <Observable<IdNameDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<IdNameDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetBrandTopForSelect(response: HttpResponseBase): Observable<IdNameDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(IdNameDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IdNameDto[]>(<any>null);
    }
}

@Injectable()
export class DeviceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Host账户获取所有租户的所有设备的信息,可按照条件进行检索，结果支持分页
     * @param tenantId (optional) 特定租户的Id
     * @param deviceTypeIds (optional) 按照设备的类型检索
     * @param status (optional) 设备的状态
     * @param operatingType (optional) 设备运维类型检索
     * @param auditStatus (optional) 设备的审核状态检索
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getDevicesForHost(tenantId: number | null | undefined, deviceTypeIds: number[] | null | undefined, status: DeviceStatus | undefined, operatingType: OperatingType | undefined, auditStatus: AuditStatus | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<TenantDeviceOutputPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/GetDevicesForHost?";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&";
        if (deviceTypeIds !== undefined && deviceTypeIds !== null)
            deviceTypeIds && deviceTypeIds.forEach(item => { url_ += "DeviceTypeIds=" + encodeURIComponent("" + item) + "&"; });
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&";
        if (operatingType === null)
            throw new Error("The parameter 'operatingType' cannot be null.");
        else if (operatingType !== undefined)
            url_ += "OperatingType=" + encodeURIComponent("" + operatingType) + "&";
        if (auditStatus === null)
            throw new Error("The parameter 'auditStatus' cannot be null.");
        else if (auditStatus !== undefined)
            url_ += "AuditStatus=" + encodeURIComponent("" + auditStatus) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDevicesForHost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDevicesForHost(<any>response_);
                } catch (e) {
                    return <Observable<TenantDeviceOutputPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TenantDeviceOutputPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDevicesForHost(response: HttpResponseBase): Observable<TenantDeviceOutputPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TenantDeviceOutputPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TenantDeviceOutputPagedResultDto>(<any>null);
    }

    /**
     * 获取单个设备的基础数据详情
     * @param id (optional) 
     * @return Success
     */
    getDeviceById(id: number | undefined): Observable<DeviceDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/GetDeviceById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceById(<any>response_);
                } catch (e) {
                    return <Observable<DeviceDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceById(response: HttpResponseBase): Observable<DeviceDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceDto>(<any>null);
    }

    /**
     * 获取当前登陆用户所在租户的设备列表，支持多条件查询
     * @param ouIds (optional) 组织架构的ID
     * @param status (optional) 设备的状态（枚举）
     * @param operatingType (optional) 设备操作类型
     * @param auditStatus (optional) 审核状态
     * @param isHaveChildDevices (optional) 是否有子设备
     * @param deviceTypeIds (optional) 设备类型ID
     * @param storesId (optional) 店铺ID
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getDevices(ouIds: number[] | null | undefined, status: DeviceStatus | undefined, operatingType: OperatingType | undefined, auditStatus: AuditStatus | undefined, isHaveChildDevices: boolean | null | undefined, deviceTypeIds: number[] | null | undefined, storesId: number[] | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<DeviceDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/GetDevices?";
        if (ouIds !== undefined && ouIds !== null)
            ouIds && ouIds.forEach(item => { url_ += "OuIds=" + encodeURIComponent("" + item) + "&"; });
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&";
        if (operatingType === null)
            throw new Error("The parameter 'operatingType' cannot be null.");
        else if (operatingType !== undefined)
            url_ += "OperatingType=" + encodeURIComponent("" + operatingType) + "&";
        if (auditStatus === null)
            throw new Error("The parameter 'auditStatus' cannot be null.");
        else if (auditStatus !== undefined)
            url_ += "AuditStatus=" + encodeURIComponent("" + auditStatus) + "&";
        if (isHaveChildDevices !== undefined && isHaveChildDevices !== null)
            url_ += "IsHaveChildDevices=" + encodeURIComponent("" + isHaveChildDevices) + "&";
        if (deviceTypeIds !== undefined && deviceTypeIds !== null)
            deviceTypeIds && deviceTypeIds.forEach(item => { url_ += "DeviceTypeIds=" + encodeURIComponent("" + item) + "&"; });
        if (storesId !== undefined && storesId !== null)
            storesId && storesId.forEach(item => { url_ += "StoresId=" + encodeURIComponent("" + item) + "&"; });
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDevices(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDevices(<any>response_);
                } catch (e) {
                    return <Observable<DeviceDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDevices(response: HttpResponseBase): Observable<DeviceDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceDtoPagedResultDto>(<any>null);
    }

    /**
     * 为当前用户所在的租户创建新的设备
    todo:查重是加上tenant，后面线下接口都要传tenant
     * @param body (optional) 
     * @return Success
     */
    createDevice(body: CreateDeviceInput | undefined): Observable<DeviceDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/CreateDevice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDevice(<any>response_);
                } catch (e) {
                    return <Observable<DeviceDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateDevice(response: HttpResponseBase): Observable<DeviceDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceDto>(<any>null);
    }

    /**
     * 通过App或Wechat扫码注册设备
     * @param body (optional) 
     * @return Success
     */
    createDeviceFromScanCode(body: CreateDeviceFromScanCodeInput | undefined): Observable<DeviceDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/CreateDeviceFromScanCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateDeviceFromScanCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDeviceFromScanCode(<any>response_);
                } catch (e) {
                    return <Observable<DeviceDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateDeviceFromScanCode(response: HttpResponseBase): Observable<DeviceDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceDto>(<any>null);
    }

    /**
     * 通过App或Wechat进行设备绑定
     * @param body (optional) 
     * @return Success
     */
    bindDeviceFromScanCode(body: BindDeviceFromScanCodeInput | undefined): Observable<DeviceDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/BindDeviceFromScanCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBindDeviceFromScanCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBindDeviceFromScanCode(<any>response_);
                } catch (e) {
                    return <Observable<DeviceDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceDto>><any>_observableThrow(response_);
        }));
    }

    protected processBindDeviceFromScanCode(response: HttpResponseBase): Observable<DeviceDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceDto>(<any>null);
    }

    /**
     * 更新设备的基础信息，目前不支持Tag一起更新
     * @param body (optional) 
     * @return Success
     */
    updateDevice(body: UpdateDeviceInput | undefined): Observable<DeviceDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/UpdateDevice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateDevice(<any>response_);
                } catch (e) {
                    return <Observable<DeviceDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateDevice(response: HttpResponseBase): Observable<DeviceDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceDto>(<any>null);
    }

    /**
     * 删除当前租户的特定设备
     * @param id (optional) 
     * @return Success
     */
    deleteDevice(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Device/DeleteDevice?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDevice(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDevice(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 批量删除当前租付的设备
     * @param ids (optional) 
     * @return Success
     */
    deleteDevices(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Device/DeleteDevices?";
        if (ids !== undefined && ids !== null)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDevices(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDevices(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDevices(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取组织架构下店铺下设备的树形结构
     * @param ouIds (optional) 
     * @return Success
     */
    getOuStoreDeviceTree(ouIds: number[] | null | undefined): Observable<TreeItemDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/GetOuStoreDeviceTree?";
        if (ouIds !== undefined && ouIds !== null)
            ouIds && ouIds.forEach(item => { url_ += "ouIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOuStoreDeviceTree(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOuStoreDeviceTree(<any>response_);
                } catch (e) {
                    return <Observable<TreeItemDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TreeItemDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetOuStoreDeviceTree(response: HttpResponseBase): Observable<TreeItemDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TreeItemDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TreeItemDto>(<any>null);
    }

    /**
     * 把设备下发到Store，一个设备只能属于一个门店
     * @param body (optional) 
     * @return Success
     */
    publishDeviceToStore(body: PublishDeviceInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Device/PublishDeviceToStore";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPublishDeviceToStore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPublishDeviceToStore(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPublishDeviceToStore(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 把设备撤回，撤回后，设备不属于任何一个门店
     * @param body (optional) 
     * @return Success
     */
    recycleDeviceFromStore(body: RecycleDeviceInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Device/RecycleDeviceFromStore";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRecycleDeviceFromStore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRecycleDeviceFromStore(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRecycleDeviceFromStore(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 设备的镜像发布
     * @param body (optional) 
     * @return Success
     */
    publishDeviceMirror(body: DeviceMirrorPublishInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Device/PublishDeviceMirror";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPublishDeviceMirror(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPublishDeviceMirror(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPublishDeviceMirror(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 特定设备在其它平台中的注册信息，与OuterId有所不同，OuterId是用户企业内所用的逻辑编号。
     * @param body (optional) 
     * @return Success
     */
    updateThirdDeviceCode(body: UpdateThirdDeivceCodeInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Device/UpdateThirdDeviceCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateThirdDeviceCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateThirdDeviceCode(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateThirdDeviceCode(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 导出设备信息的Excel（名称，OS，subkey等内容）
     * @param ouIds (optional) 组织架构的ID
     * @param status (optional) 设备的状态（枚举）
     * @param operatingType (optional) 设备操作类型
     * @param auditStatus (optional) 审核状态
     * @param isHaveChildDevices (optional) 是否有子设备
     * @param deviceTypeIds (optional) 设备类型ID
     * @param storesId (optional) 店铺ID
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getDeviceToExcel(ouIds: number[] | null | undefined, status: DeviceStatus | undefined, operatingType: OperatingType | undefined, auditStatus: AuditStatus | undefined, isHaveChildDevices: boolean | null | undefined, deviceTypeIds: number[] | null | undefined, storesId: number[] | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/GetDeviceToExcel?";
        if (ouIds !== undefined && ouIds !== null)
            ouIds && ouIds.forEach(item => { url_ += "OuIds=" + encodeURIComponent("" + item) + "&"; });
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&";
        if (operatingType === null)
            throw new Error("The parameter 'operatingType' cannot be null.");
        else if (operatingType !== undefined)
            url_ += "OperatingType=" + encodeURIComponent("" + operatingType) + "&";
        if (auditStatus === null)
            throw new Error("The parameter 'auditStatus' cannot be null.");
        else if (auditStatus !== undefined)
            url_ += "AuditStatus=" + encodeURIComponent("" + auditStatus) + "&";
        if (isHaveChildDevices !== undefined && isHaveChildDevices !== null)
            url_ += "IsHaveChildDevices=" + encodeURIComponent("" + isHaveChildDevices) + "&";
        if (deviceTypeIds !== undefined && deviceTypeIds !== null)
            deviceTypeIds && deviceTypeIds.forEach(item => { url_ += "DeviceTypeIds=" + encodeURIComponent("" + item) + "&"; });
        if (storesId !== undefined && storesId !== null)
            storesId && storesId.forEach(item => { url_ += "StoresId=" + encodeURIComponent("" + item) + "&"; });
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceToExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceToExcel(<any>response_);
                } catch (e) {
                    return <Observable<FileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceToExcel(response: HttpResponseBase): Observable<FileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileDto>(<any>null);
    }

    /**
     * 获取店铺下的设备
     * @param text (optional) 
     * @param idQuery (optional) 
     * @param typeQuery (optional) 
     * @param isSelected (optional) 
     * @param deviceTypeId (optional) 
     * @param children (optional) 
     * @param organizationUnitId (optional) 
     * @param isNeedThingApprove (optional) 
     * @param isNeedAdsApprove (optional) 
     * @param isNeedAppApprove (optional) 
     * @param isNeedDeviceApprove (optional) 
     * @param isNeedCouponApprove (optional) 
     * @param isAdsAutoSendDown (optional) 
     * @param isAppAutoSendDown (optional) 
     * @param isProductAutoSendDown (optional) 
     * @param isCouponAutoSendDown (optional) 
     * @param canAcceptAdsAutoSendDown (optional) 
     * @param canAcceptAppAutoSendDown (optional) 
     * @param canAcceptProductAutoSendDown (optional) 
     * @param canAcceptCouponAutoSendDown (optional) 
     * @param position_State (optional) 
     * @param position_Area (optional) 
     * @param position_Province (optional) 
     * @param position_City (optional) 
     * @param position_County (optional) 
     * @param position_Location (optional) 
     * @param position_ZipCode (optional) 
     * @param position_Longitude (optional) 
     * @param position_Latitude (optional) 
     * @param position_Code (optional) 
     * @param position_IsDeleted (optional) 
     * @param position_DeleterUserId (optional) 
     * @param position_DeletionTime (optional) 
     * @param position_LastModificationTime (optional) 
     * @param position_LastModifierUserId (optional) 
     * @param position_CreationTime (optional) 
     * @param position_CreatorUserId (optional) 
     * @param position_Id (optional) 
     * @param storeType (optional) 
     * @param storeDevicesInfo (optional) 
     * @param roomIds (optional) 
     * @param brandId (optional) 
     * @param tenantId (optional) 
     * @param outerId (optional) 
     * @param qrCodeExtraInfo (optional) 
     * @param logoUrl (optional) 
     * @param webAddressUrl (optional) 
     * @param qRCodeUrl (optional) 
     * @param contact (optional) 
     * @param categoryId (optional) 
     * @param positionId (optional) 
     * @param addressDetail (optional) 
     * @param openingTime (optional) 
     * @param closedTime (optional) 
     * @param qrcodeRules (optional) 
     * @param defaultOnlineShopName (optional) 
     * @param isDeleted (optional) 
     * @param deleterUserId (optional) 
     * @param deletionTime (optional) 
     * @param lastModificationTime (optional) 
     * @param lastModifierUserId (optional) 
     * @param creationTime (optional) 
     * @param creatorUserId (optional) 
     * @return Success
     */
    getDevicesUnderStore(text: string | null | undefined, idQuery: number | undefined, typeQuery: string | null | undefined, isSelected: boolean | undefined, deviceTypeId: number | null | undefined, children: TreeItemDto[] | null | undefined, organizationUnitId: number | null | undefined, isNeedThingApprove: boolean | undefined, isNeedAdsApprove: boolean | undefined, isNeedAppApprove: boolean | undefined, isNeedDeviceApprove: boolean | undefined, isNeedCouponApprove: boolean | undefined, isAdsAutoSendDown: boolean | undefined, isAppAutoSendDown: boolean | undefined, isProductAutoSendDown: boolean | undefined, isCouponAutoSendDown: boolean | undefined, canAcceptAdsAutoSendDown: boolean | undefined, canAcceptAppAutoSendDown: boolean | undefined, canAcceptProductAutoSendDown: boolean | undefined, canAcceptCouponAutoSendDown: boolean | undefined, position_State: string | null | undefined, position_Area: string | null | undefined, position_Province: string | null | undefined, position_City: string | null | undefined, position_County: string | null | undefined, position_Location: string | null | undefined, position_ZipCode: string | null | undefined, position_Longitude: number | null | undefined, position_Latitude: number | null | undefined, position_Code: string | null | undefined, position_IsDeleted: boolean | undefined, position_DeleterUserId: number | null | undefined, position_DeletionTime: moment.Moment | null | undefined, position_LastModificationTime: moment.Moment | null | undefined, position_LastModifierUserId: number | null | undefined, position_CreationTime: moment.Moment | undefined, position_CreatorUserId: number | null | undefined, position_Id: number | undefined, storeType: string | null | undefined, storeDevicesInfo: string | null | undefined, storeStatus: StoreStatus, roomIds: string | null | undefined, brandId: number | null | undefined, tenantId: number | undefined, displayName: string, outerId: string | null | undefined, qrCodeExtraInfo: string | null | undefined, logoUrl: string | null | undefined, webAddressUrl: string | null | undefined, qRCodeUrl: string | null | undefined, contact: string | null | undefined, categoryId: string | null | undefined, positionId: number | null | undefined, addressDetail: string | null | undefined, openingTime: moment.Moment | null | undefined, closedTime: moment.Moment | null | undefined, qrcodeRules: string | null | undefined, defaultOnlineShopName: string | null | undefined, isDeleted: boolean | undefined, deleterUserId: number | null | undefined, deletionTime: moment.Moment | null | undefined, lastModificationTime: moment.Moment | null | undefined, lastModifierUserId: number | null | undefined, creationTime: moment.Moment | undefined, creatorUserId: number | null | undefined): Observable<TreeItemDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/GetDevicesUnderStore?";
        if (text !== undefined && text !== null)
            url_ += "Text=" + encodeURIComponent("" + text) + "&";
        if (idQuery === null)
            throw new Error("The parameter 'idQuery' cannot be null.");
        else if (idQuery !== undefined)
            url_ += "Id=" + encodeURIComponent("" + idQuery) + "&";
        if (typeQuery !== undefined && typeQuery !== null)
            url_ += "Type=" + encodeURIComponent("" + typeQuery) + "&";
        if (isSelected === null)
            throw new Error("The parameter 'isSelected' cannot be null.");
        else if (isSelected !== undefined)
            url_ += "isSelected=" + encodeURIComponent("" + isSelected) + "&";
        if (deviceTypeId !== undefined && deviceTypeId !== null)
            url_ += "DeviceTypeId=" + encodeURIComponent("" + deviceTypeId) + "&";
        if (children !== undefined && children !== null)
            children && children.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "Children[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
        			}
            });
        if (organizationUnitId !== undefined && organizationUnitId !== null)
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        if (isNeedThingApprove === null)
            throw new Error("The parameter 'isNeedThingApprove' cannot be null.");
        else if (isNeedThingApprove !== undefined)
            url_ += "IsNeedThingApprove=" + encodeURIComponent("" + isNeedThingApprove) + "&";
        if (isNeedAdsApprove === null)
            throw new Error("The parameter 'isNeedAdsApprove' cannot be null.");
        else if (isNeedAdsApprove !== undefined)
            url_ += "IsNeedAdsApprove=" + encodeURIComponent("" + isNeedAdsApprove) + "&";
        if (isNeedAppApprove === null)
            throw new Error("The parameter 'isNeedAppApprove' cannot be null.");
        else if (isNeedAppApprove !== undefined)
            url_ += "IsNeedAppApprove=" + encodeURIComponent("" + isNeedAppApprove) + "&";
        if (isNeedDeviceApprove === null)
            throw new Error("The parameter 'isNeedDeviceApprove' cannot be null.");
        else if (isNeedDeviceApprove !== undefined)
            url_ += "IsNeedDeviceApprove=" + encodeURIComponent("" + isNeedDeviceApprove) + "&";
        if (isNeedCouponApprove === null)
            throw new Error("The parameter 'isNeedCouponApprove' cannot be null.");
        else if (isNeedCouponApprove !== undefined)
            url_ += "IsNeedCouponApprove=" + encodeURIComponent("" + isNeedCouponApprove) + "&";
        if (isAdsAutoSendDown === null)
            throw new Error("The parameter 'isAdsAutoSendDown' cannot be null.");
        else if (isAdsAutoSendDown !== undefined)
            url_ += "IsAdsAutoSendDown=" + encodeURIComponent("" + isAdsAutoSendDown) + "&";
        if (isAppAutoSendDown === null)
            throw new Error("The parameter 'isAppAutoSendDown' cannot be null.");
        else if (isAppAutoSendDown !== undefined)
            url_ += "IsAppAutoSendDown=" + encodeURIComponent("" + isAppAutoSendDown) + "&";
        if (isProductAutoSendDown === null)
            throw new Error("The parameter 'isProductAutoSendDown' cannot be null.");
        else if (isProductAutoSendDown !== undefined)
            url_ += "IsProductAutoSendDown=" + encodeURIComponent("" + isProductAutoSendDown) + "&";
        if (isCouponAutoSendDown === null)
            throw new Error("The parameter 'isCouponAutoSendDown' cannot be null.");
        else if (isCouponAutoSendDown !== undefined)
            url_ += "IsCouponAutoSendDown=" + encodeURIComponent("" + isCouponAutoSendDown) + "&";
        if (canAcceptAdsAutoSendDown === null)
            throw new Error("The parameter 'canAcceptAdsAutoSendDown' cannot be null.");
        else if (canAcceptAdsAutoSendDown !== undefined)
            url_ += "CanAcceptAdsAutoSendDown=" + encodeURIComponent("" + canAcceptAdsAutoSendDown) + "&";
        if (canAcceptAppAutoSendDown === null)
            throw new Error("The parameter 'canAcceptAppAutoSendDown' cannot be null.");
        else if (canAcceptAppAutoSendDown !== undefined)
            url_ += "CanAcceptAppAutoSendDown=" + encodeURIComponent("" + canAcceptAppAutoSendDown) + "&";
        if (canAcceptProductAutoSendDown === null)
            throw new Error("The parameter 'canAcceptProductAutoSendDown' cannot be null.");
        else if (canAcceptProductAutoSendDown !== undefined)
            url_ += "CanAcceptProductAutoSendDown=" + encodeURIComponent("" + canAcceptProductAutoSendDown) + "&";
        if (canAcceptCouponAutoSendDown === null)
            throw new Error("The parameter 'canAcceptCouponAutoSendDown' cannot be null.");
        else if (canAcceptCouponAutoSendDown !== undefined)
            url_ += "CanAcceptCouponAutoSendDown=" + encodeURIComponent("" + canAcceptCouponAutoSendDown) + "&";
        if (position_State !== undefined && position_State !== null)
            url_ += "Position.State=" + encodeURIComponent("" + position_State) + "&";
        if (position_Area !== undefined && position_Area !== null)
            url_ += "Position.Area=" + encodeURIComponent("" + position_Area) + "&";
        if (position_Province !== undefined && position_Province !== null)
            url_ += "Position.Province=" + encodeURIComponent("" + position_Province) + "&";
        if (position_City !== undefined && position_City !== null)
            url_ += "Position.City=" + encodeURIComponent("" + position_City) + "&";
        if (position_County !== undefined && position_County !== null)
            url_ += "Position.County=" + encodeURIComponent("" + position_County) + "&";
        if (position_Location !== undefined && position_Location !== null)
            url_ += "Position.Location=" + encodeURIComponent("" + position_Location) + "&";
        if (position_ZipCode !== undefined && position_ZipCode !== null)
            url_ += "Position.ZipCode=" + encodeURIComponent("" + position_ZipCode) + "&";
        if (position_Longitude !== undefined && position_Longitude !== null)
            url_ += "Position.Longitude=" + encodeURIComponent("" + position_Longitude) + "&";
        if (position_Latitude !== undefined && position_Latitude !== null)
            url_ += "Position.Latitude=" + encodeURIComponent("" + position_Latitude) + "&";
        if (position_Code !== undefined && position_Code !== null)
            url_ += "Position.Code=" + encodeURIComponent("" + position_Code) + "&";
        if (position_IsDeleted === null)
            throw new Error("The parameter 'position_IsDeleted' cannot be null.");
        else if (position_IsDeleted !== undefined)
            url_ += "Position.IsDeleted=" + encodeURIComponent("" + position_IsDeleted) + "&";
        if (position_DeleterUserId !== undefined && position_DeleterUserId !== null)
            url_ += "Position.DeleterUserId=" + encodeURIComponent("" + position_DeleterUserId) + "&";
        if (position_DeletionTime !== undefined && position_DeletionTime !== null)
            url_ += "Position.DeletionTime=" + encodeURIComponent(position_DeletionTime ? "" + position_DeletionTime.toJSON() : "") + "&";
        if (position_LastModificationTime !== undefined && position_LastModificationTime !== null)
            url_ += "Position.LastModificationTime=" + encodeURIComponent(position_LastModificationTime ? "" + position_LastModificationTime.toJSON() : "") + "&";
        if (position_LastModifierUserId !== undefined && position_LastModifierUserId !== null)
            url_ += "Position.LastModifierUserId=" + encodeURIComponent("" + position_LastModifierUserId) + "&";
        if (position_CreationTime === null)
            throw new Error("The parameter 'position_CreationTime' cannot be null.");
        else if (position_CreationTime !== undefined)
            url_ += "Position.CreationTime=" + encodeURIComponent(position_CreationTime ? "" + position_CreationTime.toJSON() : "") + "&";
        if (position_CreatorUserId !== undefined && position_CreatorUserId !== null)
            url_ += "Position.CreatorUserId=" + encodeURIComponent("" + position_CreatorUserId) + "&";
        if (position_Id === null)
            throw new Error("The parameter 'position_Id' cannot be null.");
        else if (position_Id !== undefined)
            url_ += "Position.Id=" + encodeURIComponent("" + position_Id) + "&";
        if (storeType !== undefined && storeType !== null)
            url_ += "StoreType=" + encodeURIComponent("" + storeType) + "&";
        if (storeDevicesInfo !== undefined && storeDevicesInfo !== null)
            url_ += "StoreDevicesInfo=" + encodeURIComponent("" + storeDevicesInfo) + "&";
        if (storeStatus === undefined || storeStatus === null)
            throw new Error("The parameter 'storeStatus' must be defined and cannot be null.");
        else
            url_ += "StoreStatus=" + encodeURIComponent("" + storeStatus) + "&";
        if (roomIds !== undefined && roomIds !== null)
            url_ += "RoomIds=" + encodeURIComponent("" + roomIds) + "&";
        if (brandId !== undefined && brandId !== null)
            url_ += "BrandId=" + encodeURIComponent("" + brandId) + "&";
        if (tenantId === null)
            throw new Error("The parameter 'tenantId' cannot be null.");
        else if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&";
        if (displayName === undefined || displayName === null)
            throw new Error("The parameter 'displayName' must be defined and cannot be null.");
        else
            url_ += "DisplayName=" + encodeURIComponent("" + displayName) + "&";
        if (outerId !== undefined && outerId !== null)
            url_ += "OuterId=" + encodeURIComponent("" + outerId) + "&";
        if (qrCodeExtraInfo !== undefined && qrCodeExtraInfo !== null)
            url_ += "QrCodeExtraInfo=" + encodeURIComponent("" + qrCodeExtraInfo) + "&";
        if (logoUrl !== undefined && logoUrl !== null)
            url_ += "LogoUrl=" + encodeURIComponent("" + logoUrl) + "&";
        if (webAddressUrl !== undefined && webAddressUrl !== null)
            url_ += "WebAddressUrl=" + encodeURIComponent("" + webAddressUrl) + "&";
        if (qRCodeUrl !== undefined && qRCodeUrl !== null)
            url_ += "QRCodeUrl=" + encodeURIComponent("" + qRCodeUrl) + "&";
        if (contact !== undefined && contact !== null)
            url_ += "Contact=" + encodeURIComponent("" + contact) + "&";
        if (categoryId !== undefined && categoryId !== null)
            url_ += "CategoryId=" + encodeURIComponent("" + categoryId) + "&";
        if (positionId !== undefined && positionId !== null)
            url_ += "PositionId=" + encodeURIComponent("" + positionId) + "&";
        if (addressDetail !== undefined && addressDetail !== null)
            url_ += "AddressDetail=" + encodeURIComponent("" + addressDetail) + "&";
        if (openingTime !== undefined && openingTime !== null)
            url_ += "OpeningTime=" + encodeURIComponent(openingTime ? "" + openingTime.toJSON() : "") + "&";
        if (closedTime !== undefined && closedTime !== null)
            url_ += "ClosedTime=" + encodeURIComponent(closedTime ? "" + closedTime.toJSON() : "") + "&";
        if (qrcodeRules !== undefined && qrcodeRules !== null)
            url_ += "QrcodeRules=" + encodeURIComponent("" + qrcodeRules) + "&";
        if (defaultOnlineShopName !== undefined && defaultOnlineShopName !== null)
            url_ += "DefaultOnlineShopName=" + encodeURIComponent("" + defaultOnlineShopName) + "&";
        if (isDeleted === null)
            throw new Error("The parameter 'isDeleted' cannot be null.");
        else if (isDeleted !== undefined)
            url_ += "IsDeleted=" + encodeURIComponent("" + isDeleted) + "&";
        if (deleterUserId !== undefined && deleterUserId !== null)
            url_ += "DeleterUserId=" + encodeURIComponent("" + deleterUserId) + "&";
        if (deletionTime !== undefined && deletionTime !== null)
            url_ += "DeletionTime=" + encodeURIComponent(deletionTime ? "" + deletionTime.toJSON() : "") + "&";
        if (lastModificationTime !== undefined && lastModificationTime !== null)
            url_ += "LastModificationTime=" + encodeURIComponent(lastModificationTime ? "" + lastModificationTime.toJSON() : "") + "&";
        if (lastModifierUserId !== undefined && lastModifierUserId !== null)
            url_ += "LastModifierUserId=" + encodeURIComponent("" + lastModifierUserId) + "&";
        if (creationTime === null)
            throw new Error("The parameter 'creationTime' cannot be null.");
        else if (creationTime !== undefined)
            url_ += "CreationTime=" + encodeURIComponent(creationTime ? "" + creationTime.toJSON() : "") + "&";
        if (creatorUserId !== undefined && creatorUserId !== null)
            url_ += "CreatorUserId=" + encodeURIComponent("" + creatorUserId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDevicesUnderStore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDevicesUnderStore(<any>response_);
                } catch (e) {
                    return <Observable<TreeItemDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TreeItemDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDevicesUnderStore(response: HttpResponseBase): Observable<TreeItemDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TreeItemDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TreeItemDto>(<any>null);
    }

    /**
     * 获取系统设备类型列表，支持分页
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getDeviceTypes(filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<DeviceTypeDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/GetDeviceTypes?";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceTypes(<any>response_);
                } catch (e) {
                    return <Observable<DeviceTypeDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceTypeDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceTypes(response: HttpResponseBase): Observable<DeviceTypeDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceTypeDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceTypeDtoPagedResultDto>(<any>null);
    }

    /**
     * 创建新的设备类型,名称不能重复
     * @param body (optional) 
     * @return Success
     */
    createDeviceType(body: CreateDeviceTypeInput | undefined): Observable<DeviceTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/CreateDeviceType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateDeviceType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDeviceType(<any>response_);
                } catch (e) {
                    return <Observable<DeviceTypeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceTypeDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateDeviceType(response: HttpResponseBase): Observable<DeviceTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceTypeDto>(<any>null);
    }

    /**
     * 更新系统中设备类型, 名称不能重复
     * @param body (optional) 
     * @return Success
     */
    updateDeviceType(body: UpdateDeviceTypeInput | undefined): Observable<DeviceTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/UpdateDeviceType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateDeviceType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateDeviceType(<any>response_);
                } catch (e) {
                    return <Observable<DeviceTypeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceTypeDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateDeviceType(response: HttpResponseBase): Observable<DeviceTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceTypeDto>(<any>null);
    }

    /**
     * 删除系统中设备类型，单个逻辑删除
     * @param id (optional) 
     * @return Success
     */
    deleteDeviceType(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Device/DeleteDeviceType?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDeviceType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDeviceType(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDeviceType(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取设备的能力和控制项，用于用户给设备分配能力
     * @return Success
     */
    getDeviceTypeSelect(): Observable<NameValueAbilitiesListResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/GetDeviceTypeSelect";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceTypeSelect(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceTypeSelect(<any>response_);
                } catch (e) {
                    return <Observable<NameValueAbilitiesListResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<NameValueAbilitiesListResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceTypeSelect(response: HttpResponseBase): Observable<NameValueAbilitiesListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NameValueAbilitiesListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NameValueAbilitiesListResultDto>(<any>null);
    }

    /**
     * 新建设备的额外信息
     * @param body (optional) 
     * @return Success
     */
    createDeviceExtra(body: CreateDeviceExtraInput | undefined): Observable<DeviceExtraDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/CreateDeviceExtra";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateDeviceExtra(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDeviceExtra(<any>response_);
                } catch (e) {
                    return <Observable<DeviceExtraDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceExtraDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateDeviceExtra(response: HttpResponseBase): Observable<DeviceExtraDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceExtraDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceExtraDto>(<any>null);
    }

    /**
     * 更新设备额外信息
     * @param body (optional) 
     * @return Success
     */
    updateDeviceExtra(body: UpdateDeviceExtraInput | undefined): Observable<DeviceExtraDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/UpdateDeviceExtra";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateDeviceExtra(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateDeviceExtra(<any>response_);
                } catch (e) {
                    return <Observable<DeviceExtraDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceExtraDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateDeviceExtra(response: HttpResponseBase): Observable<DeviceExtraDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceExtraDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceExtraDto>(<any>null);
    }

    /**
     * 删除设备的额外信息
     * @param id (optional) 
     * @return Success
     */
    deleteDeviceExtra(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Device/DeleteDeviceExtra?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDeviceExtra(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDeviceExtra(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDeviceExtra(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取设备额外信息列表，可以根据特定设备ID，可能需要合并到getdevices（支持分页）
     * @param externalEnum (optional) 
     * @param deviceId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getDeviceExtras(externalEnum: ExternalEnum | undefined, deviceId: number | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<DeviceExtraDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/GetDeviceExtras?";
        if (externalEnum === null)
            throw new Error("The parameter 'externalEnum' cannot be null.");
        else if (externalEnum !== undefined)
            url_ += "ExternalEnum=" + encodeURIComponent("" + externalEnum) + "&";
        if (deviceId !== undefined && deviceId !== null)
            url_ += "DeviceId=" + encodeURIComponent("" + deviceId) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceExtras(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceExtras(<any>response_);
                } catch (e) {
                    return <Observable<DeviceExtraDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceExtraDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceExtras(response: HttpResponseBase): Observable<DeviceExtraDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceExtraDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceExtraDtoPagedResultDto>(<any>null);
    }

    /**
     * 多个设备的远程控制(向设备发送命令),Host也是可以调用
     * @param body (optional) 
     * @return Success
     */
    broadcastEvent(body: DevicesActionInput | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/Device/BroadcastEvent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBroadcastEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBroadcastEvent(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processBroadcastEvent(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    /**
     * 设备密钥控制设备，无需用户权限
     * @param body (optional) 
     * @return Success
     */
    publishEventWithSubkey(body: DevicesActionInputWithSubkey | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/Device/PublishEventWithSubkey";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPublishEventWithSubkey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPublishEventWithSubkey(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processPublishEventWithSubkey(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    publishEventTest(body: DeviceStatusEventInput | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Device/PublishEventTest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPublishEventTest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPublishEventTest(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processPublishEventTest(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * 获取系统中外设列表, 支持分页。
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getPeripherals(filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<PeripheralDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/GetPeripherals?";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPeripherals(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPeripherals(<any>response_);
                } catch (e) {
                    return <Observable<PeripheralDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PeripheralDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetPeripherals(response: HttpResponseBase): Observable<PeripheralDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PeripheralDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeripheralDtoPagedResultDto>(<any>null);
    }

    /**
     * 创建新的外设，名称不能重复，返回被创建外设的Id编号
     * @param body (optional) 
     * @return Success
     */
    createPeripheral(body: CreatePeripheralInput | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Device/CreatePeripheral";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreatePeripheral(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreatePeripheral(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreatePeripheral(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * 更新外设数据，外设的名字不能重复
     * @param body (optional) 
     * @return Success
     */
    updatePeripheral(body: UpdatePeripheralInput | undefined): Observable<PeripheralDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/UpdatePeripheral";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePeripheral(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePeripheral(<any>response_);
                } catch (e) {
                    return <Observable<PeripheralDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PeripheralDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdatePeripheral(response: HttpResponseBase): Observable<PeripheralDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PeripheralDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeripheralDto>(<any>null);
    }

    /**
     * 删除系统中的外设,每次只能删除一个，逻辑删除
     * @param id (optional) 
     * @return Success
     */
    deletePeripheral(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Device/DeletePeripheral?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeletePeripheral(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeletePeripheral(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeletePeripheral(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取所有外设的Key和Value列表,用于用户为设备选取外设
     * @return Success
     */
    selectPeriperal(): Observable<Int32SelectDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Device/SelectPeriperal";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSelectPeriperal(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSelectPeriperal(<any>response_);
                } catch (e) {
                    return <Observable<Int32SelectDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Int32SelectDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processSelectPeriperal(response: HttpResponseBase): Observable<Int32SelectDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Int32SelectDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Int32SelectDto[]>(<any>null);
    }

    /**
     * 注册设备信息到淘宝
     * @param body (optional) 
     * @return Success
     */
    addSmartStoreDeviceToExtraPlatform(body: AddSmartStoreDeviceToExtraPlatformInput | undefined): Observable<ExtraPlatformDeviceDto> {
        let url_ = this.baseUrl + "/api/services/app/Device/AddSmartStoreDeviceToExtraPlatform";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddSmartStoreDeviceToExtraPlatform(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddSmartStoreDeviceToExtraPlatform(<any>response_);
                } catch (e) {
                    return <Observable<ExtraPlatformDeviceDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExtraPlatformDeviceDto>><any>_observableThrow(response_);
        }));
    }

    protected processAddSmartStoreDeviceToExtraPlatform(response: HttpResponseBase): Observable<ExtraPlatformDeviceDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExtraPlatformDeviceDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExtraPlatformDeviceDto>(<any>null);
    }

    /**
     * 设备的控制(向设备发送命令),Host也是可以进行调用
     * @param body (optional) 设备命令详细
     * @return Success
     */
    publishEvent(body: DeviceActionInput | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/Device/PublishEvent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPublishEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPublishEvent(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processPublishEvent(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    postPlayerDataWithMessage(body: PostPlayerDataInfoInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Device/PostPlayerDataWithMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostPlayerDataWithMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostPlayerDataWithMessage(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPostPlayerDataWithMessage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class DeviceCategoryServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     * @deprecated
     */
    getDeviceCategories(filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<DeviceCategoryDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/DeviceCategory/GetDeviceCategories?";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceCategories(<any>response_);
                } catch (e) {
                    return <Observable<DeviceCategoryDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceCategoryDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceCategories(response: HttpResponseBase): Observable<DeviceCategoryDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceCategoryDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceCategoryDtoPagedResultDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     * @deprecated
     */
    createDeviceCategories(body: CreateDeviceCategoryInput | undefined): Observable<DeviceCategoryDto> {
        let url_ = this.baseUrl + "/api/services/app/DeviceCategory/CreateDeviceCategories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateDeviceCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDeviceCategories(<any>response_);
                } catch (e) {
                    return <Observable<DeviceCategoryDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceCategoryDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateDeviceCategories(response: HttpResponseBase): Observable<DeviceCategoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceCategoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceCategoryDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     * @deprecated
     */
    updateDeviceCategories(body: UpdateDeviceCategoryInput | undefined): Observable<DeviceCategoryDto> {
        let url_ = this.baseUrl + "/api/services/app/DeviceCategory/UpdateDeviceCategories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateDeviceCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateDeviceCategories(<any>response_);
                } catch (e) {
                    return <Observable<DeviceCategoryDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceCategoryDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateDeviceCategories(response: HttpResponseBase): Observable<DeviceCategoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceCategoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceCategoryDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     * @deprecated
     */
    deleteDeviceCategories(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/DeviceCategory/DeleteDeviceCategories?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDeviceCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDeviceCategories(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDeviceCategories(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     * @deprecated
     */
    selectDeviceCategory(): Observable<Int32SelectDto[]> {
        let url_ = this.baseUrl + "/api/services/app/DeviceCategory/SelectDeviceCategory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSelectDeviceCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSelectDeviceCategory(<any>response_);
                } catch (e) {
                    return <Observable<Int32SelectDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Int32SelectDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processSelectDeviceCategory(response: HttpResponseBase): Observable<Int32SelectDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Int32SelectDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Int32SelectDto[]>(<any>null);
    }
}

@Injectable()
export class IdentityServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getClaims(): Observable<string> {
        let url_ = this.baseUrl + "/Identity/GetClaims";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClaims(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetClaims(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @return Success
     */
    getAbpClaims(): Observable<string> {
        let url_ = this.baseUrl + "/Identity/GetAbpClaims";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAbpClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAbpClaims(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetAbpClaims(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param key (optional) 
     * @return Success
     */
    getCacheString(key: string | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/Identity/GetCacheString?";
        if (key !== undefined && key !== null)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCacheString(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCacheString(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetCacheString(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param key (optional) 
     * @param value (optional) 
     * @return Success
     */
    setCacheString(key: string | null | undefined, value: string | null | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/Identity/SetCacheString?";
        if (key !== undefined && key !== null)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (value !== undefined && value !== null)
            url_ += "value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetCacheString(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetCacheString(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processSetCacheString(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }
}

@Injectable()
export class ImportDevicesServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    importDevicesByExcel(): Observable<ImportDeviceResultDto> {
        let url_ = this.baseUrl + "/ImportDevices/ImportDevicesByExcel";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportDevicesByExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportDevicesByExcel(<any>response_);
                } catch (e) {
                    return <Observable<ImportDeviceResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ImportDeviceResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processImportDevicesByExcel(response: HttpResponseBase): Observable<ImportDeviceResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ImportDeviceResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ImportDeviceResultDto>(<any>null);
    }
}

@Injectable()
export class ImportDeviceScheduleServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param excel (optional) 
     * @param excel (optional) 
     * @return Success
     */
    importDeviceStoreSchduleByExcel(excel1: FileParameter | undefined, excel: FileParameter | null | undefined): Observable<ImportDeviceResultDto> {
        let url_ = this.baseUrl + "/ImportDeviceSchedule/ImportDeviceStoreSchduleByExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (excel !== null && excel !== undefined)
            content_.append("excel", excel.data, excel.fileName ? excel.fileName : "excel");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportDeviceStoreSchduleByExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportDeviceStoreSchduleByExcel(<any>response_);
                } catch (e) {
                    return <Observable<ImportDeviceResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ImportDeviceResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processImportDeviceStoreSchduleByExcel(response: HttpResponseBase): Observable<ImportDeviceResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ImportDeviceResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ImportDeviceResultDto>(<any>null);
    }
}

@Injectable()
export class OrganizationUnitServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取组织架构下的store的详细信息，支持分页
     * @param organizationUnitTypeName (optional) 组织架构类型名（默认店铺）
     * @param organizationUnitId (optional) 组织架构ID
     * @param areas (optional) 位置
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getStores(organizationUnitTypeName: string | null | undefined, organizationUnitId: number | null | undefined, areas: string[] | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<StoreDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetStores?";
        if (organizationUnitTypeName !== undefined && organizationUnitTypeName !== null)
            url_ += "OrganizationUnitTypeName=" + encodeURIComponent("" + organizationUnitTypeName) + "&";
        if (organizationUnitId !== undefined && organizationUnitId !== null)
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        if (areas !== undefined && areas !== null)
            areas && areas.forEach(item => { url_ += "Areas=" + encodeURIComponent("" + item) + "&"; });
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStores(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStores(<any>response_);
                } catch (e) {
                    return <Observable<StoreDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StoreDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetStores(response: HttpResponseBase): Observable<StoreDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StoreDtoPagedResultDto>(<any>null);
    }

    /**
     * 获取组织架构下的店铺Id和Name的列表
     * @param daquIds (optional) 
     * @param provinceIds (optional) 
     * @return Success
     */
    getStoreList(daquIds: number[] | null | undefined, provinceIds: number[] | null | undefined): Observable<IdNameDto[]> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetStoreList?";
        if (daquIds !== undefined && daquIds !== null)
            daquIds && daquIds.forEach(item => { url_ += "DaquIds=" + encodeURIComponent("" + item) + "&"; });
        if (provinceIds !== undefined && provinceIds !== null)
            provinceIds && provinceIds.forEach(item => { url_ += "ProvinceIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStoreList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStoreList(<any>response_);
                } catch (e) {
                    return <Observable<IdNameDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<IdNameDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetStoreList(response: HttpResponseBase): Observable<IdNameDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(IdNameDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IdNameDto[]>(<any>null);
    }

    /**
     * 获取当前登陆用户所在租户下组织架构的树形结构
     * @return Success
     */
    getCurrentTenantOrganizationUnitsTree(): Observable<Int64TreeDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetCurrentTenantOrganizationUnitsTree";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentTenantOrganizationUnitsTree(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentTenantOrganizationUnitsTree(<any>response_);
                } catch (e) {
                    return <Observable<Int64TreeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<Int64TreeDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentTenantOrganizationUnitsTree(response: HttpResponseBase): Observable<Int64TreeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Int64TreeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Int64TreeDto>(<any>null);
    }

    /**
     * 获取特定组织架构的KPI的名称
     * @param organizationUnitId (optional) 
     * @return Success
     */
    getOrganizationUintKpiNames(organizationUnitId: number | null | undefined): Observable<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUintKpiNames?";
        if (organizationUnitId !== undefined && organizationUnitId !== null)
            url_ += "organizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrganizationUintKpiNames(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrganizationUintKpiNames(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrganizationUintKpiNames(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }

    /**
     * @return Success
     */
    getDaquList(): Observable<IdNameDto[]> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetDaquList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDaquList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDaquList(<any>response_);
                } catch (e) {
                    return <Observable<IdNameDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<IdNameDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetDaquList(response: HttpResponseBase): Observable<IdNameDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(IdNameDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IdNameDto[]>(<any>null);
    }

    /**
     * @param daquIds (optional) 
     * @return Success
     */
    getProvinceList(daquIds: number[] | null | undefined): Observable<IdNameDto[]> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetProvinceList?";
        if (daquIds !== undefined && daquIds !== null)
            daquIds && daquIds.forEach(item => { url_ += "DaquIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProvinceList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProvinceList(<any>response_);
                } catch (e) {
                    return <Observable<IdNameDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<IdNameDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetProvinceList(response: HttpResponseBase): Observable<IdNameDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(IdNameDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IdNameDto[]>(<any>null);
    }

    /**
     * 获取全部区域
     * @return Success
     */
    getAreas(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetAreas";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAreas(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAreas(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAreas(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }

    /**
     * 获取组织架构下的KPI信息列表，支持分页
     * @param organizationUnitId (optional) 组织架构Id
     * @param storeId (optional) 店铺ID
     * @param scaleTimeStart (optional) 考核开始时间
     * @param scaleTimeEnd (optional) 考核结束时间
     * @param kPIScale (optional) Kpi按（年、月、周、日）考核
     * @param name (optional) 考核内容
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getOrganizationUnitKPIs(organizationUnitId: number | null | undefined, storeId: number | null | undefined, scaleTimeStart: moment.Moment | null | undefined, scaleTimeEnd: moment.Moment | null | undefined, kPIScale: GroupKPIScaleEnum | undefined, name: string | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<OrganizationUnitKPIDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnitKPIs?";
        if (organizationUnitId !== undefined && organizationUnitId !== null)
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        if (storeId !== undefined && storeId !== null)
            url_ += "StoreId=" + encodeURIComponent("" + storeId) + "&";
        if (scaleTimeStart !== undefined && scaleTimeStart !== null)
            url_ += "ScaleTimeStart=" + encodeURIComponent(scaleTimeStart ? "" + scaleTimeStart.toJSON() : "") + "&";
        if (scaleTimeEnd !== undefined && scaleTimeEnd !== null)
            url_ += "ScaleTimeEnd=" + encodeURIComponent(scaleTimeEnd ? "" + scaleTimeEnd.toJSON() : "") + "&";
        if (kPIScale === null)
            throw new Error("The parameter 'kPIScale' cannot be null.");
        else if (kPIScale !== undefined)
            url_ += "KPIScale=" + encodeURIComponent("" + kPIScale) + "&";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrganizationUnitKPIs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrganizationUnitKPIs(<any>response_);
                } catch (e) {
                    return <Observable<OrganizationUnitKPIDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrganizationUnitKPIDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrganizationUnitKPIs(response: HttpResponseBase): Observable<OrganizationUnitKPIDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationUnitKPIDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrganizationUnitKPIDtoPagedResultDto>(<any>null);
    }

    /**
     * 创建组织架构下的KPI
     * @param body (optional) 
     * @return Success
     */
    createOrganizationUnitKPI(body: CreateOUKpiDtoInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/CreateOrganizationUnitKPI";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrganizationUnitKPI(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrganizationUnitKPI(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrganizationUnitKPI(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 更新组织架构下的KPI
     * @param body (optional) 
     * @return Success
     */
    updateOrganizationUnitKPI(body: UpdateOUKpiDtoInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/UpdateOrganizationUnitKPI";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateOrganizationUnitKPI(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOrganizationUnitKPI(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateOrganizationUnitKPI(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除单个组织架构KPI信息
     * @param id (optional) 
     * @return Success
     */
    deleteSingleOrganizationUnitKPI(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/DeleteSingleOrganizationUnitKPI?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteSingleOrganizationUnitKPI(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteSingleOrganizationUnitKPI(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteSingleOrganizationUnitKPI(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 批量删除组织架构KPI信息
     * @param ids (optional) 
     * @return Success
     */
    deleteOrganizationUnitKPIs(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/DeleteOrganizationUnitKPIs?";
        if (ids !== undefined && ids !== null)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteOrganizationUnitKPIs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteOrganizationUnitKPIs(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteOrganizationUnitKPIs(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class ReportServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取总数报表
     * @param body (optional) 
     * @return Success
     */
    getCountReport(body: GetCountReportInput | undefined): Observable<NameCountDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetCountReport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountReport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountReport(<any>response_);
                } catch (e) {
                    return <Observable<NameCountDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<NameCountDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCountReport(response: HttpResponseBase): Observable<NameCountDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NameCountDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NameCountDto[]>(<any>null);
    }

    /**
     * 登录账号的门店数
     * @return Success
     */
    getStoresCount(): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetStoresCount";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStoresCount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStoresCount(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processGetStoresCount(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * 登录账号的设备数
     * @return Success
     */
    getDevicesCount(): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetDevicesCount";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDevicesCount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDevicesCount(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processGetDevicesCount(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * 获取在线设备数量
     * @return Success
     */
    getOnlineDevicesCount(): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetOnlineDevicesCount";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOnlineDevicesCount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOnlineDevicesCount(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processGetOnlineDevicesCount(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }
}

@Injectable()
export class SensingDeviceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 线下设备的注册.
     * @param subKey (optional) 
     * @param body (optional) 
     * @return Success
     */
    registerDevice(subKey: string | null | undefined, body: RegisterDeviceInput | undefined): Observable<DeviceOutput> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/RegisterDevice?";
        if (subKey !== undefined && subKey !== null)
            url_ += "subKey=" + encodeURIComponent("" + subKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterDevice(<any>response_);
                } catch (e) {
                    return <Observable<DeviceOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceOutput>><any>_observableThrow(response_);
        }));
    }

    protected processRegisterDevice(response: HttpResponseBase): Observable<DeviceOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceOutput>(<any>null);
    }

    /**
     * 通过网关设备旗下的子设备
     * @param subKey (optional) 
     * @param body (optional) 
     * @return Success
     */
    createDeviceByGatewaySubKey(subKey: string | null | undefined, body: CreateDeviceInput | undefined): Observable<DeviceDto> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/CreateDeviceByGatewaySubKey?";
        if (subKey !== undefined && subKey !== null)
            url_ += "subKey=" + encodeURIComponent("" + subKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateDeviceByGatewaySubKey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDeviceByGatewaySubKey(<any>response_);
                } catch (e) {
                    return <Observable<DeviceDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateDeviceByGatewaySubKey(response: HttpResponseBase): Observable<DeviceDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceDto>(<any>null);
    }

    /**
     * 根据网关下的Subkey更新设备状态
     * @param subKey (optional) 
     * @param body (optional) 
     * @return Success
     */
    updateStatusByGatewaySubKey(subKey: string | null | undefined, body: UpdateDeviceStatusInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/UpdateStatusByGatewaySubKey?";
        if (subKey !== undefined && subKey !== null)
            url_ += "subKey=" + encodeURIComponent("" + subKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateStatusByGatewaySubKey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateStatusByGatewaySubKey(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateStatusByGatewaySubKey(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 根据设备类型更新设备状态（传入设备状态）
     * @param body (optional) 
     * @return Success
     * @deprecated
     */
    updateStatusByType(body: UpdateDeviceStatusInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/UpdateStatusByType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateStatusByType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateStatusByType(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateStatusByType(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 智能设备心跳
     * @param subKey (optional) 
     * @param body (optional) 
     * @return Success
     */
    deviceHeartBeat(subKey: string | null | undefined, body: DeviceHeartBeatInput | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/DeviceHeartBeat?";
        if (subKey !== undefined && subKey !== null)
            url_ += "subKey=" + encodeURIComponent("" + subKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeviceHeartBeat(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeviceHeartBeat(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeviceHeartBeat(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    /**
     * 根据硬件号获取对应设备subkey
     * @param hardwareCode (optional) 
     * @return Success
     */
    getDeviceSubkeyByHardwareCode(hardwareCode: string | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetDeviceSubkeyByHardwareCode?";
        if (hardwareCode !== undefined && hardwareCode !== null)
            url_ += "hardwareCode=" + encodeURIComponent("" + hardwareCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceSubkeyByHardwareCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceSubkeyByHardwareCode(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceSubkeyByHardwareCode(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * 提供接口给外部调用, 回传设备信息到淘宝
     * @param deviceId (optional) 
     * @return Success
     * @deprecated
     */
    smartstoreDeviceStatusFeedback(deviceId: number | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/SmartstoreDeviceStatusFeedback?";
        if (deviceId === null)
            throw new Error("The parameter 'deviceId' cannot be null.");
        else if (deviceId !== undefined)
            url_ += "deviceId=" + encodeURIComponent("" + deviceId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSmartstoreDeviceStatusFeedback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSmartstoreDeviceStatusFeedback(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processSmartstoreDeviceStatusFeedback(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    /**
     * 获取设备的详细基本信息
     * @param subKey (optional) 
     * @return Success
     * @deprecated
     */
    getTenantAndOrganizationUnitInfo(subKey: string | null | undefined): Observable<TenantAndOrganizationUnitAndStoreOutput> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetTenantAndOrganizationUnitInfo?";
        if (subKey !== undefined && subKey !== null)
            url_ += "subKey=" + encodeURIComponent("" + subKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTenantAndOrganizationUnitInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantAndOrganizationUnitInfo(<any>response_);
                } catch (e) {
                    return <Observable<TenantAndOrganizationUnitAndStoreOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<TenantAndOrganizationUnitAndStoreOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetTenantAndOrganizationUnitInfo(response: HttpResponseBase): Observable<TenantAndOrganizationUnitAndStoreOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TenantAndOrganizationUnitAndStoreOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TenantAndOrganizationUnitAndStoreOutput>(<any>null);
    }

    /**
     * 获取设备的详细基本信息
     * @param subKey (optional) 
     * @return Success
     */
    getDeviceInfo(subKey: string | null | undefined): Observable<DeviceOutput> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetDeviceInfo?";
        if (subKey !== undefined && subKey !== null)
            url_ += "subKey=" + encodeURIComponent("" + subKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceInfo(<any>response_);
                } catch (e) {
                    return <Observable<DeviceOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceInfo(response: HttpResponseBase): Observable<DeviceOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceOutput>(<any>null);
    }

    /**
     * 获取设备被缓存的信息
     * @param subKey (optional) 
     * @return Success
     */
    getDeviceCacheItem(subKey: string | null | undefined): Observable<DeviceCacheItem> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetDeviceCacheItem?";
        if (subKey !== undefined && subKey !== null)
            url_ += "subKey=" + encodeURIComponent("" + subKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceCacheItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceCacheItem(<any>response_);
                } catch (e) {
                    return <Observable<DeviceCacheItem>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceCacheItem>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceCacheItem(response: HttpResponseBase): Observable<DeviceCacheItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceCacheItem.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceCacheItem>(<any>null);
    }

    /**
     * 判断apppod是否需要更新，目前没有实现
     * @return Success
     */
    getAppPodUpdateStatus(versions: string, subKey: string): Observable<AppPodUpdateStatusDto> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetAppPodUpdateStatus?";
        if (versions === undefined || versions === null)
            throw new Error("The parameter 'versions' must be defined and cannot be null.");
        else
            url_ += "Versions=" + encodeURIComponent("" + versions) + "&";
        if (subKey === undefined || subKey === null)
            throw new Error("The parameter 'subKey' must be defined and cannot be null.");
        else
            url_ += "SubKey=" + encodeURIComponent("" + subKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppPodUpdateStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppPodUpdateStatus(<any>response_);
                } catch (e) {
                    return <Observable<AppPodUpdateStatusDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppPodUpdateStatusDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAppPodUpdateStatus(response: HttpResponseBase): Observable<AppPodUpdateStatusDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppPodUpdateStatusDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppPodUpdateStatusDto>(<any>null);
    }

    /**
     * 线下获取安卓pad资源
     * @return Success
     */
    getAndroidPadResource(subkey: string): Observable<AndroidPadResDto> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetAndroidPadResource?";
        if (subkey === undefined || subkey === null)
            throw new Error("The parameter 'subkey' must be defined and cannot be null.");
        else
            url_ += "Subkey=" + encodeURIComponent("" + subkey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAndroidPadResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAndroidPadResource(<any>response_);
                } catch (e) {
                    return <Observable<AndroidPadResDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AndroidPadResDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAndroidPadResource(response: HttpResponseBase): Observable<AndroidPadResDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AndroidPadResDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AndroidPadResDto>(<any>null);
    }

    /**
     * 根据subkey获取设备报表（可以迁移到devicebigdata）
     * @param subkey (optional) 
     * @return Success
     */
    getDeviceReport(subkey: string | null | undefined): Observable<IndustryDeviceReportDto> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetDeviceReport?";
        if (subkey !== undefined && subkey !== null)
            url_ += "subkey=" + encodeURIComponent("" + subkey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceReport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceReport(<any>response_);
                } catch (e) {
                    return <Observable<IndustryDeviceReportDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<IndustryDeviceReportDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceReport(response: HttpResponseBase): Observable<IndustryDeviceReportDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IndustryDeviceReportDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IndustryDeviceReportDto>(<any>null);
    }

    /**
     * 获取相同OuterId设备的描述信息列表
     * @param subKey (optional) 
     * @return Success
     */
    getInfraredDeviceDescriptions(subKey: string | null | undefined): Observable<IntfaDeviceDescriptionWithId[]> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetInfraredDeviceDescriptions?";
        if (subKey !== undefined && subKey !== null)
            url_ += "subKey=" + encodeURIComponent("" + subKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInfraredDeviceDescriptions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInfraredDeviceDescriptions(<any>response_);
                } catch (e) {
                    return <Observable<IntfaDeviceDescriptionWithId[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<IntfaDeviceDescriptionWithId[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetInfraredDeviceDescriptions(response: HttpResponseBase): Observable<IntfaDeviceDescriptionWithId[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(IntfaDeviceDescriptionWithId.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IntfaDeviceDescriptionWithId[]>(<any>null);
    }

    /**
     * 更新OuterId相同设备的描述信息
     * @param body (optional) 
     * @return Success
     */
    updateInfraredDeviceDescriptions(body: UpdateIntfaDeviceDescriptionsInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/UpdateInfraredDeviceDescriptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateInfraredDeviceDescriptions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateInfraredDeviceDescriptions(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateInfraredDeviceDescriptions(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 存储过程减库存
     * @param cargoRoadsId (optional) 
     * @param thingId (optional) 
     * @return Success
     * @deprecated
     */
    updateInventory(cargoRoadsId: number | undefined, thingId: number | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/UpdateInventory?";
        if (cargoRoadsId === null)
            throw new Error("The parameter 'cargoRoadsId' cannot be null.");
        else if (cargoRoadsId !== undefined)
            url_ += "CargoRoadsId=" + encodeURIComponent("" + cargoRoadsId) + "&";
        if (thingId === null)
            throw new Error("The parameter 'thingId' cannot be null.");
        else if (thingId !== undefined)
            url_ += "ThingId=" + encodeURIComponent("" + thingId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateInventory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateInventory(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateInventory(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    /**
     * @param subkey (optional) 
     * @param pointRedeemType (optional) 
     * @param tagNames (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getBrands(subkey: string | null | undefined, pointRedeemType: RedeemType | undefined, tagNames: string[] | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<BrandSdkDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetBrands?";
        if (subkey !== undefined && subkey !== null)
            url_ += "Subkey=" + encodeURIComponent("" + subkey) + "&";
        if (pointRedeemType === null)
            throw new Error("The parameter 'pointRedeemType' cannot be null.");
        else if (pointRedeemType !== undefined)
            url_ += "PointRedeemType=" + encodeURIComponent("" + pointRedeemType) + "&";
        if (tagNames !== undefined && tagNames !== null)
            tagNames && tagNames.forEach(item => { url_ += "TagNames=" + encodeURIComponent("" + item) + "&"; });
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrands(<any>response_);
                } catch (e) {
                    return <Observable<BrandSdkDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BrandSdkDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetBrands(response: HttpResponseBase): Observable<BrandSdkDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandSdkDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BrandSdkDtoPagedResultDto>(<any>null);
    }

    /**
     * @param subkey (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getAllStoreBrandBindings(subkey: string | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<StoreBrandBindingDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetAllStoreBrandBindings?";
        if (subkey !== undefined && subkey !== null)
            url_ += "Subkey=" + encodeURIComponent("" + subkey) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllStoreBrandBindings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllStoreBrandBindings(<any>response_);
                } catch (e) {
                    return <Observable<StoreBrandBindingDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StoreBrandBindingDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllStoreBrandBindings(response: HttpResponseBase): Observable<StoreBrandBindingDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreBrandBindingDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StoreBrandBindingDtoPagedResultDto>(<any>null);
    }

    /**
     * 获取所有的tag
     * @param subkey (optional) 
     * @param pointRedeemType (optional) 
     * @param tagNames (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getTags(subkey: string | null | undefined, pointRedeemType: RedeemType | undefined, tagNames: string[] | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<TagSdkModelPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetTags?";
        if (subkey !== undefined && subkey !== null)
            url_ += "Subkey=" + encodeURIComponent("" + subkey) + "&";
        if (pointRedeemType === null)
            throw new Error("The parameter 'pointRedeemType' cannot be null.");
        else if (pointRedeemType !== undefined)
            url_ += "PointRedeemType=" + encodeURIComponent("" + pointRedeemType) + "&";
        if (tagNames !== undefined && tagNames !== null)
            tagNames && tagNames.forEach(item => { url_ += "TagNames=" + encodeURIComponent("" + item) + "&"; });
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTags(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTags(<any>response_);
                } catch (e) {
                    return <Observable<TagSdkModelPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TagSdkModelPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTags(response: HttpResponseBase): Observable<TagSdkModelPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TagSdkModelPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TagSdkModelPagedResultDto>(<any>null);
    }

    /**
     * 线下升级完成后，需要更新当前机器版本信息
     * @param body (optional) 
     * @return Success
     */
    changeDeviceApppodVersion(body: ChangeDeviceAppPodCurrentVersionInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/ChangeDeviceApppodVersion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeDeviceApppodVersion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeDeviceApppodVersion(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangeDeviceApppodVersion(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取设备下的appPod版本信息
     * @param subkey (optional) 
     * @return Success
     */
    getDeviceAppPodVersion(subkey: string | null | undefined): Observable<DeviceAppPodVersionDto> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetDeviceAppPodVersion?";
        if (subkey !== undefined && subkey !== null)
            url_ += "subkey=" + encodeURIComponent("" + subkey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceAppPodVersion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceAppPodVersion(<any>response_);
                } catch (e) {
                    return <Observable<DeviceAppPodVersionDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceAppPodVersionDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceAppPodVersion(response: HttpResponseBase): Observable<DeviceAppPodVersionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceAppPodVersionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceAppPodVersionDto>(<any>null);
    }

    /**
     * 更新截屏信息
     * @param body (optional) 
     * @return Success
     */
    uploadScreenShot(subKey: string, body: AppPodScreenInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/UploadScreenShot?";
        if (subKey === undefined || subKey === null)
            throw new Error("The parameter 'subKey' must be defined and cannot be null.");
        else
            url_ += "subKey=" + encodeURIComponent("" + subKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadScreenShot(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadScreenShot(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUploadScreenShot(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class StoreServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    version1(): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Store/Version1";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVersion1(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVersion1(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processVersion1(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * 获取当前租户下的所有店Id和它对应的地址
     * @return Success
     */
    getSimpleStorePosition(): Observable<SimpleStorePositionDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetSimpleStorePosition";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSimpleStorePosition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSimpleStorePosition(<any>response_);
                } catch (e) {
                    return <Observable<SimpleStorePositionDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SimpleStorePositionDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetSimpleStorePosition(response: HttpResponseBase): Observable<SimpleStorePositionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SimpleStorePositionDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SimpleStorePositionDto[]>(<any>null);
    }

    /**
     * 批量更新店的经纬度数据
     * @param body (optional) 
     * @return Success
     */
    updatePositionLngAndLat(body: SimpleStorePositionInput[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Store/UpdatePositionLngAndLat";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePositionLngAndLat(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePositionLngAndLat(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdatePositionLngAndLat(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取店铺信息的列表（支持分页）
     * @param body (optional) 
     * @return Success
     */
    getStoresList(body: GetStorseListInput | undefined): Observable<StoresDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetStoresList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStoresList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStoresList(<any>response_);
                } catch (e) {
                    return <Observable<StoresDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StoresDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetStoresList(response: HttpResponseBase): Observable<StoresDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoresDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StoresDtoPagedResultDto>(<any>null);
    }

    /**
     * 店铺信息的Excel
     * @param body (optional) 
     * @return Success
     */
    getStoresToExcel(body: GetStorseListInput | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetStoresToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStoresToExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStoresToExcel(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetStoresToExcel(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * 根据Id获取店铺的详细信息
     * @param storeId (optional) 店铺Id
     * @return Success
     */
    getStoreById(storeId: number | undefined): Observable<StoresDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetStoreById?";
        if (storeId === null)
            throw new Error("The parameter 'storeId' cannot be null.");
        else if (storeId !== undefined)
            url_ += "storeId=" + encodeURIComponent("" + storeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStoreById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStoreById(<any>response_);
                } catch (e) {
                    return <Observable<StoresDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StoresDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetStoreById(response: HttpResponseBase): Observable<StoresDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoresDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StoresDto>(<any>null);
    }

    /**
     * 通过StoreId获取店的具体地址
     * @param storeId (optional) 
     * @return Success
     */
    getStorePositionById(storeId: number | undefined): Observable<PositionDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetStorePositionById?";
        if (storeId === null)
            throw new Error("The parameter 'storeId' cannot be null.");
        else if (storeId !== undefined)
            url_ += "storeId=" + encodeURIComponent("" + storeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStorePositionById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStorePositionById(<any>response_);
                } catch (e) {
                    return <Observable<PositionDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PositionDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetStorePositionById(response: HttpResponseBase): Observable<PositionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PositionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PositionDto>(<any>null);
    }

    /**
     * 通过StoreOuterId获取店的具体地址
     * @param tenantId (optional) 
     * @param storeOuterId (optional) 
     * @return Success
     */
    getStorePositionByOuterId(tenantId: number | undefined, storeOuterId: string | null | undefined): Observable<PositionDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetStorePositionByOuterId?";
        if (tenantId === null)
            throw new Error("The parameter 'tenantId' cannot be null.");
        else if (tenantId !== undefined)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        if (storeOuterId !== undefined && storeOuterId !== null)
            url_ += "storeOuterId=" + encodeURIComponent("" + storeOuterId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStorePositionByOuterId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStorePositionByOuterId(<any>response_);
                } catch (e) {
                    return <Observable<PositionDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PositionDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetStorePositionByOuterId(response: HttpResponseBase): Observable<PositionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PositionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PositionDto>(<any>null);
    }

    /**
     * 获取店铺位置信息的列表（支持分页）
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getStorePosition(filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<StorePositionDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetStorePosition?";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStorePosition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStorePosition(<any>response_);
                } catch (e) {
                    return <Observable<StorePositionDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StorePositionDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetStorePosition(response: HttpResponseBase): Observable<StorePositionDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StorePositionDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StorePositionDtoPagedResultDto>(<any>null);
    }

    /**
     * 获取当前租户下组织架构和店铺关系的树形结构
     * @param ouids (optional) 
     * @param includeOfflineStore (optional) 上下线
     * @return Success
     */
    getCurrentTenantOrganizationUnitsAndStoresTree(ouids: number[] | null | undefined, includeOfflineStore: boolean | undefined): Observable<Int64TreeDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetCurrentTenantOrganizationUnitsAndStoresTree?";
        if (ouids !== undefined && ouids !== null)
            ouids && ouids.forEach(item => { url_ += "ouids=" + encodeURIComponent("" + item) + "&"; });
        if (includeOfflineStore === null)
            throw new Error("The parameter 'includeOfflineStore' cannot be null.");
        else if (includeOfflineStore !== undefined)
            url_ += "includeOfflineStore=" + encodeURIComponent("" + includeOfflineStore) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentTenantOrganizationUnitsAndStoresTree(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentTenantOrganizationUnitsAndStoresTree(<any>response_);
                } catch (e) {
                    return <Observable<Int64TreeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<Int64TreeDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentTenantOrganizationUnitsAndStoresTree(response: HttpResponseBase): Observable<Int64TreeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Int64TreeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Int64TreeDto>(<any>null);
    }

    /**
     * 获取当前登录得租户下得组织架构和店铺得Tree
     * @return Success
     */
    getCurrentTenantSimpleOrganizationUnitsAndStoresTree(): Observable<Int64TreeDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetCurrentTenantSimpleOrganizationUnitsAndStoresTree";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentTenantSimpleOrganizationUnitsAndStoresTree(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentTenantSimpleOrganizationUnitsAndStoresTree(<any>response_);
                } catch (e) {
                    return <Observable<Int64TreeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<Int64TreeDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentTenantSimpleOrganizationUnitsAndStoresTree(response: HttpResponseBase): Observable<Int64TreeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Int64TreeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Int64TreeDto>(<any>null);
    }

    /**
     * 新增店铺
     * @param body (optional) 
     * @return Success
     */
    createStore(body: CreateStoreInput | undefined): Observable<StoresDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/CreateStore";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateStore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateStore(<any>response_);
                } catch (e) {
                    return <Observable<StoresDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StoresDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateStore(response: HttpResponseBase): Observable<StoresDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoresDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StoresDto>(<any>null);
    }

    /**
     * 编辑店铺信息
     * @param body (optional) 
     * @return Success
     */
    updateStore(body: UpdateStoreInput | undefined): Observable<StoresDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/UpdateStore";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateStore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateStore(<any>response_);
                } catch (e) {
                    return <Observable<StoresDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StoresDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateStore(response: HttpResponseBase): Observable<StoresDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoresDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StoresDto>(<any>null);
    }

    /**
     * 删除店铺
     * @param id (optional) 单个删除店铺ID
     * @return Success
     */
    deleteStore(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Store/DeleteStore?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteStore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteStore(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteStore(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 批量删除店铺
     * @param ids (optional) 多个选中的店铺ID
     * @return Success
     */
    deleteStores(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Store/DeleteStores?";
        if (ids !== undefined && ids !== null)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteStores(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteStores(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteStores(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 根据传入的组织架构的ID获取店铺信息
     * @param ouId (optional) 
     * @return Success
     */
    getStoresByOrganizationUnitId(ouId: number | undefined): Observable<Store[]> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetStoresByOrganizationUnitId?";
        if (ouId === null)
            throw new Error("The parameter 'ouId' cannot be null.");
        else if (ouId !== undefined)
            url_ += "ouId=" + encodeURIComponent("" + ouId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStoresByOrganizationUnitId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStoresByOrganizationUnitId(<any>response_);
                } catch (e) {
                    return <Observable<Store[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Store[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetStoresByOrganizationUnitId(response: HttpResponseBase): Observable<Store[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Store.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Store[]>(<any>null);
    }

    /**
     * 店铺发布至组织架构（绑定）
     * @param body (optional) 
     * @return Success
     */
    publishStoreToOrganization(body: PublishStoresInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Store/PublishStoreToOrganization";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPublishStoreToOrganization(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPublishStoreToOrganization(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPublishStoreToOrganization(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 将所有的店铺发送至组织架构下（登陆的租户）
     * @param body (optional) 
     * @return Success
     */
    publishAllStoreToOrganization(body: PublishStoresInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Store/PublishAllStoreToOrganization";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPublishAllStoreToOrganization(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPublishAllStoreToOrganization(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPublishAllStoreToOrganization(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取店铺下设备信息的公共字段列表
     * @return Success
     * @deprecated
     */
    getStoreDevicesInfomation(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetStoreDevicesInfomation";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStoreDevicesInfomation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStoreDevicesInfomation(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetStoreDevicesInfomation(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }

    /**
     * 店铺审核（上下线）
     * @param body (optional) 
     * @return Success
     */
    auditStore(body: StoreAuditInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Store/AuditStore";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuditStore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuditStore(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAuditStore(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 新建店铺额外信息
     * @param body (optional) 
     * @return Success
     */
    createStoreExtra(body: CreateStoreExtraInput | undefined): Observable<StoreExtraDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/CreateStoreExtra";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateStoreExtra(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateStoreExtra(<any>response_);
                } catch (e) {
                    return <Observable<StoreExtraDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StoreExtraDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateStoreExtra(response: HttpResponseBase): Observable<StoreExtraDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreExtraDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StoreExtraDto>(<any>null);
    }

    /**
     * 更新店铺额外信息
     * @param body (optional) 
     * @return Success
     */
    updateStoreExtra(body: UpdateStoreExtraInput | undefined): Observable<StoreExtraDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/UpdateStoreExtra";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateStoreExtra(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateStoreExtra(<any>response_);
                } catch (e) {
                    return <Observable<StoreExtraDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StoreExtraDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateStoreExtra(response: HttpResponseBase): Observable<StoreExtraDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreExtraDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StoreExtraDto>(<any>null);
    }

    /**
     * 删除店铺额外信息
     * @param id (optional) 
     * @return Success
     */
    deleteStoreExtra(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Store/DeleteStoreExtra?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteStoreExtra(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteStoreExtra(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteStoreExtra(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取店铺额外信息列表（分页）
     * @param externalEnum (optional) 
     * @param storeId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getStoreExtras(externalEnum: ExternalEnum | undefined, storeId: number | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<StoreExtraDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetStoreExtras?";
        if (externalEnum === null)
            throw new Error("The parameter 'externalEnum' cannot be null.");
        else if (externalEnum !== undefined)
            url_ += "ExternalEnum=" + encodeURIComponent("" + externalEnum) + "&";
        if (storeId !== undefined && storeId !== null)
            url_ += "StoreId=" + encodeURIComponent("" + storeId) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStoreExtras(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStoreExtras(<any>response_);
                } catch (e) {
                    return <Observable<StoreExtraDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StoreExtraDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetStoreExtras(response: HttpResponseBase): Observable<StoreExtraDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreExtraDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StoreExtraDtoPagedResultDto>(<any>null);
    }

    /**
     * 获取店铺KPI（支持分页）
     * @param storeId (optional) 
     * @param scaleTimeStart (optional) 
     * @param scaleTimeEnd (optional) 
     * @param kPIScale (optional) 
     * @param name (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getStoreKPIs(storeId: number | undefined, scaleTimeStart: moment.Moment | null | undefined, scaleTimeEnd: moment.Moment | null | undefined, kPIScale: GroupKPIScaleEnum | undefined, name: string | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<StoreKPIDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetStoreKPIs?";
        if (storeId === null)
            throw new Error("The parameter 'storeId' cannot be null.");
        else if (storeId !== undefined)
            url_ += "StoreId=" + encodeURIComponent("" + storeId) + "&";
        if (scaleTimeStart !== undefined && scaleTimeStart !== null)
            url_ += "ScaleTimeStart=" + encodeURIComponent(scaleTimeStart ? "" + scaleTimeStart.toJSON() : "") + "&";
        if (scaleTimeEnd !== undefined && scaleTimeEnd !== null)
            url_ += "ScaleTimeEnd=" + encodeURIComponent(scaleTimeEnd ? "" + scaleTimeEnd.toJSON() : "") + "&";
        if (kPIScale === null)
            throw new Error("The parameter 'kPIScale' cannot be null.");
        else if (kPIScale !== undefined)
            url_ += "KPIScale=" + encodeURIComponent("" + kPIScale) + "&";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStoreKPIs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStoreKPIs(<any>response_);
                } catch (e) {
                    return <Observable<StoreKPIDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StoreKPIDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetStoreKPIs(response: HttpResponseBase): Observable<StoreKPIDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreKPIDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StoreKPIDtoPagedResultDto>(<any>null);
    }

    /**
     * 创建店铺KPI
     * @param body (optional) 
     * @return Success
     */
    createStoreKPI(body: CreateStoreKpiDtoInput | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Store/CreateStoreKPI";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateStoreKPI(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateStoreKPI(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreateStoreKPI(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * 更新店铺的KPI信息
     * @param body (optional) 
     * @return Success
     */
    updateStoreKPI(body: UpdateStoreKpiDtoInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Store/UpdateStoreKPI";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateStoreKPI(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateStoreKPI(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateStoreKPI(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除店铺KPI（单个）
     * @param id (optional) 
     * @return Success
     */
    deleteSingleGroupKPI(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Store/DeleteSingleGroupKPI?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteSingleGroupKPI(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteSingleGroupKPI(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteSingleGroupKPI(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 批量删除店铺KPI
     * @param ids (optional) 
     * @return Success
     */
    deleteGroupKPIs(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Store/DeleteGroupKPIs?";
        if (ids !== undefined && ids !== null)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteGroupKPIs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteGroupKPIs(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteGroupKPIs(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 根据传入的店铺ID获取登录租户下的店铺KPI。（没传取租户下所有店铺KPI）
     * @param storeId (optional) 
     * @return Success
     */
    getKpiNames(storeId: number | null | undefined): Observable<string[]> {
        let url_ = this.baseUrl + "/api/services/app/Store/GetKpiNames?";
        if (storeId !== undefined && storeId !== null)
            url_ += "storeId=" + encodeURIComponent("" + storeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetKpiNames(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetKpiNames(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetKpiNames(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }
}

@Injectable()
export class TagServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_DEVICECENTER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取标签的列表，支持分页（无筛选条件）
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getTags(filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<TagDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Tag/GetTags?";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTags(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTags(<any>response_);
                } catch (e) {
                    return <Observable<TagDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TagDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTags(response: HttpResponseBase): Observable<TagDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TagDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TagDtoPagedResultDto>(<any>null);
    }

    /**
     * 导出设备、品牌、店铺下的标签的Excel
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getTagsToExcel(filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Tag/GetTagsToExcel?";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTagsToExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTagsToExcel(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetTagsToExcel(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * 根据类型获取设备、品牌、店铺的标签
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @param type (optional) 
     * @return Success
     */
    getTagsByType(filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined, type: TagType | undefined): Observable<TagDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Tag/GetTagsByType?";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTagsByType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTagsByType(<any>response_);
                } catch (e) {
                    return <Observable<TagDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TagDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTagsByType(response: HttpResponseBase): Observable<TagDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TagDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TagDtoPagedResultDto>(<any>null);
    }

    /**
     * 新建设备、品牌、店铺标签
     * @param body (optional) 
     * @return Success
     */
    createTag(body: CreateTagInput | undefined): Observable<TagDto> {
        let url_ = this.baseUrl + "/api/services/app/Tag/CreateTag";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateTag(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateTag(<any>response_);
                } catch (e) {
                    return <Observable<TagDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TagDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateTag(response: HttpResponseBase): Observable<TagDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TagDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TagDto>(<any>null);
    }

    /**
     * 修改设备、品牌、店铺的标签
     * @param body (optional) 
     * @return Success
     */
    updateTag(body: UpdateTagInput | undefined): Observable<TagDto> {
        let url_ = this.baseUrl + "/api/services/app/Tag/UpdateTag";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTag(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTag(<any>response_);
                } catch (e) {
                    return <Observable<TagDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TagDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTag(response: HttpResponseBase): Observable<TagDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TagDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TagDto>(<any>null);
    }

    /**
     * 删除设备、品牌、店铺的标签
     * @param id (optional) 
     * @return Success
     */
    deleteTag(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tag/DeleteTag?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteTag(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTag(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteTag(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 查看前N个Tag（N为传入得参数,可能用于下拉列表）
     * @param count (optional) 
     * @return Success
     */
    tagTopForSelect(count: number | undefined): Observable<IdNameDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Tag/TagTopForSelect?";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTagTopForSelect(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTagTopForSelect(<any>response_);
                } catch (e) {
                    return <Observable<IdNameDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<IdNameDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processTagTopForSelect(response: HttpResponseBase): Observable<IdNameDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(IdNameDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IdNameDto[]>(<any>null);
    }
}

export class ApplyFormDto implements IApplyFormDto {
    reason!: string | undefined;
    applyStatus!: string | undefined;
    applyType!: string | undefined;
    wanted!: string | undefined;
    resultMessage!: string | undefined;
    applyUserName!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IApplyFormDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reason = _data["reason"];
            this.applyStatus = _data["applyStatus"];
            this.applyType = _data["applyType"];
            this.wanted = _data["wanted"];
            this.resultMessage = _data["resultMessage"];
            this.applyUserName = _data["applyUserName"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ApplyFormDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplyFormDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reason"] = this.reason;
        data["applyStatus"] = this.applyStatus;
        data["applyType"] = this.applyType;
        data["wanted"] = this.wanted;
        data["resultMessage"] = this.resultMessage;
        data["applyUserName"] = this.applyUserName;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IApplyFormDto {
    reason: string | undefined;
    applyStatus: string | undefined;
    applyType: string | undefined;
    wanted: string | undefined;
    resultMessage: string | undefined;
    applyUserName: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class ApplyFormDtoPagedResultDto implements IApplyFormDtoPagedResultDto {
    totalCount!: number;
    items!: ApplyFormDto[] | undefined;

    constructor(data?: IApplyFormDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ApplyFormDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApplyFormDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplyFormDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IApplyFormDtoPagedResultDto {
    totalCount: number;
    items: ApplyFormDto[] | undefined;
}

export enum ApplyFormType {
    Product = 0,
    Ads = 1,
    App = 2,
    Device = 3,
    Sku = 4,
    Coupon = 5,
    Brand = 6,
    UXPage = 7,
}

export enum ApplyWanted {
    Online = 0,
    Offline = 1,
}

export class CreateApplyFormInput implements ICreateApplyFormInput {
    reason!: string | undefined;
    applyType!: ApplyFormType;
    wanted!: ApplyWanted;
    itemids!: number[] | undefined;
    options!: string | undefined;

    constructor(data?: ICreateApplyFormInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reason = _data["reason"];
            this.applyType = _data["applyType"];
            this.wanted = _data["wanted"];
            if (Array.isArray(_data["itemids"])) {
                this.itemids = [] as any;
                for (let item of _data["itemids"])
                    this.itemids!.push(item);
            }
            this.options = _data["options"];
        }
    }

    static fromJS(data: any): CreateApplyFormInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateApplyFormInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reason"] = this.reason;
        data["applyType"] = this.applyType;
        data["wanted"] = this.wanted;
        if (Array.isArray(this.itemids)) {
            data["itemids"] = [];
            for (let item of this.itemids)
                data["itemids"].push(item);
        }
        data["options"] = this.options;
        return data; 
    }
}

export interface ICreateApplyFormInput {
    reason: string | undefined;
    applyType: ApplyFormType;
    wanted: ApplyWanted;
    itemids: number[] | undefined;
    options: string | undefined;
}

export enum ApplyStatus {
    Applied = 0,
    Cancel = 1,
    Accepted = 2,
    Rejected = 3,
}

export class AuditApplyFormInput implements IAuditApplyFormInput {
    applyFormId!: number;
    applyStatus!: ApplyStatus;
    resultMessage!: string | undefined;

    constructor(data?: IAuditApplyFormInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applyFormId = _data["applyFormId"];
            this.applyStatus = _data["applyStatus"];
            this.resultMessage = _data["resultMessage"];
        }
    }

    static fromJS(data: any): AuditApplyFormInput {
        data = typeof data === 'object' ? data : {};
        let result = new AuditApplyFormInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applyFormId"] = this.applyFormId;
        data["applyStatus"] = this.applyStatus;
        data["resultMessage"] = this.resultMessage;
        return data; 
    }
}

export interface IAuditApplyFormInput {
    applyFormId: number;
    applyStatus: ApplyStatus;
    resultMessage: string | undefined;
}

export class IdNamePicDto implements IIdNamePicDto {
    id!: number;
    name!: string | undefined;
    picUrl!: string | undefined;

    constructor(data?: IIdNamePicDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.picUrl = _data["picUrl"];
        }
    }

    static fromJS(data: any): IdNamePicDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdNamePicDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["picUrl"] = this.picUrl;
        return data; 
    }
}

export interface IIdNamePicDto {
    id: number;
    name: string | undefined;
    picUrl: string | undefined;
}

export class IdNamePicDtoPagedResultDto implements IIdNamePicDtoPagedResultDto {
    totalCount!: number;
    items!: IdNamePicDto[] | undefined;

    constructor(data?: IIdNamePicDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(IdNamePicDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IdNamePicDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdNamePicDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIdNamePicDtoPagedResultDto {
    totalCount: number;
    items: IdNamePicDto[] | undefined;
}

export enum AuditStatus {
    Offline = 0,
    Online = 1,
}

export enum OperatingType {
    Official = 0,
    Test = 1,
}

export enum BussinessType {
    SelfBuyFromOthers = 0,
    SelfBuyFromTronCell = 1,
    RentFromOthers = 2,
    RentFromTronCell = 3,
}

export class DeviceTypeDto implements IDeviceTypeDto {
    name!: string | undefined;
    iconUrl!: string | undefined;
    isDefault!: boolean;
    abilities!: string | undefined;
    controlItems!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IDeviceTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.iconUrl = _data["iconUrl"];
            this.isDefault = _data["isDefault"];
            this.abilities = _data["abilities"];
            this.controlItems = _data["controlItems"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeviceTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["iconUrl"] = this.iconUrl;
        data["isDefault"] = this.isDefault;
        data["abilities"] = this.abilities;
        data["controlItems"] = this.controlItems;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IDeviceTypeDto {
    name: string | undefined;
    iconUrl: string | undefined;
    isDefault: boolean;
    abilities: string | undefined;
    controlItems: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class PeripheralDto implements IPeripheralDto {
    /** 外设的名称 */
    name!: string | undefined;
    /** 外设的小图标 */
    iconUrl!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IPeripheralDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.iconUrl = _data["iconUrl"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PeripheralDto {
        data = typeof data === 'object' ? data : {};
        let result = new PeripheralDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["iconUrl"] = this.iconUrl;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IPeripheralDto {
    /** 外设的名称 */
    name: string | undefined;
    /** 外设的小图标 */
    iconUrl: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class DevicePeripheralDto implements IDevicePeripheralDto {
    peripheralId!: number;
    peripheral!: PeripheralDto;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IDevicePeripheralDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.peripheralId = _data["peripheralId"];
            this.peripheral = _data["peripheral"] ? PeripheralDto.fromJS(_data["peripheral"]) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DevicePeripheralDto {
        data = typeof data === 'object' ? data : {};
        let result = new DevicePeripheralDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["peripheralId"] = this.peripheralId;
        data["peripheral"] = this.peripheral ? this.peripheral.toJSON() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IDevicePeripheralDto {
    peripheralId: number;
    peripheral: PeripheralDto;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export enum ExternalEnum {
    Platform = 0,
    Taobao = 1,
    Oracle = 2,
    JD = 3,
    BaiSheng = 4,
    Shangpai = 5,
    Weimob = 6,
}

export enum OsTypeEnum {
    Windows = 0,
    Android = 1,
    IOS = 2,
    Linux = 3,
    MacOS = 4,
}

export class DeviceDto implements IDeviceDto {
    name!: string | undefined;
    auditStatus!: AuditStatus;
    tenantId!: number;
    organizationUnitId!: number | undefined;
    /** 设备绑定StoreId */
    storeId!: number | undefined;
    storeName!: string | undefined;
    organizationUnitName!: string | undefined;
    orderNumber!: number;
    imageUrl!: string | undefined;
    intranetIP!: string | undefined;
    internetIP!: string | undefined;
    description!: string | undefined;
    mac!: string | undefined;
    coverArea!: number | undefined;
    licenseInfo!: string | undefined;
    hardwareCode!: string | undefined;
    resolution_Width!: number | undefined;
    resolution_Height!: number | undefined;
    os!: string | undefined;
    address!: string | undefined;
    /** 最后设备心跳时间. */
    heartBeatTime!: moment.Moment | undefined;
    /** 一天中，设备正常开机时间. */
    startTime!: moment.Moment | undefined;
    /** 一天中，设备正常关机时间. */
    shutdownTime!: moment.Moment | undefined;
    /** 设备是否已被注册，如果已注册，另外的机器不能再注册. 同时管理员可以清空，允许其它设备进行注册. */
    isRegistered!: boolean;
    /** 屏幕最新截图 */
    snapshotUrl!: string | undefined;
    /** 截屏的时间 */
    snapshotTime!: moment.Moment | undefined;
    captureImageUrl!: string | undefined;
    captureImageTime!: moment.Moment | undefined;
    errorStartTime!: moment.Moment | undefined;
    /** 设备过期时间,时间过期后,不能再使用，包括其中的软件. */
    expiredTime!: moment.Moment | undefined;
    /** 是否在锁定状态 */
    isLocked!: boolean;
    operatingType!: OperatingType;
    bussinessType!: BussinessType;
    /** 机器开始使用的时间，方便运维人员判断售后维护情况. */
    startedUsedTime!: moment.Moment | undefined;
    /** 热力图 */
    heatImageUrl!: string | undefined;
    /** 设备的一些其它相关信息，可记录其中. */
    comments!: string | undefined;
    deviceTypeId!: number | undefined;
    deviceType!: DeviceTypeDto;
    peripherals!: DevicePeripheralDto[] | undefined;
    /** 访问此设备的唯一凭证，通过Subkey可调用平台api，拿到设备相关的信息，如,ads,apps,products等.同时可用户注册. */
    subKey!: string | undefined;
    /** 设备默认销售那个电商的商品. */
    onlineTrafficTarget!: string | undefined;
    /** 商家设备自定义编号 */
    outerId!: string | undefined;
    platformType!: ExternalEnum;
    extraDeviceId!: string | undefined;
    status!: number;
    taobaoRegistTime!: moment.Moment | undefined;
    registerSource!: string | undefined;
    osType!: OsTypeEnum;
    latestResourceUpdateTime!: moment.Moment | undefined;
    isSupportAccessToChildDevices!: boolean | undefined;
    isSupportRemoteControl!: boolean | undefined;
    abilities!: string | undefined;
    creationTime!: moment.Moment | undefined;
    id!: number;

    constructor(data?: IDeviceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.auditStatus = _data["auditStatus"];
            this.tenantId = _data["tenantId"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.storeId = _data["storeId"];
            this.storeName = _data["storeName"];
            this.organizationUnitName = _data["organizationUnitName"];
            this.orderNumber = _data["orderNumber"];
            this.imageUrl = _data["imageUrl"];
            this.intranetIP = _data["intranetIP"];
            this.internetIP = _data["internetIP"];
            this.description = _data["description"];
            this.mac = _data["mac"];
            this.coverArea = _data["coverArea"];
            this.licenseInfo = _data["licenseInfo"];
            this.hardwareCode = _data["hardwareCode"];
            this.resolution_Width = _data["resolution_Width"];
            this.resolution_Height = _data["resolution_Height"];
            this.os = _data["os"];
            this.address = _data["address"];
            this.heartBeatTime = _data["heartBeatTime"] ? moment(_data["heartBeatTime"].toString()) : <any>undefined;
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.shutdownTime = _data["shutdownTime"] ? moment(_data["shutdownTime"].toString()) : <any>undefined;
            this.isRegistered = _data["isRegistered"];
            this.snapshotUrl = _data["snapshotUrl"];
            this.snapshotTime = _data["snapshotTime"] ? moment(_data["snapshotTime"].toString()) : <any>undefined;
            this.captureImageUrl = _data["captureImageUrl"];
            this.captureImageTime = _data["captureImageTime"] ? moment(_data["captureImageTime"].toString()) : <any>undefined;
            this.errorStartTime = _data["errorStartTime"] ? moment(_data["errorStartTime"].toString()) : <any>undefined;
            this.expiredTime = _data["expiredTime"] ? moment(_data["expiredTime"].toString()) : <any>undefined;
            this.isLocked = _data["isLocked"];
            this.operatingType = _data["operatingType"];
            this.bussinessType = _data["bussinessType"];
            this.startedUsedTime = _data["startedUsedTime"] ? moment(_data["startedUsedTime"].toString()) : <any>undefined;
            this.heatImageUrl = _data["heatImageUrl"];
            this.comments = _data["comments"];
            this.deviceTypeId = _data["deviceTypeId"];
            this.deviceType = _data["deviceType"] ? DeviceTypeDto.fromJS(_data["deviceType"]) : <any>undefined;
            if (Array.isArray(_data["peripherals"])) {
                this.peripherals = [] as any;
                for (let item of _data["peripherals"])
                    this.peripherals!.push(DevicePeripheralDto.fromJS(item));
            }
            this.subKey = _data["subKey"];
            this.onlineTrafficTarget = _data["onlineTrafficTarget"];
            this.outerId = _data["outerId"];
            this.platformType = _data["platformType"];
            this.extraDeviceId = _data["extraDeviceId"];
            this.status = _data["status"];
            this.taobaoRegistTime = _data["taobaoRegistTime"] ? moment(_data["taobaoRegistTime"].toString()) : <any>undefined;
            this.registerSource = _data["registerSource"];
            this.osType = _data["osType"];
            this.latestResourceUpdateTime = _data["latestResourceUpdateTime"] ? moment(_data["latestResourceUpdateTime"].toString()) : <any>undefined;
            this.isSupportAccessToChildDevices = _data["isSupportAccessToChildDevices"];
            this.isSupportRemoteControl = _data["isSupportRemoteControl"];
            this.abilities = _data["abilities"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeviceDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["auditStatus"] = this.auditStatus;
        data["tenantId"] = this.tenantId;
        data["organizationUnitId"] = this.organizationUnitId;
        data["storeId"] = this.storeId;
        data["storeName"] = this.storeName;
        data["organizationUnitName"] = this.organizationUnitName;
        data["orderNumber"] = this.orderNumber;
        data["imageUrl"] = this.imageUrl;
        data["intranetIP"] = this.intranetIP;
        data["internetIP"] = this.internetIP;
        data["description"] = this.description;
        data["mac"] = this.mac;
        data["coverArea"] = this.coverArea;
        data["licenseInfo"] = this.licenseInfo;
        data["hardwareCode"] = this.hardwareCode;
        data["resolution_Width"] = this.resolution_Width;
        data["resolution_Height"] = this.resolution_Height;
        data["os"] = this.os;
        data["address"] = this.address;
        data["heartBeatTime"] = this.heartBeatTime ? this.heartBeatTime.toISOString() : <any>undefined;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["shutdownTime"] = this.shutdownTime ? this.shutdownTime.toISOString() : <any>undefined;
        data["isRegistered"] = this.isRegistered;
        data["snapshotUrl"] = this.snapshotUrl;
        data["snapshotTime"] = this.snapshotTime ? this.snapshotTime.toISOString() : <any>undefined;
        data["captureImageUrl"] = this.captureImageUrl;
        data["captureImageTime"] = this.captureImageTime ? this.captureImageTime.toISOString() : <any>undefined;
        data["errorStartTime"] = this.errorStartTime ? this.errorStartTime.toISOString() : <any>undefined;
        data["expiredTime"] = this.expiredTime ? this.expiredTime.toISOString() : <any>undefined;
        data["isLocked"] = this.isLocked;
        data["operatingType"] = this.operatingType;
        data["bussinessType"] = this.bussinessType;
        data["startedUsedTime"] = this.startedUsedTime ? this.startedUsedTime.toISOString() : <any>undefined;
        data["heatImageUrl"] = this.heatImageUrl;
        data["comments"] = this.comments;
        data["deviceTypeId"] = this.deviceTypeId;
        data["deviceType"] = this.deviceType ? this.deviceType.toJSON() : <any>undefined;
        if (Array.isArray(this.peripherals)) {
            data["peripherals"] = [];
            for (let item of this.peripherals)
                data["peripherals"].push(item.toJSON());
        }
        data["subKey"] = this.subKey;
        data["onlineTrafficTarget"] = this.onlineTrafficTarget;
        data["outerId"] = this.outerId;
        data["platformType"] = this.platformType;
        data["extraDeviceId"] = this.extraDeviceId;
        data["status"] = this.status;
        data["taobaoRegistTime"] = this.taobaoRegistTime ? this.taobaoRegistTime.toISOString() : <any>undefined;
        data["registerSource"] = this.registerSource;
        data["osType"] = this.osType;
        data["latestResourceUpdateTime"] = this.latestResourceUpdateTime ? this.latestResourceUpdateTime.toISOString() : <any>undefined;
        data["isSupportAccessToChildDevices"] = this.isSupportAccessToChildDevices;
        data["isSupportRemoteControl"] = this.isSupportRemoteControl;
        data["abilities"] = this.abilities;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IDeviceDto {
    name: string | undefined;
    auditStatus: AuditStatus;
    tenantId: number;
    organizationUnitId: number | undefined;
    /** 设备绑定StoreId */
    storeId: number | undefined;
    storeName: string | undefined;
    organizationUnitName: string | undefined;
    orderNumber: number;
    imageUrl: string | undefined;
    intranetIP: string | undefined;
    internetIP: string | undefined;
    description: string | undefined;
    mac: string | undefined;
    coverArea: number | undefined;
    licenseInfo: string | undefined;
    hardwareCode: string | undefined;
    resolution_Width: number | undefined;
    resolution_Height: number | undefined;
    os: string | undefined;
    address: string | undefined;
    /** 最后设备心跳时间. */
    heartBeatTime: moment.Moment | undefined;
    /** 一天中，设备正常开机时间. */
    startTime: moment.Moment | undefined;
    /** 一天中，设备正常关机时间. */
    shutdownTime: moment.Moment | undefined;
    /** 设备是否已被注册，如果已注册，另外的机器不能再注册. 同时管理员可以清空，允许其它设备进行注册. */
    isRegistered: boolean;
    /** 屏幕最新截图 */
    snapshotUrl: string | undefined;
    /** 截屏的时间 */
    snapshotTime: moment.Moment | undefined;
    captureImageUrl: string | undefined;
    captureImageTime: moment.Moment | undefined;
    errorStartTime: moment.Moment | undefined;
    /** 设备过期时间,时间过期后,不能再使用，包括其中的软件. */
    expiredTime: moment.Moment | undefined;
    /** 是否在锁定状态 */
    isLocked: boolean;
    operatingType: OperatingType;
    bussinessType: BussinessType;
    /** 机器开始使用的时间，方便运维人员判断售后维护情况. */
    startedUsedTime: moment.Moment | undefined;
    /** 热力图 */
    heatImageUrl: string | undefined;
    /** 设备的一些其它相关信息，可记录其中. */
    comments: string | undefined;
    deviceTypeId: number | undefined;
    deviceType: DeviceTypeDto;
    peripherals: DevicePeripheralDto[] | undefined;
    /** 访问此设备的唯一凭证，通过Subkey可调用平台api，拿到设备相关的信息，如,ads,apps,products等.同时可用户注册. */
    subKey: string | undefined;
    /** 设备默认销售那个电商的商品. */
    onlineTrafficTarget: string | undefined;
    /** 商家设备自定义编号 */
    outerId: string | undefined;
    platformType: ExternalEnum;
    extraDeviceId: string | undefined;
    status: number;
    taobaoRegistTime: moment.Moment | undefined;
    registerSource: string | undefined;
    osType: OsTypeEnum;
    latestResourceUpdateTime: moment.Moment | undefined;
    isSupportAccessToChildDevices: boolean | undefined;
    isSupportRemoteControl: boolean | undefined;
    abilities: string | undefined;
    creationTime: moment.Moment | undefined;
    id: number;
}

export class DeviceDtoPagedResultDto implements IDeviceDtoPagedResultDto {
    totalCount!: number;
    items!: DeviceDto[] | undefined;

    constructor(data?: IDeviceDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DeviceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeviceDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDeviceDtoPagedResultDto {
    totalCount: number;
    items: DeviceDto[] | undefined;
}

export class AppPodDto implements IAppPodDto {
    id!: number;
    name!: string | undefined;
    icon!: string | undefined;
    os!: string | undefined;
    isDefault!: boolean;
    latestVersion!: string | undefined;
    downloadUrl!: string | undefined;
    latestDatetime!: moment.Moment;

    constructor(data?: IAppPodDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.icon = _data["icon"];
            this.os = _data["os"];
            this.isDefault = _data["isDefault"];
            this.latestVersion = _data["latestVersion"];
            this.downloadUrl = _data["downloadUrl"];
            this.latestDatetime = _data["latestDatetime"] ? moment(_data["latestDatetime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AppPodDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppPodDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["os"] = this.os;
        data["isDefault"] = this.isDefault;
        data["latestVersion"] = this.latestVersion;
        data["downloadUrl"] = this.downloadUrl;
        data["latestDatetime"] = this.latestDatetime ? this.latestDatetime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IAppPodDto {
    id: number;
    name: string | undefined;
    icon: string | undefined;
    os: string | undefined;
    isDefault: boolean;
    latestVersion: string | undefined;
    downloadUrl: string | undefined;
    latestDatetime: moment.Moment;
}

export class AppPodDtoPagedResultDto implements IAppPodDtoPagedResultDto {
    totalCount!: number;
    items!: AppPodDto[] | undefined;

    constructor(data?: IAppPodDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AppPodDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AppPodDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppPodDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAppPodDtoPagedResultDto {
    totalCount: number;
    items: AppPodDto[] | undefined;
}

export class AppPodVersionDto implements IAppPodVersionDto {
    version!: string | undefined;
    downloadUrl!: string | undefined;
    appSetting!: string | undefined;
    description!: string | undefined;
    appPodName!: string | undefined;
    os!: string | undefined;
    md5!: string | undefined;
    isNeedRestart!: boolean;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IAppPodVersionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.downloadUrl = _data["downloadUrl"];
            this.appSetting = _data["appSetting"];
            this.description = _data["description"];
            this.appPodName = _data["appPodName"];
            this.os = _data["os"];
            this.md5 = _data["md5"];
            this.isNeedRestart = _data["isNeedRestart"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): AppPodVersionDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppPodVersionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["downloadUrl"] = this.downloadUrl;
        data["appSetting"] = this.appSetting;
        data["description"] = this.description;
        data["appPodName"] = this.appPodName;
        data["os"] = this.os;
        data["md5"] = this.md5;
        data["isNeedRestart"] = this.isNeedRestart;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IAppPodVersionDto {
    version: string | undefined;
    downloadUrl: string | undefined;
    appSetting: string | undefined;
    description: string | undefined;
    appPodName: string | undefined;
    os: string | undefined;
    md5: string | undefined;
    isNeedRestart: boolean;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class AppPodVersionDtoPagedResultDto implements IAppPodVersionDtoPagedResultDto {
    totalCount!: number;
    items!: AppPodVersionDto[] | undefined;

    constructor(data?: IAppPodVersionDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AppPodVersionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AppPodVersionDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppPodVersionDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAppPodVersionDtoPagedResultDto {
    totalCount: number;
    items: AppPodVersionDto[] | undefined;
}

export class CreateAppPodVersionInput implements ICreateAppPodVersionInput {
    appPodId!: number;
    version!: string;
    description!: string | undefined;
    downloadUrl!: string;
    appSetting!: string | undefined;
    md5!: string | undefined;
    isNeedRestart!: boolean;

    constructor(data?: ICreateAppPodVersionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appPodId = _data["appPodId"];
            this.version = _data["version"];
            this.description = _data["description"];
            this.downloadUrl = _data["downloadUrl"];
            this.appSetting = _data["appSetting"];
            this.md5 = _data["md5"];
            this.isNeedRestart = _data["isNeedRestart"];
        }
    }

    static fromJS(data: any): CreateAppPodVersionInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAppPodVersionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appPodId"] = this.appPodId;
        data["version"] = this.version;
        data["description"] = this.description;
        data["downloadUrl"] = this.downloadUrl;
        data["appSetting"] = this.appSetting;
        data["md5"] = this.md5;
        data["isNeedRestart"] = this.isNeedRestart;
        return data; 
    }
}

export interface ICreateAppPodVersionInput {
    appPodId: number;
    version: string;
    description: string | undefined;
    downloadUrl: string;
    appSetting: string | undefined;
    md5: string | undefined;
    isNeedRestart: boolean;
}

export class UpdateAppPodVersionInput implements IUpdateAppPodVersionInput {
    id!: number;
    appPodId!: number;
    version!: string;
    description!: string | undefined;
    downloadUrl!: string;
    appSetting!: string | undefined;
    md5!: string | undefined;
    isNeedRestart!: boolean;

    constructor(data?: IUpdateAppPodVersionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.appPodId = _data["appPodId"];
            this.version = _data["version"];
            this.description = _data["description"];
            this.downloadUrl = _data["downloadUrl"];
            this.appSetting = _data["appSetting"];
            this.md5 = _data["md5"];
            this.isNeedRestart = _data["isNeedRestart"];
        }
    }

    static fromJS(data: any): UpdateAppPodVersionInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAppPodVersionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["appPodId"] = this.appPodId;
        data["version"] = this.version;
        data["description"] = this.description;
        data["downloadUrl"] = this.downloadUrl;
        data["appSetting"] = this.appSetting;
        data["md5"] = this.md5;
        data["isNeedRestart"] = this.isNeedRestart;
        return data; 
    }
}

export interface IUpdateAppPodVersionInput {
    id: number;
    appPodId: number;
    version: string;
    description: string | undefined;
    downloadUrl: string;
    appSetting: string | undefined;
    md5: string | undefined;
    isNeedRestart: boolean;
}

export class SetDefaultAppPodVersionInput implements ISetDefaultAppPodVersionInput {
    deviceId!: number;
    osType!: OsTypeEnum;

    constructor(data?: ISetDefaultAppPodVersionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"];
            this.osType = _data["osType"];
        }
    }

    static fromJS(data: any): SetDefaultAppPodVersionInput {
        data = typeof data === 'object' ? data : {};
        let result = new SetDefaultAppPodVersionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        data["osType"] = this.osType;
        return data; 
    }
}

export interface ISetDefaultAppPodVersionInput {
    deviceId: number;
    osType: OsTypeEnum;
}

export class DeviceAppPodVersionDto implements IDeviceAppPodVersionDto {
    currentAppPodVersionId!: number | undefined;
    currentVersion!: string | undefined;
    currentDownloadUrl!: string | undefined;
    targetAppPodVersionId!: number | undefined;
    targetVersion!: string | undefined;
    targetDownloadUrl!: string | undefined;
    currentAppPodName!: string | undefined;
    targetAppPodName!: string | undefined;
    os!: string | undefined;
    targetVersionAppSetting!: string | undefined;
    description!: string | undefined;
    isLocked!: boolean;
    extensionData!: string | undefined;
    md5!: string | undefined;
    isNeedRestart!: boolean;

    constructor(data?: IDeviceAppPodVersionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentAppPodVersionId = _data["currentAppPodVersionId"];
            this.currentVersion = _data["currentVersion"];
            this.currentDownloadUrl = _data["currentDownloadUrl"];
            this.targetAppPodVersionId = _data["targetAppPodVersionId"];
            this.targetVersion = _data["targetVersion"];
            this.targetDownloadUrl = _data["targetDownloadUrl"];
            this.currentAppPodName = _data["currentAppPodName"];
            this.targetAppPodName = _data["targetAppPodName"];
            this.os = _data["os"];
            this.targetVersionAppSetting = _data["targetVersionAppSetting"];
            this.description = _data["description"];
            this.isLocked = _data["isLocked"];
            this.extensionData = _data["extensionData"];
            this.md5 = _data["md5"];
            this.isNeedRestart = _data["isNeedRestart"];
        }
    }

    static fromJS(data: any): DeviceAppPodVersionDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceAppPodVersionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentAppPodVersionId"] = this.currentAppPodVersionId;
        data["currentVersion"] = this.currentVersion;
        data["currentDownloadUrl"] = this.currentDownloadUrl;
        data["targetAppPodVersionId"] = this.targetAppPodVersionId;
        data["targetVersion"] = this.targetVersion;
        data["targetDownloadUrl"] = this.targetDownloadUrl;
        data["currentAppPodName"] = this.currentAppPodName;
        data["targetAppPodName"] = this.targetAppPodName;
        data["os"] = this.os;
        data["targetVersionAppSetting"] = this.targetVersionAppSetting;
        data["description"] = this.description;
        data["isLocked"] = this.isLocked;
        data["extensionData"] = this.extensionData;
        data["md5"] = this.md5;
        data["isNeedRestart"] = this.isNeedRestart;
        return data; 
    }
}

export interface IDeviceAppPodVersionDto {
    currentAppPodVersionId: number | undefined;
    currentVersion: string | undefined;
    currentDownloadUrl: string | undefined;
    targetAppPodVersionId: number | undefined;
    targetVersion: string | undefined;
    targetDownloadUrl: string | undefined;
    currentAppPodName: string | undefined;
    targetAppPodName: string | undefined;
    os: string | undefined;
    targetVersionAppSetting: string | undefined;
    description: string | undefined;
    isLocked: boolean;
    extensionData: string | undefined;
    md5: string | undefined;
    isNeedRestart: boolean;
}

export class ChangeDeviceAppPodVersionInput implements IChangeDeviceAppPodVersionInput {
    deviceId!: number;
    targetAppPodVersionId!: number;
    extensionData!: string | undefined;
    isLock!: boolean;

    constructor(data?: IChangeDeviceAppPodVersionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"];
            this.targetAppPodVersionId = _data["targetAppPodVersionId"];
            this.extensionData = _data["extensionData"];
            this.isLock = _data["isLock"];
        }
    }

    static fromJS(data: any): ChangeDeviceAppPodVersionInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeDeviceAppPodVersionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        data["targetAppPodVersionId"] = this.targetAppPodVersionId;
        data["extensionData"] = this.extensionData;
        data["isLock"] = this.isLock;
        return data; 
    }
}

export interface IChangeDeviceAppPodVersionInput {
    deviceId: number;
    targetAppPodVersionId: number;
    extensionData: string | undefined;
    isLock: boolean;
}

export class IdNameDto implements IIdNameDto {
    id!: number;
    name!: string | undefined;

    constructor(data?: IIdNameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): IdNameDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdNameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IIdNameDto {
    id: number;
    name: string | undefined;
}

export class EntityFileDto implements IEntityFileDto {
    entityId!: number;
    resourceId!: number;
    name!: string | undefined;
    /** 资源的地址途径 */
    fileUrl!: string | undefined;
    category!: string | undefined;
    fromType!: string | undefined;
    type!: string | undefined;
    created!: moment.Moment | undefined;
    usage!: string | undefined;
    description!: string | undefined;
    orderNumber!: number;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IEntityFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.entityId = _data["entityId"];
            this.resourceId = _data["resourceId"];
            this.name = _data["name"];
            this.fileUrl = _data["fileUrl"];
            this.category = _data["category"];
            this.fromType = _data["fromType"];
            this.type = _data["type"];
            this.created = _data["created"] ? moment(_data["created"].toString()) : <any>undefined;
            this.usage = _data["usage"];
            this.description = _data["description"];
            this.orderNumber = _data["orderNumber"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EntityFileDto {
        data = typeof data === 'object' ? data : {};
        let result = new EntityFileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityId"] = this.entityId;
        data["resourceId"] = this.resourceId;
        data["name"] = this.name;
        data["fileUrl"] = this.fileUrl;
        data["category"] = this.category;
        data["fromType"] = this.fromType;
        data["type"] = this.type;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["usage"] = this.usage;
        data["description"] = this.description;
        data["orderNumber"] = this.orderNumber;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityFileDto {
    entityId: number;
    resourceId: number;
    name: string | undefined;
    /** 资源的地址途径 */
    fileUrl: string | undefined;
    category: string | undefined;
    fromType: string | undefined;
    type: string | undefined;
    created: moment.Moment | undefined;
    usage: string | undefined;
    description: string | undefined;
    orderNumber: number;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

/** 获取品牌的列表 */
export class BrandDto implements IBrandDto {
    /** 品牌的唯一标识 */
    code!: string | undefined;
    /** 排序 */
    orderNumber!: number;
    /** 品牌名字 */
    name!: string | undefined;
    /** 品牌 Logo */
    logoUrl!: string | undefined;
    b_BrandCategories!: IdNameDto[] | undefined;
    /** 品牌大图 */
    imageUrl!: string | undefined;
    /** 状态 */
    state!: string | undefined;
    /** 品牌主题色   16进制编码：#FFFFFF */
    mainColor!: string | undefined;
    /** 品牌描述 */
    description!: string | undefined;
    /** 管理的外部资源 */
    itemImagesOrVideos!: EntityFileDto[] | undefined;
    /** 口号 */
    slogan!: string | undefined;
    /** 品牌的Tag */
    brandTags!: IdNameDto[] | undefined;
    auditStatus!: AuditStatus;
    /** 主题 */
    theme!: string | undefined;
    /** 额外的信息 */
    extensionData!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IBrandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.orderNumber = _data["orderNumber"];
            this.name = _data["name"];
            this.logoUrl = _data["logoUrl"];
            if (Array.isArray(_data["b_BrandCategories"])) {
                this.b_BrandCategories = [] as any;
                for (let item of _data["b_BrandCategories"])
                    this.b_BrandCategories!.push(IdNameDto.fromJS(item));
            }
            this.imageUrl = _data["imageUrl"];
            this.state = _data["state"];
            this.mainColor = _data["mainColor"];
            this.description = _data["description"];
            if (Array.isArray(_data["itemImagesOrVideos"])) {
                this.itemImagesOrVideos = [] as any;
                for (let item of _data["itemImagesOrVideos"])
                    this.itemImagesOrVideos!.push(EntityFileDto.fromJS(item));
            }
            this.slogan = _data["slogan"];
            if (Array.isArray(_data["brandTags"])) {
                this.brandTags = [] as any;
                for (let item of _data["brandTags"])
                    this.brandTags!.push(IdNameDto.fromJS(item));
            }
            this.auditStatus = _data["auditStatus"];
            this.theme = _data["theme"];
            this.extensionData = _data["extensionData"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BrandDto {
        data = typeof data === 'object' ? data : {};
        let result = new BrandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["orderNumber"] = this.orderNumber;
        data["name"] = this.name;
        data["logoUrl"] = this.logoUrl;
        if (Array.isArray(this.b_BrandCategories)) {
            data["b_BrandCategories"] = [];
            for (let item of this.b_BrandCategories)
                data["b_BrandCategories"].push(item.toJSON());
        }
        data["imageUrl"] = this.imageUrl;
        data["state"] = this.state;
        data["mainColor"] = this.mainColor;
        data["description"] = this.description;
        if (Array.isArray(this.itemImagesOrVideos)) {
            data["itemImagesOrVideos"] = [];
            for (let item of this.itemImagesOrVideos)
                data["itemImagesOrVideos"].push(item.toJSON());
        }
        data["slogan"] = this.slogan;
        if (Array.isArray(this.brandTags)) {
            data["brandTags"] = [];
            for (let item of this.brandTags)
                data["brandTags"].push(item.toJSON());
        }
        data["auditStatus"] = this.auditStatus;
        data["theme"] = this.theme;
        data["extensionData"] = this.extensionData;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

/** 获取品牌的列表 */
export interface IBrandDto {
    /** 品牌的唯一标识 */
    code: string | undefined;
    /** 排序 */
    orderNumber: number;
    /** 品牌名字 */
    name: string | undefined;
    /** 品牌 Logo */
    logoUrl: string | undefined;
    b_BrandCategories: IdNameDto[] | undefined;
    /** 品牌大图 */
    imageUrl: string | undefined;
    /** 状态 */
    state: string | undefined;
    /** 品牌主题色   16进制编码：#FFFFFF */
    mainColor: string | undefined;
    /** 品牌描述 */
    description: string | undefined;
    /** 管理的外部资源 */
    itemImagesOrVideos: EntityFileDto[] | undefined;
    /** 口号 */
    slogan: string | undefined;
    /** 品牌的Tag */
    brandTags: IdNameDto[] | undefined;
    auditStatus: AuditStatus;
    /** 主题 */
    theme: string | undefined;
    /** 额外的信息 */
    extensionData: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class BrandDtoPagedResultDto implements IBrandDtoPagedResultDto {
    totalCount!: number;
    items!: BrandDto[] | undefined;

    constructor(data?: IBrandDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BrandDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BrandDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new BrandDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBrandDtoPagedResultDto {
    totalCount: number;
    items: BrandDto[] | undefined;
}

/** 更新品牌 */
export class UpdateBrandInput implements IUpdateBrandInput {
    /** 品牌Id */
    id!: number;
    /** 品牌唯一标识 */
    code!: string;
    /** 排序 */
    orderNumber!: number;
    /** 品牌名字 */
    name!: string;
    /** 主题 */
    theme!: string | undefined;
    extensionData!: string | undefined;
    /** 品牌 Logo */
    logoUrl!: string | undefined;
    /** 品牌大图 */
    imageUrl!: string | undefined;
    /** 状态 */
    state!: string | undefined;
    /** 品牌主题色   16进制编码：#FFFFFF */
    mainColor!: string | undefined;
    /** 品牌描述 */
    description!: string | undefined;
    /** 口号，主题 */
    slogan!: string | undefined;
    /** 品牌Tag的ID */
    tagIds!: number[] | undefined;
    /** 品牌分类 */
    categorys!: number[] | undefined;

    constructor(data?: IUpdateBrandInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.orderNumber = _data["orderNumber"];
            this.name = _data["name"];
            this.theme = _data["theme"];
            this.extensionData = _data["extensionData"];
            this.logoUrl = _data["logoUrl"];
            this.imageUrl = _data["imageUrl"];
            this.state = _data["state"];
            this.mainColor = _data["mainColor"];
            this.description = _data["description"];
            this.slogan = _data["slogan"];
            if (Array.isArray(_data["tagIds"])) {
                this.tagIds = [] as any;
                for (let item of _data["tagIds"])
                    this.tagIds!.push(item);
            }
            if (Array.isArray(_data["categorys"])) {
                this.categorys = [] as any;
                for (let item of _data["categorys"])
                    this.categorys!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateBrandInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBrandInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["orderNumber"] = this.orderNumber;
        data["name"] = this.name;
        data["theme"] = this.theme;
        data["extensionData"] = this.extensionData;
        data["logoUrl"] = this.logoUrl;
        data["imageUrl"] = this.imageUrl;
        data["state"] = this.state;
        data["mainColor"] = this.mainColor;
        data["description"] = this.description;
        data["slogan"] = this.slogan;
        if (Array.isArray(this.tagIds)) {
            data["tagIds"] = [];
            for (let item of this.tagIds)
                data["tagIds"].push(item);
        }
        if (Array.isArray(this.categorys)) {
            data["categorys"] = [];
            for (let item of this.categorys)
                data["categorys"].push(item);
        }
        return data; 
    }
}

/** 更新品牌 */
export interface IUpdateBrandInput {
    /** 品牌Id */
    id: number;
    /** 品牌唯一标识 */
    code: string;
    /** 排序 */
    orderNumber: number;
    /** 品牌名字 */
    name: string;
    /** 主题 */
    theme: string | undefined;
    extensionData: string | undefined;
    /** 品牌 Logo */
    logoUrl: string | undefined;
    /** 品牌大图 */
    imageUrl: string | undefined;
    /** 状态 */
    state: string | undefined;
    /** 品牌主题色   16进制编码：#FFFFFF */
    mainColor: string | undefined;
    /** 品牌描述 */
    description: string | undefined;
    /** 口号，主题 */
    slogan: string | undefined;
    /** 品牌Tag的ID */
    tagIds: number[] | undefined;
    /** 品牌分类 */
    categorys: number[] | undefined;
}

/** 新增品牌 */
export class CreateBrandInput implements ICreateBrandInput {
    /** 品牌唯一标识 */
    code!: string;
    /** 排序 */
    orderNumber!: number;
    /** 品牌名字 */
    name!: string;
    /** 主题 */
    theme!: string | undefined;
    extensionData!: string | undefined;
    /** 品牌 Logo */
    logoUrl!: string | undefined;
    /** 品牌大图 */
    imageUrl!: string | undefined;
    /** 状态 */
    state!: string | undefined;
    /** 品牌主题色   16进制编码：#FFFFFF */
    mainColor!: string | undefined;
    /** 品牌描述 */
    description!: string | undefined;
    /** 口号，主题 */
    slogan!: string | undefined;
    /** 品牌Tag的ID */
    tagIds!: number[] | undefined;
    /** 品牌分类 */
    categorys!: number[] | undefined;

    constructor(data?: ICreateBrandInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.orderNumber = _data["orderNumber"];
            this.name = _data["name"];
            this.theme = _data["theme"];
            this.extensionData = _data["extensionData"];
            this.logoUrl = _data["logoUrl"];
            this.imageUrl = _data["imageUrl"];
            this.state = _data["state"];
            this.mainColor = _data["mainColor"];
            this.description = _data["description"];
            this.slogan = _data["slogan"];
            if (Array.isArray(_data["tagIds"])) {
                this.tagIds = [] as any;
                for (let item of _data["tagIds"])
                    this.tagIds!.push(item);
            }
            if (Array.isArray(_data["categorys"])) {
                this.categorys = [] as any;
                for (let item of _data["categorys"])
                    this.categorys!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateBrandInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBrandInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["orderNumber"] = this.orderNumber;
        data["name"] = this.name;
        data["theme"] = this.theme;
        data["extensionData"] = this.extensionData;
        data["logoUrl"] = this.logoUrl;
        data["imageUrl"] = this.imageUrl;
        data["state"] = this.state;
        data["mainColor"] = this.mainColor;
        data["description"] = this.description;
        data["slogan"] = this.slogan;
        if (Array.isArray(this.tagIds)) {
            data["tagIds"] = [];
            for (let item of this.tagIds)
                data["tagIds"].push(item);
        }
        if (Array.isArray(this.categorys)) {
            data["categorys"] = [];
            for (let item of this.categorys)
                data["categorys"].push(item);
        }
        return data; 
    }
}

/** 新增品牌 */
export interface ICreateBrandInput {
    /** 品牌唯一标识 */
    code: string;
    /** 排序 */
    orderNumber: number;
    /** 品牌名字 */
    name: string;
    /** 主题 */
    theme: string | undefined;
    extensionData: string | undefined;
    /** 品牌 Logo */
    logoUrl: string | undefined;
    /** 品牌大图 */
    imageUrl: string | undefined;
    /** 状态 */
    state: string | undefined;
    /** 品牌主题色   16进制编码：#FFFFFF */
    mainColor: string | undefined;
    /** 品牌描述 */
    description: string | undefined;
    /** 口号，主题 */
    slogan: string | undefined;
    /** 品牌Tag的ID */
    tagIds: number[] | undefined;
    /** 品牌分类 */
    categorys: number[] | undefined;
}

export class EntityFileDtoPagedResultDto implements IEntityFileDtoPagedResultDto {
    totalCount!: number;
    items!: EntityFileDto[] | undefined;

    constructor(data?: IEntityFileDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(EntityFileDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EntityFileDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new EntityFileDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEntityFileDtoPagedResultDto {
    totalCount: number;
    items: EntityFileDto[] | undefined;
}

export class CreateEntityResourceInput implements ICreateEntityResourceInput {
    fileUrl!: string;
    usage!: string | undefined;
    description!: string | undefined;
    content!: string | undefined;
    name!: string | undefined;
    entityId!: number;
    orderNumber!: number;
    fromType!: string | undefined;
    resourceItemId!: number;

    constructor(data?: ICreateEntityResourceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileUrl = _data["fileUrl"];
            this.usage = _data["usage"];
            this.description = _data["description"];
            this.content = _data["content"];
            this.name = _data["name"];
            this.entityId = _data["entityId"];
            this.orderNumber = _data["orderNumber"];
            this.fromType = _data["fromType"];
            this.resourceItemId = _data["resourceItemId"];
        }
    }

    static fromJS(data: any): CreateEntityResourceInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateEntityResourceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileUrl"] = this.fileUrl;
        data["usage"] = this.usage;
        data["description"] = this.description;
        data["content"] = this.content;
        data["name"] = this.name;
        data["entityId"] = this.entityId;
        data["orderNumber"] = this.orderNumber;
        data["fromType"] = this.fromType;
        data["resourceItemId"] = this.resourceItemId;
        return data; 
    }
}

export interface ICreateEntityResourceInput {
    fileUrl: string;
    usage: string | undefined;
    description: string | undefined;
    content: string | undefined;
    name: string | undefined;
    entityId: number;
    orderNumber: number;
    fromType: string | undefined;
    resourceItemId: number;
}

export class UpdateEntityResourceInput implements IUpdateEntityResourceInput {
    id!: number;
    fileUrl!: string | undefined;
    usage!: string | undefined;
    description!: string | undefined;
    content!: string | undefined;
    name!: string | undefined;
    orderNumber!: number;
    fromType!: string | undefined;

    constructor(data?: IUpdateEntityResourceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fileUrl = _data["fileUrl"];
            this.usage = _data["usage"];
            this.description = _data["description"];
            this.content = _data["content"];
            this.name = _data["name"];
            this.orderNumber = _data["orderNumber"];
            this.fromType = _data["fromType"];
        }
    }

    static fromJS(data: any): UpdateEntityResourceInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEntityResourceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fileUrl"] = this.fileUrl;
        data["usage"] = this.usage;
        data["description"] = this.description;
        data["content"] = this.content;
        data["name"] = this.name;
        data["orderNumber"] = this.orderNumber;
        data["fromType"] = this.fromType;
        return data; 
    }
}

export interface IUpdateEntityResourceInput {
    id: number;
    fileUrl: string | undefined;
    usage: string | undefined;
    description: string | undefined;
    content: string | undefined;
    name: string | undefined;
    orderNumber: number;
    fromType: string | undefined;
}

/** 为品牌打Tag */
export class SetBrandTagsDto implements ISetBrandTagsDto {
    tagIds!: number[] | undefined;
    /** 品牌ID */
    brandIds!: number[] | undefined;
    /** Tag行为默认新增 */
    action!: string | undefined;

    constructor(data?: ISetBrandTagsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["tagIds"])) {
                this.tagIds = [] as any;
                for (let item of _data["tagIds"])
                    this.tagIds!.push(item);
            }
            if (Array.isArray(_data["brandIds"])) {
                this.brandIds = [] as any;
                for (let item of _data["brandIds"])
                    this.brandIds!.push(item);
            }
            this.action = _data["action"];
        }
    }

    static fromJS(data: any): SetBrandTagsDto {
        data = typeof data === 'object' ? data : {};
        let result = new SetBrandTagsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.tagIds)) {
            data["tagIds"] = [];
            for (let item of this.tagIds)
                data["tagIds"].push(item);
        }
        if (Array.isArray(this.brandIds)) {
            data["brandIds"] = [];
            for (let item of this.brandIds)
                data["brandIds"].push(item);
        }
        data["action"] = this.action;
        return data; 
    }
}

/** 为品牌打Tag */
export interface ISetBrandTagsDto {
    tagIds: number[] | undefined;
    /** 品牌ID */
    brandIds: number[] | undefined;
    /** Tag行为默认新增 */
    action: string | undefined;
}

/** 上下线品牌 */
export class OnlineOrOffLineBrandInput implements IOnlineOrOffLineBrandInput {
    /** 是否有商品 */
    isIncludeProduct!: boolean;
    wanted!: ApplyWanted;
    /** 是否上下线所有品牌 */
    isAllBrands!: boolean;
    /** 选中的品牌ID */
    brandIds!: number[] | undefined;

    constructor(data?: IOnlineOrOffLineBrandInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isIncludeProduct = _data["isIncludeProduct"];
            this.wanted = _data["wanted"];
            this.isAllBrands = _data["isAllBrands"];
            if (Array.isArray(_data["brandIds"])) {
                this.brandIds = [] as any;
                for (let item of _data["brandIds"])
                    this.brandIds!.push(item);
            }
        }
    }

    static fromJS(data: any): OnlineOrOffLineBrandInput {
        data = typeof data === 'object' ? data : {};
        let result = new OnlineOrOffLineBrandInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isIncludeProduct"] = this.isIncludeProduct;
        data["wanted"] = this.wanted;
        data["isAllBrands"] = this.isAllBrands;
        if (Array.isArray(this.brandIds)) {
            data["brandIds"] = [];
            for (let item of this.brandIds)
                data["brandIds"].push(item);
        }
        return data; 
    }
}

/** 上下线品牌 */
export interface IOnlineOrOffLineBrandInput {
    /** 是否有商品 */
    isIncludeProduct: boolean;
    wanted: ApplyWanted;
    /** 是否上下线所有品牌 */
    isAllBrands: boolean;
    /** 选中的品牌ID */
    brandIds: number[] | undefined;
}

export class BrandCategoryTreeItemDto implements IBrandCategoryTreeItemDto {
    iconUrl!: string | undefined;
    text!: string | undefined;
    id!: number;
    type!: string | undefined;
    isSelected!: boolean;
    imageUrl!: string | undefined;
    productCount!: number;
    children!: BrandCategoryTreeItemDto[] | undefined;

    constructor(data?: IBrandCategoryTreeItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iconUrl = _data["iconUrl"];
            this.text = _data["text"];
            this.id = _data["id"];
            this.type = _data["type"];
            this.isSelected = _data["isSelected"];
            this.imageUrl = _data["imageUrl"];
            this.productCount = _data["productCount"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(BrandCategoryTreeItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BrandCategoryTreeItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new BrandCategoryTreeItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["iconUrl"] = this.iconUrl;
        data["text"] = this.text;
        data["id"] = this.id;
        data["type"] = this.type;
        data["isSelected"] = this.isSelected;
        data["imageUrl"] = this.imageUrl;
        data["productCount"] = this.productCount;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBrandCategoryTreeItemDto {
    iconUrl: string | undefined;
    text: string | undefined;
    id: number;
    type: string | undefined;
    isSelected: boolean;
    imageUrl: string | undefined;
    productCount: number;
    children: BrandCategoryTreeItemDto[] | undefined;
}

export class BrandCategoryDto implements IBrandCategoryDto {
    organizationUnitId!: number | undefined;
    /** 可被理解的分类唯一编码. */
    categoryCode!: string | undefined;
    /** 分类的名称 */
    name!: string | undefined;
    /** 父分类 */
    parentCategoryId!: number | undefined;
    parentCategoryName!: string | undefined;
    /** 分类的图片 */
    imageUrl!: string | undefined;
    iconUrl!: string | undefined;
    isLocal!: boolean;
    isSpecial!: boolean;
    fromType!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IBrandCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationUnitId = _data["organizationUnitId"];
            this.categoryCode = _data["categoryCode"];
            this.name = _data["name"];
            this.parentCategoryId = _data["parentCategoryId"];
            this.parentCategoryName = _data["parentCategoryName"];
            this.imageUrl = _data["imageUrl"];
            this.iconUrl = _data["iconUrl"];
            this.isLocal = _data["isLocal"];
            this.isSpecial = _data["isSpecial"];
            this.fromType = _data["fromType"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BrandCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new BrandCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["categoryCode"] = this.categoryCode;
        data["name"] = this.name;
        data["parentCategoryId"] = this.parentCategoryId;
        data["parentCategoryName"] = this.parentCategoryName;
        data["imageUrl"] = this.imageUrl;
        data["iconUrl"] = this.iconUrl;
        data["isLocal"] = this.isLocal;
        data["isSpecial"] = this.isSpecial;
        data["fromType"] = this.fromType;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IBrandCategoryDto {
    organizationUnitId: number | undefined;
    /** 可被理解的分类唯一编码. */
    categoryCode: string | undefined;
    /** 分类的名称 */
    name: string | undefined;
    /** 父分类 */
    parentCategoryId: number | undefined;
    parentCategoryName: string | undefined;
    /** 分类的图片 */
    imageUrl: string | undefined;
    iconUrl: string | undefined;
    isLocal: boolean;
    isSpecial: boolean;
    fromType: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class BrandCategoryDtoPagedResultDto implements IBrandCategoryDtoPagedResultDto {
    totalCount!: number;
    items!: BrandCategoryDto[] | undefined;

    constructor(data?: IBrandCategoryDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BrandCategoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BrandCategoryDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new BrandCategoryDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBrandCategoryDtoPagedResultDto {
    totalCount: number;
    items: BrandCategoryDto[] | undefined;
}

export class CreateBrandCategoryInput implements ICreateBrandCategoryInput {
    /** 可被理解的分类唯一编码. */
    categoryCode!: string | undefined;
    /** 分类的名称 */
    name!: string;
    /** 父分类 */
    parentCategoryId!: number | undefined;
    /** 分类的图片 */
    imageUrl!: string | undefined;
    iconUrl!: string | undefined;
    isLocal!: boolean;
    isSpecial!: boolean;
    fromType!: string | undefined;

    constructor(data?: ICreateBrandCategoryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryCode = _data["categoryCode"];
            this.name = _data["name"];
            this.parentCategoryId = _data["parentCategoryId"];
            this.imageUrl = _data["imageUrl"];
            this.iconUrl = _data["iconUrl"];
            this.isLocal = _data["isLocal"];
            this.isSpecial = _data["isSpecial"];
            this.fromType = _data["fromType"];
        }
    }

    static fromJS(data: any): CreateBrandCategoryInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBrandCategoryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryCode"] = this.categoryCode;
        data["name"] = this.name;
        data["parentCategoryId"] = this.parentCategoryId;
        data["imageUrl"] = this.imageUrl;
        data["iconUrl"] = this.iconUrl;
        data["isLocal"] = this.isLocal;
        data["isSpecial"] = this.isSpecial;
        data["fromType"] = this.fromType;
        return data; 
    }
}

export interface ICreateBrandCategoryInput {
    /** 可被理解的分类唯一编码. */
    categoryCode: string | undefined;
    /** 分类的名称 */
    name: string;
    /** 父分类 */
    parentCategoryId: number | undefined;
    /** 分类的图片 */
    imageUrl: string | undefined;
    iconUrl: string | undefined;
    isLocal: boolean;
    isSpecial: boolean;
    fromType: string | undefined;
}

export class UpdateBrandCategoryInput implements IUpdateBrandCategoryInput {
    id!: number;
    /** 可被理解的分类唯一编码. */
    categoryCode!: string | undefined;
    /** 分类的名称 */
    name!: string;
    /** 父分类 */
    parentCategoryId!: number | undefined;
    /** 分类的图片 */
    imageUrl!: string | undefined;
    iconUrl!: string | undefined;
    isLocal!: boolean;
    isSpecial!: boolean;
    fromType!: string | undefined;

    constructor(data?: IUpdateBrandCategoryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.categoryCode = _data["categoryCode"];
            this.name = _data["name"];
            this.parentCategoryId = _data["parentCategoryId"];
            this.imageUrl = _data["imageUrl"];
            this.iconUrl = _data["iconUrl"];
            this.isLocal = _data["isLocal"];
            this.isSpecial = _data["isSpecial"];
            this.fromType = _data["fromType"];
        }
    }

    static fromJS(data: any): UpdateBrandCategoryInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBrandCategoryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["categoryCode"] = this.categoryCode;
        data["name"] = this.name;
        data["parentCategoryId"] = this.parentCategoryId;
        data["imageUrl"] = this.imageUrl;
        data["iconUrl"] = this.iconUrl;
        data["isLocal"] = this.isLocal;
        data["isSpecial"] = this.isSpecial;
        data["fromType"] = this.fromType;
        return data; 
    }
}

export interface IUpdateBrandCategoryInput {
    id: number;
    /** 可被理解的分类唯一编码. */
    categoryCode: string | undefined;
    /** 分类的名称 */
    name: string;
    /** 父分类 */
    parentCategoryId: number | undefined;
    /** 分类的图片 */
    imageUrl: string | undefined;
    iconUrl: string | undefined;
    isLocal: boolean;
    isSpecial: boolean;
    fromType: string | undefined;
}

export enum DeviceStatus {
    Stopped = 0,
    Running = 1,
}

export class TenantDeviceOutput implements ITenantDeviceOutput {
    tenantName!: string | undefined;
    name!: string | undefined;
    auditStatus!: AuditStatus;
    tenantId!: number;
    organizationUnitId!: number | undefined;
    /** 设备绑定StoreId */
    storeId!: number | undefined;
    storeName!: string | undefined;
    organizationUnitName!: string | undefined;
    orderNumber!: number;
    imageUrl!: string | undefined;
    intranetIP!: string | undefined;
    internetIP!: string | undefined;
    description!: string | undefined;
    mac!: string | undefined;
    coverArea!: number | undefined;
    licenseInfo!: string | undefined;
    hardwareCode!: string | undefined;
    resolution_Width!: number | undefined;
    resolution_Height!: number | undefined;
    os!: string | undefined;
    address!: string | undefined;
    /** 最后设备心跳时间. */
    heartBeatTime!: moment.Moment | undefined;
    /** 一天中，设备正常开机时间. */
    startTime!: moment.Moment | undefined;
    /** 一天中，设备正常关机时间. */
    shutdownTime!: moment.Moment | undefined;
    /** 设备是否已被注册，如果已注册，另外的机器不能再注册. 同时管理员可以清空，允许其它设备进行注册. */
    isRegistered!: boolean;
    /** 屏幕最新截图 */
    snapshotUrl!: string | undefined;
    /** 截屏的时间 */
    snapshotTime!: moment.Moment | undefined;
    captureImageUrl!: string | undefined;
    captureImageTime!: moment.Moment | undefined;
    errorStartTime!: moment.Moment | undefined;
    /** 设备过期时间,时间过期后,不能再使用，包括其中的软件. */
    expiredTime!: moment.Moment | undefined;
    /** 是否在锁定状态 */
    isLocked!: boolean;
    operatingType!: OperatingType;
    bussinessType!: BussinessType;
    /** 机器开始使用的时间，方便运维人员判断售后维护情况. */
    startedUsedTime!: moment.Moment | undefined;
    /** 热力图 */
    heatImageUrl!: string | undefined;
    /** 设备的一些其它相关信息，可记录其中. */
    comments!: string | undefined;
    deviceTypeId!: number | undefined;
    deviceType!: DeviceTypeDto;
    peripherals!: DevicePeripheralDto[] | undefined;
    /** 访问此设备的唯一凭证，通过Subkey可调用平台api，拿到设备相关的信息，如,ads,apps,products等.同时可用户注册. */
    subKey!: string | undefined;
    /** 设备默认销售那个电商的商品. */
    onlineTrafficTarget!: string | undefined;
    /** 商家设备自定义编号 */
    outerId!: string | undefined;
    platformType!: ExternalEnum;
    extraDeviceId!: string | undefined;
    status!: number;
    taobaoRegistTime!: moment.Moment | undefined;
    registerSource!: string | undefined;
    osType!: OsTypeEnum;
    latestResourceUpdateTime!: moment.Moment | undefined;
    isSupportAccessToChildDevices!: boolean | undefined;
    isSupportRemoteControl!: boolean | undefined;
    abilities!: string | undefined;
    creationTime!: moment.Moment | undefined;
    id!: number;

    constructor(data?: ITenantDeviceOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantName = _data["tenantName"];
            this.name = _data["name"];
            this.auditStatus = _data["auditStatus"];
            this.tenantId = _data["tenantId"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.storeId = _data["storeId"];
            this.storeName = _data["storeName"];
            this.organizationUnitName = _data["organizationUnitName"];
            this.orderNumber = _data["orderNumber"];
            this.imageUrl = _data["imageUrl"];
            this.intranetIP = _data["intranetIP"];
            this.internetIP = _data["internetIP"];
            this.description = _data["description"];
            this.mac = _data["mac"];
            this.coverArea = _data["coverArea"];
            this.licenseInfo = _data["licenseInfo"];
            this.hardwareCode = _data["hardwareCode"];
            this.resolution_Width = _data["resolution_Width"];
            this.resolution_Height = _data["resolution_Height"];
            this.os = _data["os"];
            this.address = _data["address"];
            this.heartBeatTime = _data["heartBeatTime"] ? moment(_data["heartBeatTime"].toString()) : <any>undefined;
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.shutdownTime = _data["shutdownTime"] ? moment(_data["shutdownTime"].toString()) : <any>undefined;
            this.isRegistered = _data["isRegistered"];
            this.snapshotUrl = _data["snapshotUrl"];
            this.snapshotTime = _data["snapshotTime"] ? moment(_data["snapshotTime"].toString()) : <any>undefined;
            this.captureImageUrl = _data["captureImageUrl"];
            this.captureImageTime = _data["captureImageTime"] ? moment(_data["captureImageTime"].toString()) : <any>undefined;
            this.errorStartTime = _data["errorStartTime"] ? moment(_data["errorStartTime"].toString()) : <any>undefined;
            this.expiredTime = _data["expiredTime"] ? moment(_data["expiredTime"].toString()) : <any>undefined;
            this.isLocked = _data["isLocked"];
            this.operatingType = _data["operatingType"];
            this.bussinessType = _data["bussinessType"];
            this.startedUsedTime = _data["startedUsedTime"] ? moment(_data["startedUsedTime"].toString()) : <any>undefined;
            this.heatImageUrl = _data["heatImageUrl"];
            this.comments = _data["comments"];
            this.deviceTypeId = _data["deviceTypeId"];
            this.deviceType = _data["deviceType"] ? DeviceTypeDto.fromJS(_data["deviceType"]) : <any>undefined;
            if (Array.isArray(_data["peripherals"])) {
                this.peripherals = [] as any;
                for (let item of _data["peripherals"])
                    this.peripherals!.push(DevicePeripheralDto.fromJS(item));
            }
            this.subKey = _data["subKey"];
            this.onlineTrafficTarget = _data["onlineTrafficTarget"];
            this.outerId = _data["outerId"];
            this.platformType = _data["platformType"];
            this.extraDeviceId = _data["extraDeviceId"];
            this.status = _data["status"];
            this.taobaoRegistTime = _data["taobaoRegistTime"] ? moment(_data["taobaoRegistTime"].toString()) : <any>undefined;
            this.registerSource = _data["registerSource"];
            this.osType = _data["osType"];
            this.latestResourceUpdateTime = _data["latestResourceUpdateTime"] ? moment(_data["latestResourceUpdateTime"].toString()) : <any>undefined;
            this.isSupportAccessToChildDevices = _data["isSupportAccessToChildDevices"];
            this.isSupportRemoteControl = _data["isSupportRemoteControl"];
            this.abilities = _data["abilities"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TenantDeviceOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TenantDeviceOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantName"] = this.tenantName;
        data["name"] = this.name;
        data["auditStatus"] = this.auditStatus;
        data["tenantId"] = this.tenantId;
        data["organizationUnitId"] = this.organizationUnitId;
        data["storeId"] = this.storeId;
        data["storeName"] = this.storeName;
        data["organizationUnitName"] = this.organizationUnitName;
        data["orderNumber"] = this.orderNumber;
        data["imageUrl"] = this.imageUrl;
        data["intranetIP"] = this.intranetIP;
        data["internetIP"] = this.internetIP;
        data["description"] = this.description;
        data["mac"] = this.mac;
        data["coverArea"] = this.coverArea;
        data["licenseInfo"] = this.licenseInfo;
        data["hardwareCode"] = this.hardwareCode;
        data["resolution_Width"] = this.resolution_Width;
        data["resolution_Height"] = this.resolution_Height;
        data["os"] = this.os;
        data["address"] = this.address;
        data["heartBeatTime"] = this.heartBeatTime ? this.heartBeatTime.toISOString() : <any>undefined;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["shutdownTime"] = this.shutdownTime ? this.shutdownTime.toISOString() : <any>undefined;
        data["isRegistered"] = this.isRegistered;
        data["snapshotUrl"] = this.snapshotUrl;
        data["snapshotTime"] = this.snapshotTime ? this.snapshotTime.toISOString() : <any>undefined;
        data["captureImageUrl"] = this.captureImageUrl;
        data["captureImageTime"] = this.captureImageTime ? this.captureImageTime.toISOString() : <any>undefined;
        data["errorStartTime"] = this.errorStartTime ? this.errorStartTime.toISOString() : <any>undefined;
        data["expiredTime"] = this.expiredTime ? this.expiredTime.toISOString() : <any>undefined;
        data["isLocked"] = this.isLocked;
        data["operatingType"] = this.operatingType;
        data["bussinessType"] = this.bussinessType;
        data["startedUsedTime"] = this.startedUsedTime ? this.startedUsedTime.toISOString() : <any>undefined;
        data["heatImageUrl"] = this.heatImageUrl;
        data["comments"] = this.comments;
        data["deviceTypeId"] = this.deviceTypeId;
        data["deviceType"] = this.deviceType ? this.deviceType.toJSON() : <any>undefined;
        if (Array.isArray(this.peripherals)) {
            data["peripherals"] = [];
            for (let item of this.peripherals)
                data["peripherals"].push(item.toJSON());
        }
        data["subKey"] = this.subKey;
        data["onlineTrafficTarget"] = this.onlineTrafficTarget;
        data["outerId"] = this.outerId;
        data["platformType"] = this.platformType;
        data["extraDeviceId"] = this.extraDeviceId;
        data["status"] = this.status;
        data["taobaoRegistTime"] = this.taobaoRegistTime ? this.taobaoRegistTime.toISOString() : <any>undefined;
        data["registerSource"] = this.registerSource;
        data["osType"] = this.osType;
        data["latestResourceUpdateTime"] = this.latestResourceUpdateTime ? this.latestResourceUpdateTime.toISOString() : <any>undefined;
        data["isSupportAccessToChildDevices"] = this.isSupportAccessToChildDevices;
        data["isSupportRemoteControl"] = this.isSupportRemoteControl;
        data["abilities"] = this.abilities;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantDeviceOutput {
    tenantName: string | undefined;
    name: string | undefined;
    auditStatus: AuditStatus;
    tenantId: number;
    organizationUnitId: number | undefined;
    /** 设备绑定StoreId */
    storeId: number | undefined;
    storeName: string | undefined;
    organizationUnitName: string | undefined;
    orderNumber: number;
    imageUrl: string | undefined;
    intranetIP: string | undefined;
    internetIP: string | undefined;
    description: string | undefined;
    mac: string | undefined;
    coverArea: number | undefined;
    licenseInfo: string | undefined;
    hardwareCode: string | undefined;
    resolution_Width: number | undefined;
    resolution_Height: number | undefined;
    os: string | undefined;
    address: string | undefined;
    /** 最后设备心跳时间. */
    heartBeatTime: moment.Moment | undefined;
    /** 一天中，设备正常开机时间. */
    startTime: moment.Moment | undefined;
    /** 一天中，设备正常关机时间. */
    shutdownTime: moment.Moment | undefined;
    /** 设备是否已被注册，如果已注册，另外的机器不能再注册. 同时管理员可以清空，允许其它设备进行注册. */
    isRegistered: boolean;
    /** 屏幕最新截图 */
    snapshotUrl: string | undefined;
    /** 截屏的时间 */
    snapshotTime: moment.Moment | undefined;
    captureImageUrl: string | undefined;
    captureImageTime: moment.Moment | undefined;
    errorStartTime: moment.Moment | undefined;
    /** 设备过期时间,时间过期后,不能再使用，包括其中的软件. */
    expiredTime: moment.Moment | undefined;
    /** 是否在锁定状态 */
    isLocked: boolean;
    operatingType: OperatingType;
    bussinessType: BussinessType;
    /** 机器开始使用的时间，方便运维人员判断售后维护情况. */
    startedUsedTime: moment.Moment | undefined;
    /** 热力图 */
    heatImageUrl: string | undefined;
    /** 设备的一些其它相关信息，可记录其中. */
    comments: string | undefined;
    deviceTypeId: number | undefined;
    deviceType: DeviceTypeDto;
    peripherals: DevicePeripheralDto[] | undefined;
    /** 访问此设备的唯一凭证，通过Subkey可调用平台api，拿到设备相关的信息，如,ads,apps,products等.同时可用户注册. */
    subKey: string | undefined;
    /** 设备默认销售那个电商的商品. */
    onlineTrafficTarget: string | undefined;
    /** 商家设备自定义编号 */
    outerId: string | undefined;
    platformType: ExternalEnum;
    extraDeviceId: string | undefined;
    status: number;
    taobaoRegistTime: moment.Moment | undefined;
    registerSource: string | undefined;
    osType: OsTypeEnum;
    latestResourceUpdateTime: moment.Moment | undefined;
    isSupportAccessToChildDevices: boolean | undefined;
    isSupportRemoteControl: boolean | undefined;
    abilities: string | undefined;
    creationTime: moment.Moment | undefined;
    id: number;
}

export class TenantDeviceOutputPagedResultDto implements ITenantDeviceOutputPagedResultDto {
    totalCount!: number;
    items!: TenantDeviceOutput[] | undefined;

    constructor(data?: ITenantDeviceOutputPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TenantDeviceOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TenantDeviceOutputPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantDeviceOutputPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITenantDeviceOutputPagedResultDto {
    totalCount: number;
    items: TenantDeviceOutput[] | undefined;
}

/** 新建设备 */
export class CreateDeviceInput implements ICreateDeviceInput {
    /** Customize name to understand well. */
    name!: string;
    orderNumber!: number;
    /** Device's Mac Address, this is unique in global. */
    mac!: string | undefined;
    /** Intranet IP Address. */
    intranetIP!: string | undefined;
    /** Internet IP Address. */
    internetIP!: string | undefined;
    /** 设备描述, 字数要大于5个字符，小于25000个字符 */
    description!: string | undefined;
    /** Device's resolution width. */
    resolution_Width!: number | undefined;
    /** Device's resolution height. */
    resolution_Height!: number | undefined;
    /** Device's Operate System information. */
    os!: string | undefined;
    /** 安装的位置 */
    address!: string | undefined;
    /** 一天中，设备正常开机时间. */
    startTime!: moment.Moment | undefined;
    /** 一天中，设备正常关机时间. */
    shutdownTime!: moment.Moment | undefined;
    /** 是否在锁定状态 */
    isLocked!: boolean;
    /** 设备的一些其它相关信息，可记录其中. */
    comments!: string | undefined;
    /** 设备默认销售那个电商的商品. */
    onlineTrafficTarget!: string | undefined;
    /** 商家设备自定义编号 */
    outerId!: string | undefined;
    /** 是否支持接入子设备 */
    isSupportAccessToChildDevices!: boolean;
    /** 是否支持远程控制 */
    isSupportRemoteControl!: boolean;
    deviceTypeId!: number | undefined;
    peripheralIds!: number[] | undefined;
    categoryIds!: number[] | undefined;
    /** 硬件编号 */
    hardwareCode!: string | undefined;
    osType!: OsTypeEnum;
    organizationUnitId!: number | undefined;
    abilities!: string | undefined;
    subKey!: string | undefined;

    constructor(data?: ICreateDeviceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.orderNumber = _data["orderNumber"];
            this.mac = _data["mac"];
            this.intranetIP = _data["intranetIP"];
            this.internetIP = _data["internetIP"];
            this.description = _data["description"];
            this.resolution_Width = _data["resolution_Width"];
            this.resolution_Height = _data["resolution_Height"];
            this.os = _data["os"];
            this.address = _data["address"];
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.shutdownTime = _data["shutdownTime"] ? moment(_data["shutdownTime"].toString()) : <any>undefined;
            this.isLocked = _data["isLocked"];
            this.comments = _data["comments"];
            this.onlineTrafficTarget = _data["onlineTrafficTarget"];
            this.outerId = _data["outerId"];
            this.isSupportAccessToChildDevices = _data["isSupportAccessToChildDevices"];
            this.isSupportRemoteControl = _data["isSupportRemoteControl"];
            this.deviceTypeId = _data["deviceTypeId"];
            if (Array.isArray(_data["peripheralIds"])) {
                this.peripheralIds = [] as any;
                for (let item of _data["peripheralIds"])
                    this.peripheralIds!.push(item);
            }
            if (Array.isArray(_data["categoryIds"])) {
                this.categoryIds = [] as any;
                for (let item of _data["categoryIds"])
                    this.categoryIds!.push(item);
            }
            this.hardwareCode = _data["hardwareCode"];
            this.osType = _data["osType"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.abilities = _data["abilities"];
            this.subKey = _data["subKey"];
        }
    }

    static fromJS(data: any): CreateDeviceInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDeviceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["orderNumber"] = this.orderNumber;
        data["mac"] = this.mac;
        data["intranetIP"] = this.intranetIP;
        data["internetIP"] = this.internetIP;
        data["description"] = this.description;
        data["resolution_Width"] = this.resolution_Width;
        data["resolution_Height"] = this.resolution_Height;
        data["os"] = this.os;
        data["address"] = this.address;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["shutdownTime"] = this.shutdownTime ? this.shutdownTime.toISOString() : <any>undefined;
        data["isLocked"] = this.isLocked;
        data["comments"] = this.comments;
        data["onlineTrafficTarget"] = this.onlineTrafficTarget;
        data["outerId"] = this.outerId;
        data["isSupportAccessToChildDevices"] = this.isSupportAccessToChildDevices;
        data["isSupportRemoteControl"] = this.isSupportRemoteControl;
        data["deviceTypeId"] = this.deviceTypeId;
        if (Array.isArray(this.peripheralIds)) {
            data["peripheralIds"] = [];
            for (let item of this.peripheralIds)
                data["peripheralIds"].push(item);
        }
        if (Array.isArray(this.categoryIds)) {
            data["categoryIds"] = [];
            for (let item of this.categoryIds)
                data["categoryIds"].push(item);
        }
        data["hardwareCode"] = this.hardwareCode;
        data["osType"] = this.osType;
        data["organizationUnitId"] = this.organizationUnitId;
        data["abilities"] = this.abilities;
        data["subKey"] = this.subKey;
        return data; 
    }
}

/** 新建设备 */
export interface ICreateDeviceInput {
    /** Customize name to understand well. */
    name: string;
    orderNumber: number;
    /** Device's Mac Address, this is unique in global. */
    mac: string | undefined;
    /** Intranet IP Address. */
    intranetIP: string | undefined;
    /** Internet IP Address. */
    internetIP: string | undefined;
    /** 设备描述, 字数要大于5个字符，小于25000个字符 */
    description: string | undefined;
    /** Device's resolution width. */
    resolution_Width: number | undefined;
    /** Device's resolution height. */
    resolution_Height: number | undefined;
    /** Device's Operate System information. */
    os: string | undefined;
    /** 安装的位置 */
    address: string | undefined;
    /** 一天中，设备正常开机时间. */
    startTime: moment.Moment | undefined;
    /** 一天中，设备正常关机时间. */
    shutdownTime: moment.Moment | undefined;
    /** 是否在锁定状态 */
    isLocked: boolean;
    /** 设备的一些其它相关信息，可记录其中. */
    comments: string | undefined;
    /** 设备默认销售那个电商的商品. */
    onlineTrafficTarget: string | undefined;
    /** 商家设备自定义编号 */
    outerId: string | undefined;
    /** 是否支持接入子设备 */
    isSupportAccessToChildDevices: boolean;
    /** 是否支持远程控制 */
    isSupportRemoteControl: boolean;
    deviceTypeId: number | undefined;
    peripheralIds: number[] | undefined;
    categoryIds: number[] | undefined;
    /** 硬件编号 */
    hardwareCode: string | undefined;
    osType: OsTypeEnum;
    organizationUnitId: number | undefined;
    abilities: string | undefined;
    subKey: string | undefined;
}

export class CreateDeviceFromScanCodeInput implements ICreateDeviceFromScanCodeInput {
    tenantId!: number | undefined;
    organizationUnitId!: number | undefined;
    name!: string;
    /** Device's Mac Address, this is unique in global. */
    mac!: string | undefined;
    /** Intranet IP Address. */
    intranetIP!: string | undefined;
    /** Internet IP Address. */
    internetIP!: string | undefined;
    /** HHardware unique code from Hardware, need a tool to generate it. */
    hardwareCode!: string | undefined;
    /** 商家设备自定义编号 */
    outerId!: string | undefined;
    /** 注册来源 */
    registerSource!: string | undefined;
    os!: string;
    subKey!: string | undefined;

    constructor(data?: ICreateDeviceFromScanCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.name = _data["name"];
            this.mac = _data["mac"];
            this.intranetIP = _data["intranetIP"];
            this.internetIP = _data["internetIP"];
            this.hardwareCode = _data["hardwareCode"];
            this.outerId = _data["outerId"];
            this.registerSource = _data["registerSource"];
            this.os = _data["os"];
            this.subKey = _data["subKey"];
        }
    }

    static fromJS(data: any): CreateDeviceFromScanCodeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDeviceFromScanCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["organizationUnitId"] = this.organizationUnitId;
        data["name"] = this.name;
        data["mac"] = this.mac;
        data["intranetIP"] = this.intranetIP;
        data["internetIP"] = this.internetIP;
        data["hardwareCode"] = this.hardwareCode;
        data["outerId"] = this.outerId;
        data["registerSource"] = this.registerSource;
        data["os"] = this.os;
        data["subKey"] = this.subKey;
        return data; 
    }
}

export interface ICreateDeviceFromScanCodeInput {
    tenantId: number | undefined;
    organizationUnitId: number | undefined;
    name: string;
    /** Device's Mac Address, this is unique in global. */
    mac: string | undefined;
    /** Intranet IP Address. */
    intranetIP: string | undefined;
    /** Internet IP Address. */
    internetIP: string | undefined;
    /** HHardware unique code from Hardware, need a tool to generate it. */
    hardwareCode: string | undefined;
    /** 商家设备自定义编号 */
    outerId: string | undefined;
    /** 注册来源 */
    registerSource: string | undefined;
    os: string;
    subKey: string | undefined;
}

export class BindDeviceFromScanCodeInput implements IBindDeviceFromScanCodeInput {
    deviceId!: number;
    tenantId!: number | undefined;
    organizationUnitId!: number | undefined;
    name!: string;
    /** Device's Mac Address, this is unique in global. */
    mac!: string | undefined;
    /** Intranet IP Address. */
    intranetIP!: string | undefined;
    /** Internet IP Address. */
    internetIP!: string | undefined;
    /** HHardware unique code from Hardware, need a tool to generate it. */
    hardwareCode!: string | undefined;
    /** 商家设备自定义编号 */
    outerId!: string | undefined;
    /** 注册来源 */
    registerSource!: string | undefined;
    os!: string;
    subKey!: string | undefined;

    constructor(data?: IBindDeviceFromScanCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"];
            this.tenantId = _data["tenantId"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.name = _data["name"];
            this.mac = _data["mac"];
            this.intranetIP = _data["intranetIP"];
            this.internetIP = _data["internetIP"];
            this.hardwareCode = _data["hardwareCode"];
            this.outerId = _data["outerId"];
            this.registerSource = _data["registerSource"];
            this.os = _data["os"];
            this.subKey = _data["subKey"];
        }
    }

    static fromJS(data: any): BindDeviceFromScanCodeInput {
        data = typeof data === 'object' ? data : {};
        let result = new BindDeviceFromScanCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        data["tenantId"] = this.tenantId;
        data["organizationUnitId"] = this.organizationUnitId;
        data["name"] = this.name;
        data["mac"] = this.mac;
        data["intranetIP"] = this.intranetIP;
        data["internetIP"] = this.internetIP;
        data["hardwareCode"] = this.hardwareCode;
        data["outerId"] = this.outerId;
        data["registerSource"] = this.registerSource;
        data["os"] = this.os;
        data["subKey"] = this.subKey;
        return data; 
    }
}

export interface IBindDeviceFromScanCodeInput {
    deviceId: number;
    tenantId: number | undefined;
    organizationUnitId: number | undefined;
    name: string;
    /** Device's Mac Address, this is unique in global. */
    mac: string | undefined;
    /** Intranet IP Address. */
    intranetIP: string | undefined;
    /** Internet IP Address. */
    internetIP: string | undefined;
    /** HHardware unique code from Hardware, need a tool to generate it. */
    hardwareCode: string | undefined;
    /** 商家设备自定义编号 */
    outerId: string | undefined;
    /** 注册来源 */
    registerSource: string | undefined;
    os: string;
    subKey: string | undefined;
}

export class UpdateDeviceInput implements IUpdateDeviceInput {
    /** Customize name to understand well. */
    name!: string | undefined;
    orderNumber!: number;
    /** Device's Mac Address, this is unique in global. */
    mac!: string | undefined;
    /** Intranet IP Address. */
    intranetIP!: string | undefined;
    /** Internet IP Address. */
    internetIP!: string | undefined;
    /** 设备描述, 字数要大于5个字符，小于25000个字符 */
    description!: string | undefined;
    /** Device's resolution width. */
    resolution_Width!: number | undefined;
    /** Device's resolution height. */
    resolution_Height!: number | undefined;
    /** Device's Operate System information. */
    os!: string | undefined;
    /** 安装的位置 */
    address!: string | undefined;
    /** 一天中，设备正常开机时间. */
    startTime!: moment.Moment | undefined;
    /** 一天中，设备正常关机时间. */
    shutdownTime!: moment.Moment | undefined;
    /** 是否在锁定状态 */
    isLocked!: boolean;
    /** 设备的一些其它相关信息，可记录其中. */
    comments!: string | undefined;
    /** 设备默认销售那个电商的商品. */
    onlineTrafficTarget!: string | undefined;
    /** 商家设备自定义编号 */
    outerId!: string | undefined;
    deviceTypeId!: number | undefined;
    peripheralIds!: number[] | undefined;
    categoryIds!: number[] | undefined;
    hardwareCode!: string | undefined;
    osType!: OsTypeEnum;
    /** 是否支持接入子设备 */
    isSupportAccessToChildDevices!: boolean;
    /** 是否支持远程控制 */
    isSupportRemoteControl!: boolean;
    abilities!: string | undefined;
    id!: number;

    constructor(data?: IUpdateDeviceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.orderNumber = _data["orderNumber"];
            this.mac = _data["mac"];
            this.intranetIP = _data["intranetIP"];
            this.internetIP = _data["internetIP"];
            this.description = _data["description"];
            this.resolution_Width = _data["resolution_Width"];
            this.resolution_Height = _data["resolution_Height"];
            this.os = _data["os"];
            this.address = _data["address"];
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.shutdownTime = _data["shutdownTime"] ? moment(_data["shutdownTime"].toString()) : <any>undefined;
            this.isLocked = _data["isLocked"];
            this.comments = _data["comments"];
            this.onlineTrafficTarget = _data["onlineTrafficTarget"];
            this.outerId = _data["outerId"];
            this.deviceTypeId = _data["deviceTypeId"];
            if (Array.isArray(_data["peripheralIds"])) {
                this.peripheralIds = [] as any;
                for (let item of _data["peripheralIds"])
                    this.peripheralIds!.push(item);
            }
            if (Array.isArray(_data["categoryIds"])) {
                this.categoryIds = [] as any;
                for (let item of _data["categoryIds"])
                    this.categoryIds!.push(item);
            }
            this.hardwareCode = _data["hardwareCode"];
            this.osType = _data["osType"];
            this.isSupportAccessToChildDevices = _data["isSupportAccessToChildDevices"];
            this.isSupportRemoteControl = _data["isSupportRemoteControl"];
            this.abilities = _data["abilities"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UpdateDeviceInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDeviceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["orderNumber"] = this.orderNumber;
        data["mac"] = this.mac;
        data["intranetIP"] = this.intranetIP;
        data["internetIP"] = this.internetIP;
        data["description"] = this.description;
        data["resolution_Width"] = this.resolution_Width;
        data["resolution_Height"] = this.resolution_Height;
        data["os"] = this.os;
        data["address"] = this.address;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["shutdownTime"] = this.shutdownTime ? this.shutdownTime.toISOString() : <any>undefined;
        data["isLocked"] = this.isLocked;
        data["comments"] = this.comments;
        data["onlineTrafficTarget"] = this.onlineTrafficTarget;
        data["outerId"] = this.outerId;
        data["deviceTypeId"] = this.deviceTypeId;
        if (Array.isArray(this.peripheralIds)) {
            data["peripheralIds"] = [];
            for (let item of this.peripheralIds)
                data["peripheralIds"].push(item);
        }
        if (Array.isArray(this.categoryIds)) {
            data["categoryIds"] = [];
            for (let item of this.categoryIds)
                data["categoryIds"].push(item);
        }
        data["hardwareCode"] = this.hardwareCode;
        data["osType"] = this.osType;
        data["isSupportAccessToChildDevices"] = this.isSupportAccessToChildDevices;
        data["isSupportRemoteControl"] = this.isSupportRemoteControl;
        data["abilities"] = this.abilities;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUpdateDeviceInput {
    /** Customize name to understand well. */
    name: string | undefined;
    orderNumber: number;
    /** Device's Mac Address, this is unique in global. */
    mac: string | undefined;
    /** Intranet IP Address. */
    intranetIP: string | undefined;
    /** Internet IP Address. */
    internetIP: string | undefined;
    /** 设备描述, 字数要大于5个字符，小于25000个字符 */
    description: string | undefined;
    /** Device's resolution width. */
    resolution_Width: number | undefined;
    /** Device's resolution height. */
    resolution_Height: number | undefined;
    /** Device's Operate System information. */
    os: string | undefined;
    /** 安装的位置 */
    address: string | undefined;
    /** 一天中，设备正常开机时间. */
    startTime: moment.Moment | undefined;
    /** 一天中，设备正常关机时间. */
    shutdownTime: moment.Moment | undefined;
    /** 是否在锁定状态 */
    isLocked: boolean;
    /** 设备的一些其它相关信息，可记录其中. */
    comments: string | undefined;
    /** 设备默认销售那个电商的商品. */
    onlineTrafficTarget: string | undefined;
    /** 商家设备自定义编号 */
    outerId: string | undefined;
    deviceTypeId: number | undefined;
    peripheralIds: number[] | undefined;
    categoryIds: number[] | undefined;
    hardwareCode: string | undefined;
    osType: OsTypeEnum;
    /** 是否支持接入子设备 */
    isSupportAccessToChildDevices: boolean;
    /** 是否支持远程控制 */
    isSupportRemoteControl: boolean;
    abilities: string | undefined;
    id: number;
}

export class TreeItemDto implements ITreeItemDto {
    text!: string | undefined;
    id!: number;
    type!: string | undefined;
    isSelected!: boolean;
    deviceTypeId!: number | undefined;
    children!: TreeItemDto[] | undefined;

    constructor(data?: ITreeItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            this.id = _data["id"];
            this.type = _data["type"];
            this.isSelected = _data["isSelected"];
            this.deviceTypeId = _data["deviceTypeId"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(TreeItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TreeItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new TreeItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["id"] = this.id;
        data["type"] = this.type;
        data["isSelected"] = this.isSelected;
        data["deviceTypeId"] = this.deviceTypeId;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITreeItemDto {
    text: string | undefined;
    id: number;
    type: string | undefined;
    isSelected: boolean;
    deviceTypeId: number | undefined;
    children: TreeItemDto[] | undefined;
}

export class PublishDeviceInput implements IPublishDeviceInput {
    deviceIds!: number[] | undefined;
    storeId!: number;

    constructor(data?: IPublishDeviceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["deviceIds"])) {
                this.deviceIds = [] as any;
                for (let item of _data["deviceIds"])
                    this.deviceIds!.push(item);
            }
            this.storeId = _data["storeId"];
        }
    }

    static fromJS(data: any): PublishDeviceInput {
        data = typeof data === 'object' ? data : {};
        let result = new PublishDeviceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceIds)) {
            data["deviceIds"] = [];
            for (let item of this.deviceIds)
                data["deviceIds"].push(item);
        }
        data["storeId"] = this.storeId;
        return data; 
    }
}

export interface IPublishDeviceInput {
    deviceIds: number[] | undefined;
    storeId: number;
}

export class RecycleDeviceInput implements IRecycleDeviceInput {
    deviceIds!: number[] | undefined;

    constructor(data?: IRecycleDeviceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["deviceIds"])) {
                this.deviceIds = [] as any;
                for (let item of _data["deviceIds"])
                    this.deviceIds!.push(item);
            }
        }
    }

    static fromJS(data: any): RecycleDeviceInput {
        data = typeof data === 'object' ? data : {};
        let result = new RecycleDeviceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceIds)) {
            data["deviceIds"] = [];
            for (let item of this.deviceIds)
                data["deviceIds"].push(item);
        }
        return data; 
    }
}

export interface IRecycleDeviceInput {
    deviceIds: number[] | undefined;
}

export class DeviceMirrorPublishInput implements IDeviceMirrorPublishInput {
    sourceId!: number;
    targetIds!: number[];
    features!: string[];

    constructor(data?: IDeviceMirrorPublishInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.targetIds = [];
            this.features = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sourceId = _data["sourceId"];
            if (Array.isArray(_data["targetIds"])) {
                this.targetIds = [] as any;
                for (let item of _data["targetIds"])
                    this.targetIds!.push(item);
            }
            if (Array.isArray(_data["features"])) {
                this.features = [] as any;
                for (let item of _data["features"])
                    this.features!.push(item);
            }
        }
    }

    static fromJS(data: any): DeviceMirrorPublishInput {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceMirrorPublishInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sourceId"] = this.sourceId;
        if (Array.isArray(this.targetIds)) {
            data["targetIds"] = [];
            for (let item of this.targetIds)
                data["targetIds"].push(item);
        }
        if (Array.isArray(this.features)) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item);
        }
        return data; 
    }
}

export interface IDeviceMirrorPublishInput {
    sourceId: number;
    targetIds: number[];
    features: string[];
}

export class UpdateThirdDeivceCodeInput implements IUpdateThirdDeivceCodeInput {
    deviceId!: number;
    code!: string | undefined;
    platformType!: ExternalEnum;
    contact!: string | undefined;
    bizType!: string | undefined;
    categoryId!: string | undefined;
    qrCodeExtraInfo!: string | undefined;

    constructor(data?: IUpdateThirdDeivceCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"];
            this.code = _data["code"];
            this.platformType = _data["platformType"];
            this.contact = _data["contact"];
            this.bizType = _data["bizType"];
            this.categoryId = _data["categoryId"];
            this.qrCodeExtraInfo = _data["qrCodeExtraInfo"];
        }
    }

    static fromJS(data: any): UpdateThirdDeivceCodeInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateThirdDeivceCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        data["code"] = this.code;
        data["platformType"] = this.platformType;
        data["contact"] = this.contact;
        data["bizType"] = this.bizType;
        data["categoryId"] = this.categoryId;
        data["qrCodeExtraInfo"] = this.qrCodeExtraInfo;
        return data; 
    }
}

export interface IUpdateThirdDeivceCodeInput {
    deviceId: number;
    code: string | undefined;
    platformType: ExternalEnum;
    contact: string | undefined;
    bizType: string | undefined;
    categoryId: string | undefined;
    qrCodeExtraInfo: string | undefined;
}

export class FileDto implements IFileDto {
    fileName!: string;
    fileType!: string | undefined;
    fileToken!: string;

    constructor(data?: IFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileType = _data["fileType"];
            this.fileToken = _data["fileToken"];
        }
    }

    static fromJS(data: any): FileDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileType"] = this.fileType;
        data["fileToken"] = this.fileToken;
        return data; 
    }
}

export interface IFileDto {
    fileName: string;
    fileType: string | undefined;
    fileToken: string;
}

export enum StoreStatus {
    Stopped = 0,
    Running = 1,
}

export enum StoreType {
    Self_Supporting = 0,
    Join = 1,
}

export class DeviceTypeDtoPagedResultDto implements IDeviceTypeDtoPagedResultDto {
    totalCount!: number;
    items!: DeviceTypeDto[] | undefined;

    constructor(data?: IDeviceTypeDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DeviceTypeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeviceTypeDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceTypeDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDeviceTypeDtoPagedResultDto {
    totalCount: number;
    items: DeviceTypeDto[] | undefined;
}

export class CreateDeviceTypeInput implements ICreateDeviceTypeInput {
    /** 外设的名称 */
    name!: string | undefined;
    /** 外设的小图标 */
    iconUrl!: string | undefined;
    abilities!: string | undefined;
    controlItems!: string | undefined;

    constructor(data?: ICreateDeviceTypeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.iconUrl = _data["iconUrl"];
            this.abilities = _data["abilities"];
            this.controlItems = _data["controlItems"];
        }
    }

    static fromJS(data: any): CreateDeviceTypeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDeviceTypeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["iconUrl"] = this.iconUrl;
        data["abilities"] = this.abilities;
        data["controlItems"] = this.controlItems;
        return data; 
    }
}

export interface ICreateDeviceTypeInput {
    /** 外设的名称 */
    name: string | undefined;
    /** 外设的小图标 */
    iconUrl: string | undefined;
    abilities: string | undefined;
    controlItems: string | undefined;
}

export class UpdateDeviceTypeInput implements IUpdateDeviceTypeInput {
    id!: number;
    /** 外设的名称 */
    name!: string | undefined;
    /** 外设的小图标 */
    iconUrl!: string | undefined;
    abilities!: string | undefined;
    controlItems!: string | undefined;

    constructor(data?: IUpdateDeviceTypeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.iconUrl = _data["iconUrl"];
            this.abilities = _data["abilities"];
            this.controlItems = _data["controlItems"];
        }
    }

    static fromJS(data: any): UpdateDeviceTypeInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDeviceTypeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["iconUrl"] = this.iconUrl;
        data["abilities"] = this.abilities;
        data["controlItems"] = this.controlItems;
        return data; 
    }
}

export interface IUpdateDeviceTypeInput {
    id: number;
    /** 外设的名称 */
    name: string | undefined;
    /** 外设的小图标 */
    iconUrl: string | undefined;
    abilities: string | undefined;
    controlItems: string | undefined;
}

export class NameValueAbilities implements INameValueAbilities {
    abilities!: string | undefined;
    controlItems!: string | undefined;
    name!: string | undefined;
    value!: string | undefined;

    constructor(data?: INameValueAbilities) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.abilities = _data["abilities"];
            this.controlItems = _data["controlItems"];
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): NameValueAbilities {
        data = typeof data === 'object' ? data : {};
        let result = new NameValueAbilities();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["abilities"] = this.abilities;
        data["controlItems"] = this.controlItems;
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface INameValueAbilities {
    abilities: string | undefined;
    controlItems: string | undefined;
    name: string | undefined;
    value: string | undefined;
}

export class NameValueAbilitiesListResultDto implements INameValueAbilitiesListResultDto {
    items!: NameValueAbilities[] | undefined;

    constructor(data?: INameValueAbilitiesListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(NameValueAbilities.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NameValueAbilitiesListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new NameValueAbilitiesListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface INameValueAbilitiesListResultDto {
    items: NameValueAbilities[] | undefined;
}

export class CreateDeviceExtraInput implements ICreateDeviceExtraInput {
    deviceId!: number;
    platformType!: ExternalEnum;
    extraDeviceId!: string | undefined;
    externalAccessTokenInfoId!: number | undefined;

    constructor(data?: ICreateDeviceExtraInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"];
            this.platformType = _data["platformType"];
            this.extraDeviceId = _data["extraDeviceId"];
            this.externalAccessTokenInfoId = _data["externalAccessTokenInfoId"];
        }
    }

    static fromJS(data: any): CreateDeviceExtraInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDeviceExtraInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        data["platformType"] = this.platformType;
        data["extraDeviceId"] = this.extraDeviceId;
        data["externalAccessTokenInfoId"] = this.externalAccessTokenInfoId;
        return data; 
    }
}

export interface ICreateDeviceExtraInput {
    deviceId: number;
    platformType: ExternalEnum;
    extraDeviceId: string | undefined;
    externalAccessTokenInfoId: number | undefined;
}

export class DeviceExtraDto implements IDeviceExtraDto {
    tenantId!: number;
    deviceId!: number;
    deviceName!: string | undefined;
    platformType!: ExternalEnum;
    extraDeviceId!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IDeviceExtraDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.deviceId = _data["deviceId"];
            this.deviceName = _data["deviceName"];
            this.platformType = _data["platformType"];
            this.extraDeviceId = _data["extraDeviceId"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeviceExtraDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceExtraDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["deviceId"] = this.deviceId;
        data["deviceName"] = this.deviceName;
        data["platformType"] = this.platformType;
        data["extraDeviceId"] = this.extraDeviceId;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IDeviceExtraDto {
    tenantId: number;
    deviceId: number;
    deviceName: string | undefined;
    platformType: ExternalEnum;
    extraDeviceId: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class UpdateDeviceExtraInput implements IUpdateDeviceExtraInput {
    id!: number;
    deviceId!: number;
    platformType!: ExternalEnum;
    extraDeviceId!: string | undefined;
    externalAccessTokenInfoId!: number | undefined;

    constructor(data?: IUpdateDeviceExtraInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deviceId = _data["deviceId"];
            this.platformType = _data["platformType"];
            this.extraDeviceId = _data["extraDeviceId"];
            this.externalAccessTokenInfoId = _data["externalAccessTokenInfoId"];
        }
    }

    static fromJS(data: any): UpdateDeviceExtraInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDeviceExtraInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deviceId"] = this.deviceId;
        data["platformType"] = this.platformType;
        data["extraDeviceId"] = this.extraDeviceId;
        data["externalAccessTokenInfoId"] = this.externalAccessTokenInfoId;
        return data; 
    }
}

export interface IUpdateDeviceExtraInput {
    id: number;
    deviceId: number;
    platformType: ExternalEnum;
    extraDeviceId: string | undefined;
    externalAccessTokenInfoId: number | undefined;
}

export class DeviceExtraDtoPagedResultDto implements IDeviceExtraDtoPagedResultDto {
    totalCount!: number;
    items!: DeviceExtraDto[] | undefined;

    constructor(data?: IDeviceExtraDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DeviceExtraDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeviceExtraDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceExtraDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDeviceExtraDtoPagedResultDto {
    totalCount: number;
    items: DeviceExtraDto[] | undefined;
}

export class DevicesActionInput implements IDevicesActionInput {
    /** 被控制设备的Id编号数组 */
    deviceIds!: number[];
    /** 设备控制命令:
shutdown-pc, restart-pc.
close-container,update-resource,snapshot
switch-app,restart-app,close-app.
show-product, show-sku */
    actionName!: string;
    appId!: string | undefined;
    /** 业务数据内容 */
    actionContent!: string | undefined;

    constructor(data?: IDevicesActionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.deviceIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["deviceIds"])) {
                this.deviceIds = [] as any;
                for (let item of _data["deviceIds"])
                    this.deviceIds!.push(item);
            }
            this.actionName = _data["actionName"];
            this.appId = _data["appId"];
            this.actionContent = _data["actionContent"];
        }
    }

    static fromJS(data: any): DevicesActionInput {
        data = typeof data === 'object' ? data : {};
        let result = new DevicesActionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceIds)) {
            data["deviceIds"] = [];
            for (let item of this.deviceIds)
                data["deviceIds"].push(item);
        }
        data["actionName"] = this.actionName;
        data["appId"] = this.appId;
        data["actionContent"] = this.actionContent;
        return data; 
    }
}

export interface IDevicesActionInput {
    /** 被控制设备的Id编号数组 */
    deviceIds: number[];
    /** 设备控制命令:
shutdown-pc, restart-pc.
close-container,update-resource,snapshot
switch-app,restart-app,close-app.
show-product, show-sku */
    actionName: string;
    appId: string | undefined;
    /** 业务数据内容 */
    actionContent: string | undefined;
}

export class DevicesActionInputWithSubkey implements IDevicesActionInputWithSubkey {
    actionName!: string;
    subKey!: string | undefined;
    from!: string | undefined;
    actionContent!: string | undefined;

    constructor(data?: IDevicesActionInputWithSubkey) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionName = _data["actionName"];
            this.subKey = _data["subKey"];
            this.from = _data["from"];
            this.actionContent = _data["actionContent"];
        }
    }

    static fromJS(data: any): DevicesActionInputWithSubkey {
        data = typeof data === 'object' ? data : {};
        let result = new DevicesActionInputWithSubkey();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionName"] = this.actionName;
        data["subKey"] = this.subKey;
        data["from"] = this.from;
        data["actionContent"] = this.actionContent;
        return data; 
    }
}

export interface IDevicesActionInputWithSubkey {
    actionName: string;
    subKey: string | undefined;
    from: string | undefined;
    actionContent: string | undefined;
}

export class DeviceStatusEventInput implements IDeviceStatusEventInput {
    action!: string | undefined;
    status!: string | undefined;
    deviceId!: string | undefined;

    constructor(data?: IDeviceStatusEventInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.action = _data["action"];
            this.status = _data["status"];
            this.deviceId = _data["deviceId"];
        }
    }

    static fromJS(data: any): DeviceStatusEventInput {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceStatusEventInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["action"] = this.action;
        data["status"] = this.status;
        data["deviceId"] = this.deviceId;
        return data; 
    }
}

export interface IDeviceStatusEventInput {
    action: string | undefined;
    status: string | undefined;
    deviceId: string | undefined;
}

export class PeripheralDtoPagedResultDto implements IPeripheralDtoPagedResultDto {
    totalCount!: number;
    items!: PeripheralDto[] | undefined;

    constructor(data?: IPeripheralDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PeripheralDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PeripheralDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new PeripheralDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPeripheralDtoPagedResultDto {
    totalCount: number;
    items: PeripheralDto[] | undefined;
}

export class CreatePeripheralInput implements ICreatePeripheralInput {
    /** 外设的名称 */
    name!: string | undefined;
    /** 外设的小图标 */
    iconUrl!: string | undefined;

    constructor(data?: ICreatePeripheralInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.iconUrl = _data["iconUrl"];
        }
    }

    static fromJS(data: any): CreatePeripheralInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePeripheralInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["iconUrl"] = this.iconUrl;
        return data; 
    }
}

export interface ICreatePeripheralInput {
    /** 外设的名称 */
    name: string | undefined;
    /** 外设的小图标 */
    iconUrl: string | undefined;
}

export class UpdatePeripheralInput implements IUpdatePeripheralInput {
    id!: number;
    /** 外设的名称 */
    name!: string | undefined;
    /** 外设的小图标 */
    iconUrl!: string | undefined;

    constructor(data?: IUpdatePeripheralInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.iconUrl = _data["iconUrl"];
        }
    }

    static fromJS(data: any): UpdatePeripheralInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePeripheralInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["iconUrl"] = this.iconUrl;
        return data; 
    }
}

export interface IUpdatePeripheralInput {
    id: number;
    /** 外设的名称 */
    name: string | undefined;
    /** 外设的小图标 */
    iconUrl: string | undefined;
}

export class Int32SelectDto implements IInt32SelectDto {
    selectKey!: number;
    selectValue!: string | undefined;

    constructor(data?: IInt32SelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.selectKey = _data["selectKey"];
            this.selectValue = _data["selectValue"];
        }
    }

    static fromJS(data: any): Int32SelectDto {
        data = typeof data === 'object' ? data : {};
        let result = new Int32SelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["selectKey"] = this.selectKey;
        data["selectValue"] = this.selectValue;
        return data; 
    }
}

export interface IInt32SelectDto {
    selectKey: number;
    selectValue: string | undefined;
}

export class AddSmartStoreDeviceToExtraPlatformInput implements IAddSmartStoreDeviceToExtraPlatformInput {
    deviceId!: number;
    platformType!: ExternalEnum;
    contact!: string | undefined;
    bizType!: string | undefined;
    categoryId!: string | undefined;
    qrCodeExtraInfo!: string | undefined;
    externalAccessTokenInfoId!: number | undefined;

    constructor(data?: IAddSmartStoreDeviceToExtraPlatformInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"];
            this.platformType = _data["platformType"];
            this.contact = _data["contact"];
            this.bizType = _data["bizType"];
            this.categoryId = _data["categoryId"];
            this.qrCodeExtraInfo = _data["qrCodeExtraInfo"];
            this.externalAccessTokenInfoId = _data["externalAccessTokenInfoId"];
        }
    }

    static fromJS(data: any): AddSmartStoreDeviceToExtraPlatformInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddSmartStoreDeviceToExtraPlatformInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        data["platformType"] = this.platformType;
        data["contact"] = this.contact;
        data["bizType"] = this.bizType;
        data["categoryId"] = this.categoryId;
        data["qrCodeExtraInfo"] = this.qrCodeExtraInfo;
        data["externalAccessTokenInfoId"] = this.externalAccessTokenInfoId;
        return data; 
    }
}

export interface IAddSmartStoreDeviceToExtraPlatformInput {
    deviceId: number;
    platformType: ExternalEnum;
    contact: string | undefined;
    bizType: string | undefined;
    categoryId: string | undefined;
    qrCodeExtraInfo: string | undefined;
    externalAccessTokenInfoId: number | undefined;
}

export class ExtraPlatformDeviceDto implements IExtraPlatformDeviceDto {
    platformType!: ExternalEnum;
    extraStoreId!: string | undefined;
    contact!: string | undefined;
    bizType!: string | undefined;
    categoryId!: string | undefined;
    qrCodeExtraInfo!: string | undefined;
    extraDeviceId!: string | undefined;
    extraRegistTime!: moment.Moment;

    constructor(data?: IExtraPlatformDeviceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.platformType = _data["platformType"];
            this.extraStoreId = _data["extraStoreId"];
            this.contact = _data["contact"];
            this.bizType = _data["bizType"];
            this.categoryId = _data["categoryId"];
            this.qrCodeExtraInfo = _data["qrCodeExtraInfo"];
            this.extraDeviceId = _data["extraDeviceId"];
            this.extraRegistTime = _data["extraRegistTime"] ? moment(_data["extraRegistTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ExtraPlatformDeviceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExtraPlatformDeviceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["platformType"] = this.platformType;
        data["extraStoreId"] = this.extraStoreId;
        data["contact"] = this.contact;
        data["bizType"] = this.bizType;
        data["categoryId"] = this.categoryId;
        data["qrCodeExtraInfo"] = this.qrCodeExtraInfo;
        data["extraDeviceId"] = this.extraDeviceId;
        data["extraRegistTime"] = this.extraRegistTime ? this.extraRegistTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IExtraPlatformDeviceDto {
    platformType: ExternalEnum;
    extraStoreId: string | undefined;
    contact: string | undefined;
    bizType: string | undefined;
    categoryId: string | undefined;
    qrCodeExtraInfo: string | undefined;
    extraDeviceId: string | undefined;
    extraRegistTime: moment.Moment;
}

/** 单个设备控制的数据结构 */
export class DeviceActionInput implements IDeviceActionInput {
    /** 被控制设备的Id编号 */
    deviceId!: number;
    /** 设备控制命令:
shutdown-pc, restart-pc.
close-container,update-resource,snapshot
switch-app,restart-app,close-app. */
    actionName!: string;
    appId!: string | undefined;
    /** 业务数据内容 */
    actionContent!: string | undefined;

    constructor(data?: IDeviceActionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"];
            this.actionName = _data["actionName"];
            this.appId = _data["appId"];
            this.actionContent = _data["actionContent"];
        }
    }

    static fromJS(data: any): DeviceActionInput {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceActionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        data["actionName"] = this.actionName;
        data["appId"] = this.appId;
        data["actionContent"] = this.actionContent;
        return data; 
    }
}

/** 单个设备控制的数据结构 */
export interface IDeviceActionInput {
    /** 被控制设备的Id编号 */
    deviceId: number;
    /** 设备控制命令:
shutdown-pc, restart-pc.
close-container,update-resource,snapshot
switch-app,restart-app,close-app. */
    actionName: string;
    appId: string | undefined;
    /** 业务数据内容 */
    actionContent: string | undefined;
}

export class AddOrUpdateSnsUserInfoInput implements IAddOrUpdateSnsUserInfoInput {
    subKey!: string | undefined;
    snsAppID!: string | undefined;
    subscribe!: number | undefined;
    openid!: string | undefined;
    nickname!: string | undefined;
    sex!: number | undefined;
    language!: string | undefined;
    city!: string | undefined;
    province!: string | undefined;
    country!: string | undefined;
    headimgurl!: string | undefined;
    subscribeTime!: moment.Moment | undefined;
    unSubScribeTime!: moment.Moment | undefined;
    unionid!: string | undefined;
    name!: string | undefined;
    phone!: string | undefined;
    identityID!: string | undefined;
    gameName!: string | undefined;
    score!: string | undefined;

    constructor(data?: IAddOrUpdateSnsUserInfoInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subKey = _data["subKey"];
            this.snsAppID = _data["snsAppID"];
            this.subscribe = _data["subscribe"];
            this.openid = _data["openid"];
            this.nickname = _data["nickname"];
            this.sex = _data["sex"];
            this.language = _data["language"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.country = _data["country"];
            this.headimgurl = _data["headimgurl"];
            this.subscribeTime = _data["subscribeTime"] ? moment(_data["subscribeTime"].toString()) : <any>undefined;
            this.unSubScribeTime = _data["unSubScribeTime"] ? moment(_data["unSubScribeTime"].toString()) : <any>undefined;
            this.unionid = _data["unionid"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.identityID = _data["identityID"];
            this.gameName = _data["gameName"];
            this.score = _data["score"];
        }
    }

    static fromJS(data: any): AddOrUpdateSnsUserInfoInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateSnsUserInfoInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subKey"] = this.subKey;
        data["snsAppID"] = this.snsAppID;
        data["subscribe"] = this.subscribe;
        data["openid"] = this.openid;
        data["nickname"] = this.nickname;
        data["sex"] = this.sex;
        data["language"] = this.language;
        data["city"] = this.city;
        data["province"] = this.province;
        data["country"] = this.country;
        data["headimgurl"] = this.headimgurl;
        data["subscribeTime"] = this.subscribeTime ? this.subscribeTime.toISOString() : <any>undefined;
        data["unSubScribeTime"] = this.unSubScribeTime ? this.unSubScribeTime.toISOString() : <any>undefined;
        data["unionid"] = this.unionid;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["identityID"] = this.identityID;
        data["gameName"] = this.gameName;
        data["score"] = this.score;
        return data; 
    }
}

export interface IAddOrUpdateSnsUserInfoInput {
    subKey: string | undefined;
    snsAppID: string | undefined;
    subscribe: number | undefined;
    openid: string | undefined;
    nickname: string | undefined;
    sex: number | undefined;
    language: string | undefined;
    city: string | undefined;
    province: string | undefined;
    country: string | undefined;
    headimgurl: string | undefined;
    subscribeTime: moment.Moment | undefined;
    unSubScribeTime: moment.Moment | undefined;
    unionid: string | undefined;
    name: string | undefined;
    phone: string | undefined;
    identityID: string | undefined;
    gameName: string | undefined;
    score: string | undefined;
}

export class PostPlayerDataInfoInput implements IPostPlayerDataInfoInput {
    snsUserInfo!: AddOrUpdateSnsUserInfoInput;
    message!: string | undefined;

    constructor(data?: IPostPlayerDataInfoInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.snsUserInfo = _data["snsUserInfo"] ? AddOrUpdateSnsUserInfoInput.fromJS(_data["snsUserInfo"]) : <any>undefined;
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): PostPlayerDataInfoInput {
        data = typeof data === 'object' ? data : {};
        let result = new PostPlayerDataInfoInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["snsUserInfo"] = this.snsUserInfo ? this.snsUserInfo.toJSON() : <any>undefined;
        data["message"] = this.message;
        return data; 
    }
}

export interface IPostPlayerDataInfoInput {
    snsUserInfo: AddOrUpdateSnsUserInfoInput;
    message: string | undefined;
}

export class DeviceCategoryDto implements IDeviceCategoryDto {
    tenantId!: number;
    organizationUnitId!: number | undefined;
    name!: string | undefined;
    iconUrl!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IDeviceCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.name = _data["name"];
            this.iconUrl = _data["iconUrl"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeviceCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["organizationUnitId"] = this.organizationUnitId;
        data["name"] = this.name;
        data["iconUrl"] = this.iconUrl;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IDeviceCategoryDto {
    tenantId: number;
    organizationUnitId: number | undefined;
    name: string | undefined;
    iconUrl: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class DeviceCategoryDtoPagedResultDto implements IDeviceCategoryDtoPagedResultDto {
    totalCount!: number;
    items!: DeviceCategoryDto[] | undefined;

    constructor(data?: IDeviceCategoryDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DeviceCategoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeviceCategoryDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceCategoryDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDeviceCategoryDtoPagedResultDto {
    totalCount: number;
    items: DeviceCategoryDto[] | undefined;
}

export class CreateDeviceCategoryInput implements ICreateDeviceCategoryInput {
    /** 外设的名称 */
    name!: string | undefined;
    /** 外设的小图标 */
    iconUrl!: string | undefined;

    constructor(data?: ICreateDeviceCategoryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.iconUrl = _data["iconUrl"];
        }
    }

    static fromJS(data: any): CreateDeviceCategoryInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDeviceCategoryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["iconUrl"] = this.iconUrl;
        return data; 
    }
}

export interface ICreateDeviceCategoryInput {
    /** 外设的名称 */
    name: string | undefined;
    /** 外设的小图标 */
    iconUrl: string | undefined;
}

export class UpdateDeviceCategoryInput implements IUpdateDeviceCategoryInput {
    id!: number;
    /** 外设的名称 */
    name!: string | undefined;
    /** 外设的小图标 */
    iconUrl!: string | undefined;

    constructor(data?: IUpdateDeviceCategoryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.iconUrl = _data["iconUrl"];
        }
    }

    static fromJS(data: any): UpdateDeviceCategoryInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDeviceCategoryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["iconUrl"] = this.iconUrl;
        return data; 
    }
}

export interface IUpdateDeviceCategoryInput {
    id: number;
    /** 外设的名称 */
    name: string | undefined;
    /** 外设的小图标 */
    iconUrl: string | undefined;
}

export class ImportDeviceResultDto implements IImportDeviceResultDto {
    importResult!: string | undefined;
    canNotFindImages!: string[] | undefined;
    canNotFindSpus!: string[] | undefined;
    canNotFindSkus!: string[] | undefined;
    succeedCode!: string[] | undefined;
    importState!: boolean;

    constructor(data?: IImportDeviceResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.importResult = _data["importResult"];
            if (Array.isArray(_data["canNotFindImages"])) {
                this.canNotFindImages = [] as any;
                for (let item of _data["canNotFindImages"])
                    this.canNotFindImages!.push(item);
            }
            if (Array.isArray(_data["canNotFindSpus"])) {
                this.canNotFindSpus = [] as any;
                for (let item of _data["canNotFindSpus"])
                    this.canNotFindSpus!.push(item);
            }
            if (Array.isArray(_data["canNotFindSkus"])) {
                this.canNotFindSkus = [] as any;
                for (let item of _data["canNotFindSkus"])
                    this.canNotFindSkus!.push(item);
            }
            if (Array.isArray(_data["succeedCode"])) {
                this.succeedCode = [] as any;
                for (let item of _data["succeedCode"])
                    this.succeedCode!.push(item);
            }
            this.importState = _data["importState"];
        }
    }

    static fromJS(data: any): ImportDeviceResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ImportDeviceResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["importResult"] = this.importResult;
        if (Array.isArray(this.canNotFindImages)) {
            data["canNotFindImages"] = [];
            for (let item of this.canNotFindImages)
                data["canNotFindImages"].push(item);
        }
        if (Array.isArray(this.canNotFindSpus)) {
            data["canNotFindSpus"] = [];
            for (let item of this.canNotFindSpus)
                data["canNotFindSpus"].push(item);
        }
        if (Array.isArray(this.canNotFindSkus)) {
            data["canNotFindSkus"] = [];
            for (let item of this.canNotFindSkus)
                data["canNotFindSkus"].push(item);
        }
        if (Array.isArray(this.succeedCode)) {
            data["succeedCode"] = [];
            for (let item of this.succeedCode)
                data["succeedCode"].push(item);
        }
        data["importState"] = this.importState;
        return data; 
    }
}

export interface IImportDeviceResultDto {
    importResult: string | undefined;
    canNotFindImages: string[] | undefined;
    canNotFindSpus: string[] | undefined;
    canNotFindSkus: string[] | undefined;
    succeedCode: string[] | undefined;
    importState: boolean;
}

export class PositionDto implements IPositionDto {
    id!: number | undefined;
    state!: string | undefined;
    area!: string | undefined;
    /** 省份 */
    province!: string | undefined;
    /** 城市 */
    city!: string | undefined;
    /** 县区 */
    county!: string | undefined;
    /** 详细地址 */
    location!: string | undefined;
    longitude!: number | undefined;
    /** 纬度 */
    latitude!: number | undefined;
    code!: string | undefined;
    zipCode!: string | undefined;

    constructor(data?: IPositionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.state = _data["state"];
            this.area = _data["area"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.county = _data["county"];
            this.location = _data["location"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
            this.code = _data["code"];
            this.zipCode = _data["zipCode"];
        }
    }

    static fromJS(data: any): PositionDto {
        data = typeof data === 'object' ? data : {};
        let result = new PositionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["state"] = this.state;
        data["area"] = this.area;
        data["province"] = this.province;
        data["city"] = this.city;
        data["county"] = this.county;
        data["location"] = this.location;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["code"] = this.code;
        data["zipCode"] = this.zipCode;
        return data; 
    }
}

export interface IPositionDto {
    id: number | undefined;
    state: string | undefined;
    area: string | undefined;
    /** 省份 */
    province: string | undefined;
    /** 城市 */
    city: string | undefined;
    /** 县区 */
    county: string | undefined;
    /** 详细地址 */
    location: string | undefined;
    longitude: number | undefined;
    /** 纬度 */
    latitude: number | undefined;
    code: string | undefined;
    zipCode: string | undefined;
}

export class StoreDto implements IStoreDto {
    outerId!: string | undefined;
    displayName!: string | undefined;
    openingTime!: moment.Moment | undefined;
    closedTime!: moment.Moment | undefined;
    qrCodeExtraInfo!: string | undefined;
    taobaoStoreId!: string | undefined;
    bizType!: string | undefined;
    position!: PositionDto;

    constructor(data?: IStoreDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.outerId = _data["outerId"];
            this.displayName = _data["displayName"];
            this.openingTime = _data["openingTime"] ? moment(_data["openingTime"].toString()) : <any>undefined;
            this.closedTime = _data["closedTime"] ? moment(_data["closedTime"].toString()) : <any>undefined;
            this.qrCodeExtraInfo = _data["qrCodeExtraInfo"];
            this.taobaoStoreId = _data["taobaoStoreId"];
            this.bizType = _data["bizType"];
            this.position = _data["position"] ? PositionDto.fromJS(_data["position"]) : <any>undefined;
        }
    }

    static fromJS(data: any): StoreDto {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outerId"] = this.outerId;
        data["displayName"] = this.displayName;
        data["openingTime"] = this.openingTime ? this.openingTime.toISOString() : <any>undefined;
        data["closedTime"] = this.closedTime ? this.closedTime.toISOString() : <any>undefined;
        data["qrCodeExtraInfo"] = this.qrCodeExtraInfo;
        data["taobaoStoreId"] = this.taobaoStoreId;
        data["bizType"] = this.bizType;
        data["position"] = this.position ? this.position.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IStoreDto {
    outerId: string | undefined;
    displayName: string | undefined;
    openingTime: moment.Moment | undefined;
    closedTime: moment.Moment | undefined;
    qrCodeExtraInfo: string | undefined;
    taobaoStoreId: string | undefined;
    bizType: string | undefined;
    position: PositionDto;
}

export class StoreDtoPagedResultDto implements IStoreDtoPagedResultDto {
    totalCount!: number;
    items!: StoreDto[] | undefined;

    constructor(data?: IStoreDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(StoreDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StoreDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStoreDtoPagedResultDto {
    totalCount: number;
    items: StoreDto[] | undefined;
}

export class Int64TreeDto implements IInt64TreeDto {
    text!: string | undefined;
    id!: number;
    type!: string | undefined;
    isSelected!: boolean;
    children!: Int64TreeDto[] | undefined;
    outerId!: string | undefined;

    constructor(data?: IInt64TreeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            this.id = _data["id"];
            this.type = _data["type"];
            this.isSelected = _data["isSelected"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(Int64TreeDto.fromJS(item));
            }
            this.outerId = _data["outerId"];
        }
    }

    static fromJS(data: any): Int64TreeDto {
        data = typeof data === 'object' ? data : {};
        let result = new Int64TreeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["id"] = this.id;
        data["type"] = this.type;
        data["isSelected"] = this.isSelected;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        data["outerId"] = this.outerId;
        return data; 
    }
}

export interface IInt64TreeDto {
    text: string | undefined;
    id: number;
    type: string | undefined;
    isSelected: boolean;
    children: Int64TreeDto[] | undefined;
    outerId: string | undefined;
}

export enum GroupKPIScaleEnum {
    Year = 0,
    Month = 1,
    Week = 2,
    Day = 3,
}

export class OrganizationUnitKPIDto implements IOrganizationUnitKPIDto {
    organizationUnitId!: number | undefined;
    ouName!: string | undefined;
    ouOuterId!: string | undefined;
    scaleTime!: moment.Moment;
    kpiScale!: GroupKPIScaleEnum;
    /** 考核内容 :点击数，销售额 */
    name!: string | undefined;
    value!: number;
    description!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IOrganizationUnitKPIDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationUnitId = _data["organizationUnitId"];
            this.ouName = _data["ouName"];
            this.ouOuterId = _data["ouOuterId"];
            this.scaleTime = _data["scaleTime"] ? moment(_data["scaleTime"].toString()) : <any>undefined;
            this.kpiScale = _data["kpiScale"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.description = _data["description"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitKPIDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitKPIDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["ouName"] = this.ouName;
        data["ouOuterId"] = this.ouOuterId;
        data["scaleTime"] = this.scaleTime ? this.scaleTime.toISOString() : <any>undefined;
        data["kpiScale"] = this.kpiScale;
        data["name"] = this.name;
        data["value"] = this.value;
        data["description"] = this.description;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrganizationUnitKPIDto {
    organizationUnitId: number | undefined;
    ouName: string | undefined;
    ouOuterId: string | undefined;
    scaleTime: moment.Moment;
    kpiScale: GroupKPIScaleEnum;
    /** 考核内容 :点击数，销售额 */
    name: string | undefined;
    value: number;
    description: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class OrganizationUnitKPIDtoPagedResultDto implements IOrganizationUnitKPIDtoPagedResultDto {
    totalCount!: number;
    items!: OrganizationUnitKPIDto[] | undefined;

    constructor(data?: IOrganizationUnitKPIDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrganizationUnitKPIDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrganizationUnitKPIDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitKPIDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrganizationUnitKPIDtoPagedResultDto {
    totalCount: number;
    items: OrganizationUnitKPIDto[] | undefined;
}

/** 新增组织架构KPI */
export class CreateOUKpiDtoInput implements ICreateOUKpiDtoInput {
    /** 所属的组织 Id */
    organizationUnitId!: number | undefined;
    /** 考核时间 */
    scaleTime!: string | undefined;
    kpiScale!: GroupKPIScaleEnum;
    /** 考核内容 :点击数，销售额 */
    name!: string | undefined;
    /** 考核结果 */
    value!: number;
    /** 描述 */
    description!: string | undefined;

    constructor(data?: ICreateOUKpiDtoInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationUnitId = _data["organizationUnitId"];
            this.scaleTime = _data["scaleTime"];
            this.kpiScale = _data["kpiScale"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateOUKpiDtoInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOUKpiDtoInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["scaleTime"] = this.scaleTime;
        data["kpiScale"] = this.kpiScale;
        data["name"] = this.name;
        data["value"] = this.value;
        data["description"] = this.description;
        return data; 
    }
}

/** 新增组织架构KPI */
export interface ICreateOUKpiDtoInput {
    /** 所属的组织 Id */
    organizationUnitId: number | undefined;
    /** 考核时间 */
    scaleTime: string | undefined;
    kpiScale: GroupKPIScaleEnum;
    /** 考核内容 :点击数，销售额 */
    name: string | undefined;
    /** 考核结果 */
    value: number;
    /** 描述 */
    description: string | undefined;
}

/** 更新组织架构KPI的对象 */
export class UpdateOUKpiDtoInput implements IUpdateOUKpiDtoInput {
    /** 组织架构下KPI的唯一Id */
    id!: number;
    /** 所属的组织 Id */
    organizationUnitId!: number | undefined;
    /** 考核时间 */
    scaleTime!: string | undefined;
    kpiScale!: GroupKPIScaleEnum;
    /** 考核内容 :点击数，销售额 */
    name!: string | undefined;
    /** 考核结果 */
    value!: number;
    /** 描述 */
    description!: string | undefined;

    constructor(data?: IUpdateOUKpiDtoInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.scaleTime = _data["scaleTime"];
            this.kpiScale = _data["kpiScale"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateOUKpiDtoInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateOUKpiDtoInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["scaleTime"] = this.scaleTime;
        data["kpiScale"] = this.kpiScale;
        data["name"] = this.name;
        data["value"] = this.value;
        data["description"] = this.description;
        return data; 
    }
}

/** 更新组织架构KPI的对象 */
export interface IUpdateOUKpiDtoInput {
    /** 组织架构下KPI的唯一Id */
    id: number;
    /** 所属的组织 Id */
    organizationUnitId: number | undefined;
    /** 考核时间 */
    scaleTime: string | undefined;
    kpiScale: GroupKPIScaleEnum;
    /** 考核内容 :点击数，销售额 */
    name: string | undefined;
    /** 考核结果 */
    value: number;
    /** 描述 */
    description: string | undefined;
}

export class IdTypeDto implements IIdTypeDto {
    id!: number;
    type!: string | undefined;

    constructor(data?: IIdTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): IdTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        return data; 
    }
}

export interface IIdTypeDto {
    id: number;
    type: string | undefined;
}

export class GetCountReportInput implements IGetCountReportInput {
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    storeOrOuList!: IdTypeDto[] | undefined;
    /** store,device, */
    filter!: string | undefined;

    constructor(data?: IGetCountReportInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? moment(_data["endTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["storeOrOuList"])) {
                this.storeOrOuList = [] as any;
                for (let item of _data["storeOrOuList"])
                    this.storeOrOuList!.push(IdTypeDto.fromJS(item));
            }
            this.filter = _data["filter"];
        }
    }

    static fromJS(data: any): GetCountReportInput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCountReportInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        if (Array.isArray(this.storeOrOuList)) {
            data["storeOrOuList"] = [];
            for (let item of this.storeOrOuList)
                data["storeOrOuList"].push(item.toJSON());
        }
        data["filter"] = this.filter;
        return data; 
    }
}

export interface IGetCountReportInput {
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    storeOrOuList: IdTypeDto[] | undefined;
    /** store,device, */
    filter: string | undefined;
}

export class NameCountDto implements INameCountDto {
    name!: string | undefined;
    count!: number;

    constructor(data?: INameCountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): NameCountDto {
        data = typeof data === 'object' ? data : {};
        let result = new NameCountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        return data; 
    }
}

export interface INameCountDto {
    name: string | undefined;
    count: number;
}

/** 注册设备 */
export class RegisterDeviceInput implements IRegisterDeviceInput {
    /** 设备名称 */
    name!: string | undefined;
    /** Ip */
    intranetIP!: string | undefined;
    internetIP!: string | undefined;
    /** Mac地址 */
    mac!: string | undefined;
    /** 地址 */
    address!: string | undefined;
    /** 设备类型ID */
    deviceTypeId!: number;
    /** License的信息 */
    licenseInfo!: string | undefined;
    /** 硬件编号 */
    hardwareCode!: string | undefined;
    /** 设备长度 */
    resolution_Width!: number;
    /** 设备高度 */
    resolution_Height!: number;
    /** 操作系统 */
    os!: string | undefined;

    constructor(data?: IRegisterDeviceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.intranetIP = _data["intranetIP"];
            this.internetIP = _data["internetIP"];
            this.mac = _data["mac"];
            this.address = _data["address"];
            this.deviceTypeId = _data["deviceTypeId"];
            this.licenseInfo = _data["licenseInfo"];
            this.hardwareCode = _data["hardwareCode"];
            this.resolution_Width = _data["resolution_Width"];
            this.resolution_Height = _data["resolution_Height"];
            this.os = _data["os"];
        }
    }

    static fromJS(data: any): RegisterDeviceInput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDeviceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["intranetIP"] = this.intranetIP;
        data["internetIP"] = this.internetIP;
        data["mac"] = this.mac;
        data["address"] = this.address;
        data["deviceTypeId"] = this.deviceTypeId;
        data["licenseInfo"] = this.licenseInfo;
        data["hardwareCode"] = this.hardwareCode;
        data["resolution_Width"] = this.resolution_Width;
        data["resolution_Height"] = this.resolution_Height;
        data["os"] = this.os;
        return data; 
    }
}

/** 注册设备 */
export interface IRegisterDeviceInput {
    /** 设备名称 */
    name: string | undefined;
    /** Ip */
    intranetIP: string | undefined;
    internetIP: string | undefined;
    /** Mac地址 */
    mac: string | undefined;
    /** 地址 */
    address: string | undefined;
    /** 设备类型ID */
    deviceTypeId: number;
    /** License的信息 */
    licenseInfo: string | undefined;
    /** 硬件编号 */
    hardwareCode: string | undefined;
    /** 设备长度 */
    resolution_Width: number;
    /** 设备高度 */
    resolution_Height: number;
    /** 操作系统 */
    os: string | undefined;
}

export class DeviceExtraOutput implements IDeviceExtraOutput {
    platformType!: ExternalEnum;
    /** 其它平台店铺的Id，如淘宝线下门店的StoreId */
    extraDeviceId!: string | undefined;

    constructor(data?: IDeviceExtraOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.platformType = _data["platformType"];
            this.extraDeviceId = _data["extraDeviceId"];
        }
    }

    static fromJS(data: any): DeviceExtraOutput {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceExtraOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["platformType"] = this.platformType;
        data["extraDeviceId"] = this.extraDeviceId;
        return data; 
    }
}

export interface IDeviceExtraOutput {
    platformType: ExternalEnum;
    /** 其它平台店铺的Id，如淘宝线下门店的StoreId */
    extraDeviceId: string | undefined;
}

export class DeviceOutput implements IDeviceOutput {
    id!: number;
    name!: string | undefined;
    mac!: string | undefined;
    operatingType!: OperatingType;
    isLocked!: boolean;
    deviceTypeName!: string | undefined;
    address!: string | undefined;
    intranetIP!: string | undefined;
    internetIP!: string | undefined;
    description!: string | undefined;
    /** 设备是否已被注册，如果已注册，另外的机器不能再注册. 同时管理员可以清空，允许其它设备进行注册. */
    isRegistered!: boolean;
    licenseInfo!: string | undefined;
    hardwareCode!: string | undefined;
    shutdownTime!: moment.Moment | undefined;
    resolution_Width!: number;
    resolution_Height!: number;
    /** 访问此设备的唯一凭证，通过Subkey可调用平台api，拿到设备相关的信息，如,ads,apps,products等.同时可用户注册. */
    subKey!: string | undefined;
    os!: string | undefined;
    onlineTrafficTarget!: string | undefined;
    tenantName!: string | undefined;
    tenantId!: number;
    organizationUnitName!: string | undefined;
    organizationUnitId!: number;
    storeId!: number;
    storeOuterId!: string | undefined;
    storeName!: string | undefined;
    outType!: string | undefined;
    taobaoDeviceId!: string | undefined;
    deviceOuterId!: string | undefined;
    osType!: OsTypeEnum;
    extras!: DeviceExtraOutput[] | undefined;
    shopUrl!: string | undefined;

    constructor(data?: IDeviceOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.mac = _data["mac"];
            this.operatingType = _data["operatingType"];
            this.isLocked = _data["isLocked"];
            this.deviceTypeName = _data["deviceTypeName"];
            this.address = _data["address"];
            this.intranetIP = _data["intranetIP"];
            this.internetIP = _data["internetIP"];
            this.description = _data["description"];
            this.isRegistered = _data["isRegistered"];
            this.licenseInfo = _data["licenseInfo"];
            this.hardwareCode = _data["hardwareCode"];
            this.shutdownTime = _data["shutdownTime"] ? moment(_data["shutdownTime"].toString()) : <any>undefined;
            this.resolution_Width = _data["resolution_Width"];
            this.resolution_Height = _data["resolution_Height"];
            this.subKey = _data["subKey"];
            this.os = _data["os"];
            this.onlineTrafficTarget = _data["onlineTrafficTarget"];
            this.tenantName = _data["tenantName"];
            this.tenantId = _data["tenantId"];
            this.organizationUnitName = _data["organizationUnitName"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.storeId = _data["storeId"];
            this.storeOuterId = _data["storeOuterId"];
            this.storeName = _data["storeName"];
            this.outType = _data["outType"];
            this.taobaoDeviceId = _data["taobaoDeviceId"];
            this.deviceOuterId = _data["deviceOuterId"];
            this.osType = _data["osType"];
            if (Array.isArray(_data["extras"])) {
                this.extras = [] as any;
                for (let item of _data["extras"])
                    this.extras!.push(DeviceExtraOutput.fromJS(item));
            }
            this.shopUrl = _data["shopUrl"];
        }
    }

    static fromJS(data: any): DeviceOutput {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["mac"] = this.mac;
        data["operatingType"] = this.operatingType;
        data["isLocked"] = this.isLocked;
        data["deviceTypeName"] = this.deviceTypeName;
        data["address"] = this.address;
        data["intranetIP"] = this.intranetIP;
        data["internetIP"] = this.internetIP;
        data["description"] = this.description;
        data["isRegistered"] = this.isRegistered;
        data["licenseInfo"] = this.licenseInfo;
        data["hardwareCode"] = this.hardwareCode;
        data["shutdownTime"] = this.shutdownTime ? this.shutdownTime.toISOString() : <any>undefined;
        data["resolution_Width"] = this.resolution_Width;
        data["resolution_Height"] = this.resolution_Height;
        data["subKey"] = this.subKey;
        data["os"] = this.os;
        data["onlineTrafficTarget"] = this.onlineTrafficTarget;
        data["tenantName"] = this.tenantName;
        data["tenantId"] = this.tenantId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["organizationUnitId"] = this.organizationUnitId;
        data["storeId"] = this.storeId;
        data["storeOuterId"] = this.storeOuterId;
        data["storeName"] = this.storeName;
        data["outType"] = this.outType;
        data["taobaoDeviceId"] = this.taobaoDeviceId;
        data["deviceOuterId"] = this.deviceOuterId;
        data["osType"] = this.osType;
        if (Array.isArray(this.extras)) {
            data["extras"] = [];
            for (let item of this.extras)
                data["extras"].push(item.toJSON());
        }
        data["shopUrl"] = this.shopUrl;
        return data; 
    }
}

export interface IDeviceOutput {
    id: number;
    name: string | undefined;
    mac: string | undefined;
    operatingType: OperatingType;
    isLocked: boolean;
    deviceTypeName: string | undefined;
    address: string | undefined;
    intranetIP: string | undefined;
    internetIP: string | undefined;
    description: string | undefined;
    /** 设备是否已被注册，如果已注册，另外的机器不能再注册. 同时管理员可以清空，允许其它设备进行注册. */
    isRegistered: boolean;
    licenseInfo: string | undefined;
    hardwareCode: string | undefined;
    shutdownTime: moment.Moment | undefined;
    resolution_Width: number;
    resolution_Height: number;
    /** 访问此设备的唯一凭证，通过Subkey可调用平台api，拿到设备相关的信息，如,ads,apps,products等.同时可用户注册. */
    subKey: string | undefined;
    os: string | undefined;
    onlineTrafficTarget: string | undefined;
    tenantName: string | undefined;
    tenantId: number;
    organizationUnitName: string | undefined;
    organizationUnitId: number;
    storeId: number;
    storeOuterId: string | undefined;
    storeName: string | undefined;
    outType: string | undefined;
    taobaoDeviceId: string | undefined;
    deviceOuterId: string | undefined;
    osType: OsTypeEnum;
    extras: DeviceExtraOutput[] | undefined;
    shopUrl: string | undefined;
}

/** 更新设备状态 */
export class UpdateDeviceStatusInput implements IUpdateDeviceStatusInput {
    /** 设备类型 */
    deviceTypes!: number[] | undefined;
    /** 时间间隔 */
    timeSpan!: number;
    /** 信号 */
    sign!: string | undefined;
    status!: DeviceStatus;

    constructor(data?: IUpdateDeviceStatusInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["deviceTypes"])) {
                this.deviceTypes = [] as any;
                for (let item of _data["deviceTypes"])
                    this.deviceTypes!.push(item);
            }
            this.timeSpan = _data["timeSpan"];
            this.sign = _data["sign"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): UpdateDeviceStatusInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDeviceStatusInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceTypes)) {
            data["deviceTypes"] = [];
            for (let item of this.deviceTypes)
                data["deviceTypes"].push(item);
        }
        data["timeSpan"] = this.timeSpan;
        data["sign"] = this.sign;
        data["status"] = this.status;
        return data; 
    }
}

/** 更新设备状态 */
export interface IUpdateDeviceStatusInput {
    /** 设备类型 */
    deviceTypes: number[] | undefined;
    /** 时间间隔 */
    timeSpan: number;
    /** 信号 */
    sign: string | undefined;
    status: DeviceStatus;
}

export class DeviceHeartBeatInput implements IDeviceHeartBeatInput {
    cpuUsaged!: number | undefined;
    memoryUsaged!: number | undefined;

    constructor(data?: IDeviceHeartBeatInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cpuUsaged = _data["cpuUsaged"];
            this.memoryUsaged = _data["memoryUsaged"];
        }
    }

    static fromJS(data: any): DeviceHeartBeatInput {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceHeartBeatInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cpuUsaged"] = this.cpuUsaged;
        data["memoryUsaged"] = this.memoryUsaged;
        return data; 
    }
}

export interface IDeviceHeartBeatInput {
    cpuUsaged: number | undefined;
    memoryUsaged: number | undefined;
}

export class TenantAndOrganizationUnitAndStoreOutput implements ITenantAndOrganizationUnitAndStoreOutput {
    tenantId!: number;
    tenantName!: string | undefined;
    organizationUnitId!: number | undefined;
    organizationUnitName!: string | undefined;
    storeId!: number | undefined;
    storeName!: string | undefined;

    constructor(data?: ITenantAndOrganizationUnitAndStoreOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.tenantName = _data["tenantName"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.organizationUnitName = _data["organizationUnitName"];
            this.storeId = _data["storeId"];
            this.storeName = _data["storeName"];
        }
    }

    static fromJS(data: any): TenantAndOrganizationUnitAndStoreOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TenantAndOrganizationUnitAndStoreOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenantName"] = this.tenantName;
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["storeId"] = this.storeId;
        data["storeName"] = this.storeName;
        return data; 
    }
}

export interface ITenantAndOrganizationUnitAndStoreOutput {
    tenantId: number;
    tenantName: string | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    storeId: number | undefined;
    storeName: string | undefined;
}

export class DeviceCacheItem implements IDeviceCacheItem {
    id!: number;
    organizationUnitId!: number | undefined;
    storeId!: number | undefined;
    tenantId!: number;
    subKey!: string | undefined;
    auditStatus!: AuditStatus;
    name!: string | undefined;
    deviceTypeId!: number | undefined;
    outerId!: string | undefined;
    osType!: OsTypeEnum;

    constructor(data?: IDeviceCacheItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.storeId = _data["storeId"];
            this.tenantId = _data["tenantId"];
            this.subKey = _data["subKey"];
            this.auditStatus = _data["auditStatus"];
            this.name = _data["name"];
            this.deviceTypeId = _data["deviceTypeId"];
            this.outerId = _data["outerId"];
            this.osType = _data["osType"];
        }
    }

    static fromJS(data: any): DeviceCacheItem {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceCacheItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["storeId"] = this.storeId;
        data["tenantId"] = this.tenantId;
        data["subKey"] = this.subKey;
        data["auditStatus"] = this.auditStatus;
        data["name"] = this.name;
        data["deviceTypeId"] = this.deviceTypeId;
        data["outerId"] = this.outerId;
        data["osType"] = this.osType;
        return data; 
    }
}

export interface IDeviceCacheItem {
    id: number;
    organizationUnitId: number | undefined;
    storeId: number | undefined;
    tenantId: number;
    subKey: string | undefined;
    auditStatus: AuditStatus;
    name: string | undefined;
    deviceTypeId: number | undefined;
    outerId: string | undefined;
    osType: OsTypeEnum;
}

export class AppPodSettings implements IAppPodSettings {
    isLocalOnly!: boolean;
    backgroundUrl!: string | undefined;
    sensingStoreLogoUrl!: string | undefined;
    isAutoStartApp!: boolean;
    updateResourceMinutesTickTime!: number;
    heartBreakSecondTickTime!: number;
    isCacheApps!: boolean;

    constructor(data?: IAppPodSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isLocalOnly = _data["isLocalOnly"];
            this.backgroundUrl = _data["backgroundUrl"];
            this.sensingStoreLogoUrl = _data["sensingStoreLogoUrl"];
            this.isAutoStartApp = _data["isAutoStartApp"];
            this.updateResourceMinutesTickTime = _data["updateResourceMinutesTickTime"];
            this.heartBreakSecondTickTime = _data["heartBreakSecondTickTime"];
            this.isCacheApps = _data["isCacheApps"];
        }
    }

    static fromJS(data: any): AppPodSettings {
        data = typeof data === 'object' ? data : {};
        let result = new AppPodSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isLocalOnly"] = this.isLocalOnly;
        data["backgroundUrl"] = this.backgroundUrl;
        data["sensingStoreLogoUrl"] = this.sensingStoreLogoUrl;
        data["isAutoStartApp"] = this.isAutoStartApp;
        data["updateResourceMinutesTickTime"] = this.updateResourceMinutesTickTime;
        data["heartBreakSecondTickTime"] = this.heartBreakSecondTickTime;
        data["isCacheApps"] = this.isCacheApps;
        return data; 
    }
}

export interface IAppPodSettings {
    isLocalOnly: boolean;
    backgroundUrl: string | undefined;
    sensingStoreLogoUrl: string | undefined;
    isAutoStartApp: boolean;
    updateResourceMinutesTickTime: number;
    heartBreakSecondTickTime: number;
    isCacheApps: boolean;
}

export class AppPodUpdateStatusDto implements IAppPodUpdateStatusDto {
    needUpdate!: boolean;
    updateUrl!: string | undefined;
    versions!: string | undefined;
    releaseTime!: moment.Moment;
    updateCount!: number;
    updateInfo!: string | undefined;
    appPodSettings!: AppPodSettings;

    constructor(data?: IAppPodUpdateStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.needUpdate = _data["needUpdate"];
            this.updateUrl = _data["updateUrl"];
            this.versions = _data["versions"];
            this.releaseTime = _data["releaseTime"] ? moment(_data["releaseTime"].toString()) : <any>undefined;
            this.updateCount = _data["updateCount"];
            this.updateInfo = _data["updateInfo"];
            this.appPodSettings = _data["appPodSettings"] ? AppPodSettings.fromJS(_data["appPodSettings"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AppPodUpdateStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppPodUpdateStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["needUpdate"] = this.needUpdate;
        data["updateUrl"] = this.updateUrl;
        data["versions"] = this.versions;
        data["releaseTime"] = this.releaseTime ? this.releaseTime.toISOString() : <any>undefined;
        data["updateCount"] = this.updateCount;
        data["updateInfo"] = this.updateInfo;
        data["appPodSettings"] = this.appPodSettings ? this.appPodSettings.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAppPodUpdateStatusDto {
    needUpdate: boolean;
    updateUrl: string | undefined;
    versions: string | undefined;
    releaseTime: moment.Moment;
    updateCount: number;
    updateInfo: string | undefined;
    appPodSettings: AppPodSettings;
}

export class AndroidPadResDto implements IAndroidPadResDto {
    /** 背景图 */
    bgImage!: string | undefined;
    /** Logo */
    logo!: string | undefined;
    /** 无图占位图 */
    noImage!: string | undefined;
    /** 加载中图 */
    loadingImage!: string | undefined;
    /** MainColor */
    mainColor!: string | undefined;
    /** TopbarBg 横版 */
    topbarBg_H!: string | undefined;
    /** TopbarBg 竖版 */
    topbarBg_V!: string | undefined;
    /** 返回按钮 */
    backButton!: string | undefined;
    /** 默认 App 图标 */
    defaultAppIcon!: string | undefined;
    /** 二维码框 */
    qrcodeImage!: string | undefined;
    /** 默认头像 */
    profileImage!: string | undefined;
    backBtnBackground!: string | undefined;

    constructor(data?: IAndroidPadResDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bgImage = _data["bgImage"];
            this.logo = _data["logo"];
            this.noImage = _data["noImage"];
            this.loadingImage = _data["loadingImage"];
            this.mainColor = _data["mainColor"];
            this.topbarBg_H = _data["topbarBg_H"];
            this.topbarBg_V = _data["topbarBg_V"];
            this.backButton = _data["backButton"];
            this.defaultAppIcon = _data["defaultAppIcon"];
            this.qrcodeImage = _data["qrcodeImage"];
            this.profileImage = _data["profileImage"];
            this.backBtnBackground = _data["backBtnBackground"];
        }
    }

    static fromJS(data: any): AndroidPadResDto {
        data = typeof data === 'object' ? data : {};
        let result = new AndroidPadResDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bgImage"] = this.bgImage;
        data["logo"] = this.logo;
        data["noImage"] = this.noImage;
        data["loadingImage"] = this.loadingImage;
        data["mainColor"] = this.mainColor;
        data["topbarBg_H"] = this.topbarBg_H;
        data["topbarBg_V"] = this.topbarBg_V;
        data["backButton"] = this.backButton;
        data["defaultAppIcon"] = this.defaultAppIcon;
        data["qrcodeImage"] = this.qrcodeImage;
        data["profileImage"] = this.profileImage;
        data["backBtnBackground"] = this.backBtnBackground;
        return data; 
    }
}

export interface IAndroidPadResDto {
    /** 背景图 */
    bgImage: string | undefined;
    /** Logo */
    logo: string | undefined;
    /** 无图占位图 */
    noImage: string | undefined;
    /** 加载中图 */
    loadingImage: string | undefined;
    /** MainColor */
    mainColor: string | undefined;
    /** TopbarBg 横版 */
    topbarBg_H: string | undefined;
    /** TopbarBg 竖版 */
    topbarBg_V: string | undefined;
    /** 返回按钮 */
    backButton: string | undefined;
    /** 默认 App 图标 */
    defaultAppIcon: string | undefined;
    /** 二维码框 */
    qrcodeImage: string | undefined;
    /** 默认头像 */
    profileImage: string | undefined;
    backBtnBackground: string | undefined;
}

export class DeviceCount implements IDeviceCount {
    totalNumber!: number;
    onlineNumber!: number;

    constructor(data?: IDeviceCount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalNumber = _data["totalNumber"];
            this.onlineNumber = _data["onlineNumber"];
        }
    }

    static fromJS(data: any): DeviceCount {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceCount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalNumber"] = this.totalNumber;
        data["onlineNumber"] = this.onlineNumber;
        return data; 
    }
}

export interface IDeviceCount {
    totalNumber: number;
    onlineNumber: number;
}

export class DeviceLocation implements IDeviceLocation {
    longitude!: string | undefined;
    latitude!: string | undefined;
    prictureUrl!: string | undefined;
    deviceId!: number;
    deviceName!: string | undefined;
    sn!: string | undefined;
    address!: string | undefined;

    constructor(data?: IDeviceLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
            this.prictureUrl = _data["prictureUrl"];
            this.deviceId = _data["deviceId"];
            this.deviceName = _data["deviceName"];
            this.sn = _data["sn"];
            this.address = _data["address"];
        }
    }

    static fromJS(data: any): DeviceLocation {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["prictureUrl"] = this.prictureUrl;
        data["deviceId"] = this.deviceId;
        data["deviceName"] = this.deviceName;
        data["sn"] = this.sn;
        data["address"] = this.address;
        return data; 
    }
}

export interface IDeviceLocation {
    longitude: string | undefined;
    latitude: string | undefined;
    prictureUrl: string | undefined;
    deviceId: number;
    deviceName: string | undefined;
    sn: string | undefined;
    address: string | undefined;
}

export class IndustryDeviceReportDto implements IIndustryDeviceReportDto {
    gatewayCount!: DeviceCount;
    sensorCount!: DeviceCount;
    actDeviceCount!: DeviceCount;
    deviceLocations!: DeviceLocation[] | undefined;

    constructor(data?: IIndustryDeviceReportDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gatewayCount = _data["gatewayCount"] ? DeviceCount.fromJS(_data["gatewayCount"]) : <any>undefined;
            this.sensorCount = _data["sensorCount"] ? DeviceCount.fromJS(_data["sensorCount"]) : <any>undefined;
            this.actDeviceCount = _data["actDeviceCount"] ? DeviceCount.fromJS(_data["actDeviceCount"]) : <any>undefined;
            if (Array.isArray(_data["deviceLocations"])) {
                this.deviceLocations = [] as any;
                for (let item of _data["deviceLocations"])
                    this.deviceLocations!.push(DeviceLocation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IndustryDeviceReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new IndustryDeviceReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gatewayCount"] = this.gatewayCount ? this.gatewayCount.toJSON() : <any>undefined;
        data["sensorCount"] = this.sensorCount ? this.sensorCount.toJSON() : <any>undefined;
        data["actDeviceCount"] = this.actDeviceCount ? this.actDeviceCount.toJSON() : <any>undefined;
        if (Array.isArray(this.deviceLocations)) {
            data["deviceLocations"] = [];
            for (let item of this.deviceLocations)
                data["deviceLocations"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIndustryDeviceReportDto {
    gatewayCount: DeviceCount;
    sensorCount: DeviceCount;
    actDeviceCount: DeviceCount;
    deviceLocations: DeviceLocation[] | undefined;
}

export class IntfaDeviceDescriptionWithId implements IIntfaDeviceDescriptionWithId {
    id!: number;
    name!: string | undefined;
    outerId!: string | undefined;
    subKey!: string | undefined;
    isStatic!: boolean;
    description!: string | undefined;

    constructor(data?: IIntfaDeviceDescriptionWithId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.outerId = _data["outerId"];
            this.subKey = _data["subKey"];
            this.isStatic = _data["isStatic"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): IntfaDeviceDescriptionWithId {
        data = typeof data === 'object' ? data : {};
        let result = new IntfaDeviceDescriptionWithId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["outerId"] = this.outerId;
        data["subKey"] = this.subKey;
        data["isStatic"] = this.isStatic;
        data["description"] = this.description;
        return data; 
    }
}

export interface IIntfaDeviceDescriptionWithId {
    id: number;
    name: string | undefined;
    outerId: string | undefined;
    subKey: string | undefined;
    isStatic: boolean;
    description: string | undefined;
}

export class UpdateIntfaDeviceDescription implements IUpdateIntfaDeviceDescription {
    subKey!: string | undefined;
    isStatic!: boolean;
    description!: string | undefined;

    constructor(data?: IUpdateIntfaDeviceDescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subKey = _data["subKey"];
            this.isStatic = _data["isStatic"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateIntfaDeviceDescription {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateIntfaDeviceDescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subKey"] = this.subKey;
        data["isStatic"] = this.isStatic;
        data["description"] = this.description;
        return data; 
    }
}

export interface IUpdateIntfaDeviceDescription {
    subKey: string | undefined;
    isStatic: boolean;
    description: string | undefined;
}

export class UpdateIntfaDeviceDescriptionsInput implements IUpdateIntfaDeviceDescriptionsInput {
    devices!: UpdateIntfaDeviceDescription[] | undefined;

    constructor(data?: IUpdateIntfaDeviceDescriptionsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["devices"])) {
                this.devices = [] as any;
                for (let item of _data["devices"])
                    this.devices!.push(UpdateIntfaDeviceDescription.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateIntfaDeviceDescriptionsInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateIntfaDeviceDescriptionsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.devices)) {
            data["devices"] = [];
            for (let item of this.devices)
                data["devices"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateIntfaDeviceDescriptionsInput {
    devices: UpdateIntfaDeviceDescription[] | undefined;
}

export enum RedeemType {
    None = 0,
    Full = 1,
    Partial = 2,
}

export class EntityFileSdkModel implements IEntityFileSdkModel {
    id!: number;
    name!: string | undefined;
    fileUrl!: string | undefined;
    fromType!: string | undefined;
    type!: string | undefined;
    content!: string | undefined;
    usage!: string | undefined;
    description!: string | undefined;
    orderNumber!: number;
    md5!: string | undefined;

    constructor(data?: IEntityFileSdkModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fileUrl = _data["fileUrl"];
            this.fromType = _data["fromType"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.usage = _data["usage"];
            this.description = _data["description"];
            this.orderNumber = _data["orderNumber"];
            this.md5 = _data["md5"];
        }
    }

    static fromJS(data: any): EntityFileSdkModel {
        data = typeof data === 'object' ? data : {};
        let result = new EntityFileSdkModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fileUrl"] = this.fileUrl;
        data["fromType"] = this.fromType;
        data["type"] = this.type;
        data["content"] = this.content;
        data["usage"] = this.usage;
        data["description"] = this.description;
        data["orderNumber"] = this.orderNumber;
        data["md5"] = this.md5;
        return data; 
    }
}

export interface IEntityFileSdkModel {
    id: number;
    name: string | undefined;
    fileUrl: string | undefined;
    fromType: string | undefined;
    type: string | undefined;
    content: string | undefined;
    usage: string | undefined;
    description: string | undefined;
    orderNumber: number;
    md5: string | undefined;
}

export class BrandSdkDto implements IBrandSdkDto {
    id!: number;
    code!: string | undefined;
    orderNumber!: number;
    name!: string | undefined;
    /** 品牌 Logo */
    logoUrl!: string | undefined;
    /** 品牌大图 */
    imageUrl!: string | undefined;
    /** 状态 */
    state!: string | undefined;
    /** 品牌主题色   16进制编码：#FFFFFF */
    mainColor!: string | undefined;
    description!: string | undefined;
    b_BrandCategories!: IdNameDto[] | undefined;
    /** 管理的外部资源 */
    itemImagesOrVideos!: EntityFileSdkModel[] | undefined;
    slogan!: string | undefined;
    theme!: string | undefined;
    extensionData!: string | undefined;
    tagIds!: number[] | undefined;

    constructor(data?: IBrandSdkDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.orderNumber = _data["orderNumber"];
            this.name = _data["name"];
            this.logoUrl = _data["logoUrl"];
            this.imageUrl = _data["imageUrl"];
            this.state = _data["state"];
            this.mainColor = _data["mainColor"];
            this.description = _data["description"];
            if (Array.isArray(_data["b_BrandCategories"])) {
                this.b_BrandCategories = [] as any;
                for (let item of _data["b_BrandCategories"])
                    this.b_BrandCategories!.push(IdNameDto.fromJS(item));
            }
            if (Array.isArray(_data["itemImagesOrVideos"])) {
                this.itemImagesOrVideos = [] as any;
                for (let item of _data["itemImagesOrVideos"])
                    this.itemImagesOrVideos!.push(EntityFileSdkModel.fromJS(item));
            }
            this.slogan = _data["slogan"];
            this.theme = _data["theme"];
            this.extensionData = _data["extensionData"];
            if (Array.isArray(_data["tagIds"])) {
                this.tagIds = [] as any;
                for (let item of _data["tagIds"])
                    this.tagIds!.push(item);
            }
        }
    }

    static fromJS(data: any): BrandSdkDto {
        data = typeof data === 'object' ? data : {};
        let result = new BrandSdkDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["orderNumber"] = this.orderNumber;
        data["name"] = this.name;
        data["logoUrl"] = this.logoUrl;
        data["imageUrl"] = this.imageUrl;
        data["state"] = this.state;
        data["mainColor"] = this.mainColor;
        data["description"] = this.description;
        if (Array.isArray(this.b_BrandCategories)) {
            data["b_BrandCategories"] = [];
            for (let item of this.b_BrandCategories)
                data["b_BrandCategories"].push(item.toJSON());
        }
        if (Array.isArray(this.itemImagesOrVideos)) {
            data["itemImagesOrVideos"] = [];
            for (let item of this.itemImagesOrVideos)
                data["itemImagesOrVideos"].push(item.toJSON());
        }
        data["slogan"] = this.slogan;
        data["theme"] = this.theme;
        data["extensionData"] = this.extensionData;
        if (Array.isArray(this.tagIds)) {
            data["tagIds"] = [];
            for (let item of this.tagIds)
                data["tagIds"].push(item);
        }
        return data; 
    }
}

export interface IBrandSdkDto {
    id: number;
    code: string | undefined;
    orderNumber: number;
    name: string | undefined;
    /** 品牌 Logo */
    logoUrl: string | undefined;
    /** 品牌大图 */
    imageUrl: string | undefined;
    /** 状态 */
    state: string | undefined;
    /** 品牌主题色   16进制编码：#FFFFFF */
    mainColor: string | undefined;
    description: string | undefined;
    b_BrandCategories: IdNameDto[] | undefined;
    /** 管理的外部资源 */
    itemImagesOrVideos: EntityFileSdkModel[] | undefined;
    slogan: string | undefined;
    theme: string | undefined;
    extensionData: string | undefined;
    tagIds: number[] | undefined;
}

export class BrandSdkDtoPagedResultDto implements IBrandSdkDtoPagedResultDto {
    totalCount!: number;
    items!: BrandSdkDto[] | undefined;

    constructor(data?: IBrandSdkDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BrandSdkDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BrandSdkDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new BrandSdkDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBrandSdkDtoPagedResultDto {
    totalCount: number;
    items: BrandSdkDto[] | undefined;
}

export class StoreBrandBindingDto implements IStoreBrandBindingDto {
    storeId!: number;
    brandId!: number | undefined;
    roomIds!: string | undefined;

    constructor(data?: IStoreBrandBindingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.storeId = _data["storeId"];
            this.brandId = _data["brandId"];
            this.roomIds = _data["roomIds"];
        }
    }

    static fromJS(data: any): StoreBrandBindingDto {
        data = typeof data === 'object' ? data : {};
        let result = new StoreBrandBindingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["storeId"] = this.storeId;
        data["brandId"] = this.brandId;
        data["roomIds"] = this.roomIds;
        return data; 
    }
}

export interface IStoreBrandBindingDto {
    storeId: number;
    brandId: number | undefined;
    roomIds: string | undefined;
}

export class StoreBrandBindingDtoPagedResultDto implements IStoreBrandBindingDtoPagedResultDto {
    totalCount!: number;
    items!: StoreBrandBindingDto[] | undefined;

    constructor(data?: IStoreBrandBindingDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(StoreBrandBindingDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StoreBrandBindingDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StoreBrandBindingDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStoreBrandBindingDtoPagedResultDto {
    totalCount: number;
    items: StoreBrandBindingDto[] | undefined;
}

export class TagSdkModel implements ITagSdkModel {
    id!: number;
    value!: string | undefined;
    type!: string | undefined;
    isSpecial!: boolean;
    iconUrl!: string | undefined;

    constructor(data?: ITagSdkModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.value = _data["value"];
            this.type = _data["type"];
            this.isSpecial = _data["isSpecial"];
            this.iconUrl = _data["iconUrl"];
        }
    }

    static fromJS(data: any): TagSdkModel {
        data = typeof data === 'object' ? data : {};
        let result = new TagSdkModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        data["type"] = this.type;
        data["isSpecial"] = this.isSpecial;
        data["iconUrl"] = this.iconUrl;
        return data; 
    }
}

export interface ITagSdkModel {
    id: number;
    value: string | undefined;
    type: string | undefined;
    isSpecial: boolean;
    iconUrl: string | undefined;
}

export class TagSdkModelPagedResultDto implements ITagSdkModelPagedResultDto {
    totalCount!: number;
    items!: TagSdkModel[] | undefined;

    constructor(data?: ITagSdkModelPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TagSdkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TagSdkModelPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new TagSdkModelPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITagSdkModelPagedResultDto {
    totalCount: number;
    items: TagSdkModel[] | undefined;
}

export class ChangeDeviceAppPodCurrentVersionInput implements IChangeDeviceAppPodCurrentVersionInput {
    subkey!: string;
    /** 当前最新AppPod版本ID */
    currentAppPodVersionId!: number | undefined;

    constructor(data?: IChangeDeviceAppPodCurrentVersionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subkey = _data["subkey"];
            this.currentAppPodVersionId = _data["currentAppPodVersionId"];
        }
    }

    static fromJS(data: any): ChangeDeviceAppPodCurrentVersionInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeDeviceAppPodCurrentVersionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subkey"] = this.subkey;
        data["currentAppPodVersionId"] = this.currentAppPodVersionId;
        return data; 
    }
}

export interface IChangeDeviceAppPodCurrentVersionInput {
    subkey: string;
    /** 当前最新AppPod版本ID */
    currentAppPodVersionId: number | undefined;
}

export class AppPodScreenInput implements IAppPodScreenInput {
    /** 人脸照片的二进制图片. */
    screenShot!: string | undefined;

    constructor(data?: IAppPodScreenInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.screenShot = _data["screenShot"];
        }
    }

    static fromJS(data: any): AppPodScreenInput {
        data = typeof data === 'object' ? data : {};
        let result = new AppPodScreenInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["screenShot"] = this.screenShot;
        return data; 
    }
}

export interface IAppPodScreenInput {
    /** 人脸照片的二进制图片. */
    screenShot: string | undefined;
}

/** 店铺的地址信息（精简） */
export class SimpleStorePositionDto implements ISimpleStorePositionDto {
    /** 店铺Id */
    storeId!: number;
    /** 城市 */
    city!: string | undefined;
    /** 详细位置 */
    location!: string | undefined;

    constructor(data?: ISimpleStorePositionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.storeId = _data["storeId"];
            this.city = _data["city"];
            this.location = _data["location"];
        }
    }

    static fromJS(data: any): SimpleStorePositionDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleStorePositionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["storeId"] = this.storeId;
        data["city"] = this.city;
        data["location"] = this.location;
        return data; 
    }
}

/** 店铺的地址信息（精简） */
export interface ISimpleStorePositionDto {
    /** 店铺Id */
    storeId: number;
    /** 城市 */
    city: string | undefined;
    /** 详细位置 */
    location: string | undefined;
}

/** 店铺经纬度信息 */
export class SimpleStorePositionInput implements ISimpleStorePositionInput {
    /** 纬度 */
    lng!: number | undefined;
    /** 经度 */
    lat!: number | undefined;
    /** 店铺ID */
    storeId!: number;

    constructor(data?: ISimpleStorePositionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lng = _data["lng"];
            this.lat = _data["lat"];
            this.storeId = _data["storeId"];
        }
    }

    static fromJS(data: any): SimpleStorePositionInput {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleStorePositionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lng"] = this.lng;
        data["lat"] = this.lat;
        data["storeId"] = this.storeId;
        return data; 
    }
}

/** 店铺经纬度信息 */
export interface ISimpleStorePositionInput {
    /** 纬度 */
    lng: number | undefined;
    /** 经度 */
    lat: number | undefined;
    /** 店铺ID */
    storeId: number;
}

/** 按条件获取店铺列表的条件（分页） */
export class GetStorseListInput implements IGetStorseListInput {
    /** 组织架构的ID */
    organizationUnitId!: number[] | undefined;
    storeStatus!: StoreStatus;
    /** 区域 */
    areas!: string[] | undefined;
    filter!: string | undefined;
    sorting!: string | undefined;
    maxResultCount!: number;
    skipCount!: number;

    constructor(data?: IGetStorseListInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["organizationUnitId"])) {
                this.organizationUnitId = [] as any;
                for (let item of _data["organizationUnitId"])
                    this.organizationUnitId!.push(item);
            }
            this.storeStatus = _data["storeStatus"];
            if (Array.isArray(_data["areas"])) {
                this.areas = [] as any;
                for (let item of _data["areas"])
                    this.areas!.push(item);
            }
            this.filter = _data["filter"];
            this.sorting = _data["sorting"];
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
        }
    }

    static fromJS(data: any): GetStorseListInput {
        data = typeof data === 'object' ? data : {};
        let result = new GetStorseListInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.organizationUnitId)) {
            data["organizationUnitId"] = [];
            for (let item of this.organizationUnitId)
                data["organizationUnitId"].push(item);
        }
        data["storeStatus"] = this.storeStatus;
        if (Array.isArray(this.areas)) {
            data["areas"] = [];
            for (let item of this.areas)
                data["areas"].push(item);
        }
        data["filter"] = this.filter;
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data; 
    }
}

/** 按条件获取店铺列表的条件（分页） */
export interface IGetStorseListInput {
    /** 组织架构的ID */
    organizationUnitId: number[] | undefined;
    storeStatus: StoreStatus;
    /** 区域 */
    areas: string[] | undefined;
    filter: string | undefined;
    sorting: string | undefined;
    maxResultCount: number;
    skipCount: number;
}

export class StoresDto implements IStoresDto {
    storeId!: number;
    displayName!: string | undefined;
    outerId!: string | undefined;
    qrCodeExtraInfo!: string | undefined;
    webAddressUrl!: string | undefined;
    qrCodeUrl!: string | undefined;
    contact!: string | undefined;
    categoryId!: string | undefined;
    positionId!: number | undefined;
    position!: PositionDto;
    addressDetail!: string | undefined;
    openingTime!: moment.Moment | undefined;
    closedTime!: moment.Moment | undefined;
    qrcodeRules!: string | undefined;
    defaultOnlineShopName!: string | undefined;
    type!: StoreType;
    memberCount!: number;
    organziationUnitName!: string | undefined;
    storeType!: string | undefined;
    storeStatus!: StoreStatus;
    storeDevicesInfo!: string | undefined;
    roomIds!: string | undefined;
    brandId!: number | undefined;

    constructor(data?: IStoresDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.storeId = _data["storeId"];
            this.displayName = _data["displayName"];
            this.outerId = _data["outerId"];
            this.qrCodeExtraInfo = _data["qrCodeExtraInfo"];
            this.webAddressUrl = _data["webAddressUrl"];
            this.qrCodeUrl = _data["qrCodeUrl"];
            this.contact = _data["contact"];
            this.categoryId = _data["categoryId"];
            this.positionId = _data["positionId"];
            this.position = _data["position"] ? PositionDto.fromJS(_data["position"]) : <any>undefined;
            this.addressDetail = _data["addressDetail"];
            this.openingTime = _data["openingTime"] ? moment(_data["openingTime"].toString()) : <any>undefined;
            this.closedTime = _data["closedTime"] ? moment(_data["closedTime"].toString()) : <any>undefined;
            this.qrcodeRules = _data["qrcodeRules"];
            this.defaultOnlineShopName = _data["defaultOnlineShopName"];
            this.type = _data["type"];
            this.memberCount = _data["memberCount"];
            this.organziationUnitName = _data["organziationUnitName"];
            this.storeType = _data["storeType"];
            this.storeStatus = _data["storeStatus"];
            this.storeDevicesInfo = _data["storeDevicesInfo"];
            this.roomIds = _data["roomIds"];
            this.brandId = _data["brandId"];
        }
    }

    static fromJS(data: any): StoresDto {
        data = typeof data === 'object' ? data : {};
        let result = new StoresDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["storeId"] = this.storeId;
        data["displayName"] = this.displayName;
        data["outerId"] = this.outerId;
        data["qrCodeExtraInfo"] = this.qrCodeExtraInfo;
        data["webAddressUrl"] = this.webAddressUrl;
        data["qrCodeUrl"] = this.qrCodeUrl;
        data["contact"] = this.contact;
        data["categoryId"] = this.categoryId;
        data["positionId"] = this.positionId;
        data["position"] = this.position ? this.position.toJSON() : <any>undefined;
        data["addressDetail"] = this.addressDetail;
        data["openingTime"] = this.openingTime ? this.openingTime.toISOString() : <any>undefined;
        data["closedTime"] = this.closedTime ? this.closedTime.toISOString() : <any>undefined;
        data["qrcodeRules"] = this.qrcodeRules;
        data["defaultOnlineShopName"] = this.defaultOnlineShopName;
        data["type"] = this.type;
        data["memberCount"] = this.memberCount;
        data["organziationUnitName"] = this.organziationUnitName;
        data["storeType"] = this.storeType;
        data["storeStatus"] = this.storeStatus;
        data["storeDevicesInfo"] = this.storeDevicesInfo;
        data["roomIds"] = this.roomIds;
        data["brandId"] = this.brandId;
        return data; 
    }
}

export interface IStoresDto {
    storeId: number;
    displayName: string | undefined;
    outerId: string | undefined;
    qrCodeExtraInfo: string | undefined;
    webAddressUrl: string | undefined;
    qrCodeUrl: string | undefined;
    contact: string | undefined;
    categoryId: string | undefined;
    positionId: number | undefined;
    position: PositionDto;
    addressDetail: string | undefined;
    openingTime: moment.Moment | undefined;
    closedTime: moment.Moment | undefined;
    qrcodeRules: string | undefined;
    defaultOnlineShopName: string | undefined;
    type: StoreType;
    memberCount: number;
    organziationUnitName: string | undefined;
    storeType: string | undefined;
    storeStatus: StoreStatus;
    storeDevicesInfo: string | undefined;
    roomIds: string | undefined;
    brandId: number | undefined;
}

export class StoresDtoPagedResultDto implements IStoresDtoPagedResultDto {
    totalCount!: number;
    items!: StoresDto[] | undefined;

    constructor(data?: IStoresDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(StoresDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StoresDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StoresDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStoresDtoPagedResultDto {
    totalCount: number;
    items: StoresDto[] | undefined;
}

export class StorePositionDto implements IStorePositionDto {
    id!: number;
    outerId!: string | undefined;
    displayName!: string | undefined;
    position!: PositionDto;

    constructor(data?: IStorePositionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.outerId = _data["outerId"];
            this.displayName = _data["displayName"];
            this.position = _data["position"] ? PositionDto.fromJS(_data["position"]) : <any>undefined;
        }
    }

    static fromJS(data: any): StorePositionDto {
        data = typeof data === 'object' ? data : {};
        let result = new StorePositionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["outerId"] = this.outerId;
        data["displayName"] = this.displayName;
        data["position"] = this.position ? this.position.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IStorePositionDto {
    id: number;
    outerId: string | undefined;
    displayName: string | undefined;
    position: PositionDto;
}

export class StorePositionDtoPagedResultDto implements IStorePositionDtoPagedResultDto {
    totalCount!: number;
    items!: StorePositionDto[] | undefined;

    constructor(data?: IStorePositionDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(StorePositionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StorePositionDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StorePositionDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStorePositionDtoPagedResultDto {
    totalCount: number;
    items: StorePositionDto[] | undefined;
}

export class CreateStoreInput implements ICreateStoreInput {
    /** 门店商家自用编码,T-6300182 */
    outerId!: string | undefined;
    /** 二维码的额外信息 */
    qrCodeExtraInfo!: string | undefined;
    /** 店铺的Logo */
    logoUrl!: string | undefined;
    /** 实体店铺的官网地址，一般情况下，是公共平台，只要带入店的id，就知道这家店的商品. */
    webAddressUrl!: string | undefined;
    /** 二维码 */
    qrCodeUrl!: string | undefined;
    /** 门店联系方式，多个以;分隔，如：0571-81113563-123;0571-81113563;13826881688;400-820-5555 */
    contact!: string | undefined;
    /** 门店类目 */
    categoryId!: string | undefined;
    /** Thing的上下架需要审批. */
    isNeedThingApprove!: boolean;
    /** Ads的上下架需要审批. */
    isNeedAdsApprove!: boolean;
    /** APP的上下架需要审批. */
    isNeedAppApprove!: boolean;
    /** 设备上下线是否要审核 */
    isNeedDeviceApprove!: boolean;
    /** 红包上下线审核 */
    isNeedCouponApprove!: boolean;
    /** 广告是否自动下发, */
    isAdsAutoSendDown!: boolean;
    /** App是否下发 */
    isAppAutoSendDown!: boolean;
    /** APP是否自动下发 */
    isProductAutoSendDown!: boolean;
    /** 红包是否下发 */
    isCouponAutoSendDown!: boolean;
    /** Ads是否下发是否接受 */
    canAcceptAdsAutoSendDown!: boolean;
    /** App是否下发是否接受 */
    canAcceptAppAutoSendDown!: boolean;
    /** Product是否下发是否接受 */
    canAcceptProductAutoSendDown!: boolean;
    /** 红包是否下发是否接受 */
    canAcceptCouponAutoSendDown!: boolean;
    /** 店铺地址的ID */
    positionId!: number | undefined;
    position!: PositionDto;
    /** 详细地址 */
    addressDetail!: string | undefined;
    /** 开店时间 */
    openingTime!: moment.Moment | undefined;
    /** 关店时间 */
    closedTime!: moment.Moment | undefined;
    /** 自己电商的二维码规则. */
    qrcodeRules!: string | undefined;
    /** 默认在线店铺名称 */
    defaultOnlineShopName!: string | undefined;
    type!: StoreType;
    /** 店铺名称 */
    displayName!: string;
    /** 组织架构的ID */
    organizationUnitId!: number | undefined;
    /** 淘宝店铺的ID */
    taobaoStoreId!: string | undefined;
    /** 店铺类型 */
    storeType!: string | undefined;
    /** 店铺的设备信息 */
    storeDevicesInfo!: string | undefined;
    /** 房间ID */
    roomIds!: string | undefined;
    /** 品牌ID */
    brandId!: number | undefined;

    constructor(data?: ICreateStoreInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.outerId = _data["outerId"];
            this.qrCodeExtraInfo = _data["qrCodeExtraInfo"];
            this.logoUrl = _data["logoUrl"];
            this.webAddressUrl = _data["webAddressUrl"];
            this.qrCodeUrl = _data["qrCodeUrl"];
            this.contact = _data["contact"];
            this.categoryId = _data["categoryId"];
            this.isNeedThingApprove = _data["isNeedThingApprove"];
            this.isNeedAdsApprove = _data["isNeedAdsApprove"];
            this.isNeedAppApprove = _data["isNeedAppApprove"];
            this.isNeedDeviceApprove = _data["isNeedDeviceApprove"];
            this.isNeedCouponApprove = _data["isNeedCouponApprove"];
            this.isAdsAutoSendDown = _data["isAdsAutoSendDown"];
            this.isAppAutoSendDown = _data["isAppAutoSendDown"];
            this.isProductAutoSendDown = _data["isProductAutoSendDown"];
            this.isCouponAutoSendDown = _data["isCouponAutoSendDown"];
            this.canAcceptAdsAutoSendDown = _data["canAcceptAdsAutoSendDown"];
            this.canAcceptAppAutoSendDown = _data["canAcceptAppAutoSendDown"];
            this.canAcceptProductAutoSendDown = _data["canAcceptProductAutoSendDown"];
            this.canAcceptCouponAutoSendDown = _data["canAcceptCouponAutoSendDown"];
            this.positionId = _data["positionId"];
            this.position = _data["position"] ? PositionDto.fromJS(_data["position"]) : <any>undefined;
            this.addressDetail = _data["addressDetail"];
            this.openingTime = _data["openingTime"] ? moment(_data["openingTime"].toString()) : <any>undefined;
            this.closedTime = _data["closedTime"] ? moment(_data["closedTime"].toString()) : <any>undefined;
            this.qrcodeRules = _data["qrcodeRules"];
            this.defaultOnlineShopName = _data["defaultOnlineShopName"];
            this.type = _data["type"];
            this.displayName = _data["displayName"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.taobaoStoreId = _data["taobaoStoreId"];
            this.storeType = _data["storeType"];
            this.storeDevicesInfo = _data["storeDevicesInfo"];
            this.roomIds = _data["roomIds"];
            this.brandId = _data["brandId"];
        }
    }

    static fromJS(data: any): CreateStoreInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateStoreInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outerId"] = this.outerId;
        data["qrCodeExtraInfo"] = this.qrCodeExtraInfo;
        data["logoUrl"] = this.logoUrl;
        data["webAddressUrl"] = this.webAddressUrl;
        data["qrCodeUrl"] = this.qrCodeUrl;
        data["contact"] = this.contact;
        data["categoryId"] = this.categoryId;
        data["isNeedThingApprove"] = this.isNeedThingApprove;
        data["isNeedAdsApprove"] = this.isNeedAdsApprove;
        data["isNeedAppApprove"] = this.isNeedAppApprove;
        data["isNeedDeviceApprove"] = this.isNeedDeviceApprove;
        data["isNeedCouponApprove"] = this.isNeedCouponApprove;
        data["isAdsAutoSendDown"] = this.isAdsAutoSendDown;
        data["isAppAutoSendDown"] = this.isAppAutoSendDown;
        data["isProductAutoSendDown"] = this.isProductAutoSendDown;
        data["isCouponAutoSendDown"] = this.isCouponAutoSendDown;
        data["canAcceptAdsAutoSendDown"] = this.canAcceptAdsAutoSendDown;
        data["canAcceptAppAutoSendDown"] = this.canAcceptAppAutoSendDown;
        data["canAcceptProductAutoSendDown"] = this.canAcceptProductAutoSendDown;
        data["canAcceptCouponAutoSendDown"] = this.canAcceptCouponAutoSendDown;
        data["positionId"] = this.positionId;
        data["position"] = this.position ? this.position.toJSON() : <any>undefined;
        data["addressDetail"] = this.addressDetail;
        data["openingTime"] = this.openingTime ? this.openingTime.toISOString() : <any>undefined;
        data["closedTime"] = this.closedTime ? this.closedTime.toISOString() : <any>undefined;
        data["qrcodeRules"] = this.qrcodeRules;
        data["defaultOnlineShopName"] = this.defaultOnlineShopName;
        data["type"] = this.type;
        data["displayName"] = this.displayName;
        data["organizationUnitId"] = this.organizationUnitId;
        data["taobaoStoreId"] = this.taobaoStoreId;
        data["storeType"] = this.storeType;
        data["storeDevicesInfo"] = this.storeDevicesInfo;
        data["roomIds"] = this.roomIds;
        data["brandId"] = this.brandId;
        return data; 
    }
}

export interface ICreateStoreInput {
    /** 门店商家自用编码,T-6300182 */
    outerId: string | undefined;
    /** 二维码的额外信息 */
    qrCodeExtraInfo: string | undefined;
    /** 店铺的Logo */
    logoUrl: string | undefined;
    /** 实体店铺的官网地址，一般情况下，是公共平台，只要带入店的id，就知道这家店的商品. */
    webAddressUrl: string | undefined;
    /** 二维码 */
    qrCodeUrl: string | undefined;
    /** 门店联系方式，多个以;分隔，如：0571-81113563-123;0571-81113563;13826881688;400-820-5555 */
    contact: string | undefined;
    /** 门店类目 */
    categoryId: string | undefined;
    /** Thing的上下架需要审批. */
    isNeedThingApprove: boolean;
    /** Ads的上下架需要审批. */
    isNeedAdsApprove: boolean;
    /** APP的上下架需要审批. */
    isNeedAppApprove: boolean;
    /** 设备上下线是否要审核 */
    isNeedDeviceApprove: boolean;
    /** 红包上下线审核 */
    isNeedCouponApprove: boolean;
    /** 广告是否自动下发, */
    isAdsAutoSendDown: boolean;
    /** App是否下发 */
    isAppAutoSendDown: boolean;
    /** APP是否自动下发 */
    isProductAutoSendDown: boolean;
    /** 红包是否下发 */
    isCouponAutoSendDown: boolean;
    /** Ads是否下发是否接受 */
    canAcceptAdsAutoSendDown: boolean;
    /** App是否下发是否接受 */
    canAcceptAppAutoSendDown: boolean;
    /** Product是否下发是否接受 */
    canAcceptProductAutoSendDown: boolean;
    /** 红包是否下发是否接受 */
    canAcceptCouponAutoSendDown: boolean;
    /** 店铺地址的ID */
    positionId: number | undefined;
    position: PositionDto;
    /** 详细地址 */
    addressDetail: string | undefined;
    /** 开店时间 */
    openingTime: moment.Moment | undefined;
    /** 关店时间 */
    closedTime: moment.Moment | undefined;
    /** 自己电商的二维码规则. */
    qrcodeRules: string | undefined;
    /** 默认在线店铺名称 */
    defaultOnlineShopName: string | undefined;
    type: StoreType;
    /** 店铺名称 */
    displayName: string;
    /** 组织架构的ID */
    organizationUnitId: number | undefined;
    /** 淘宝店铺的ID */
    taobaoStoreId: string | undefined;
    /** 店铺类型 */
    storeType: string | undefined;
    /** 店铺的设备信息 */
    storeDevicesInfo: string | undefined;
    /** 房间ID */
    roomIds: string | undefined;
    /** 品牌ID */
    brandId: number | undefined;
}

export class UpdateStoreInput implements IUpdateStoreInput {
    /** 店铺ID */
    id!: number;
    /** 门店商家自用编码,T-6300182 */
    outerId!: string | undefined;
    /** 二维码的额外信息 */
    qrCodeExtraInfo!: string | undefined;
    /** 店铺的Logo */
    logoUrl!: string | undefined;
    /** 实体店铺的官网地址，一般情况下，是公共平台，只要带入店的id，就知道这家店的商品. */
    webAddressUrl!: string | undefined;
    /** 二维码 */
    qrCodeUrl!: string | undefined;
    /** 门店联系方式，多个以;分隔，如：0571-81113563-123;0571-81113563;13826881688;400-820-5555 */
    contact!: string | undefined;
    /** 门店类目 */
    categoryId!: string | undefined;
    /** Thing的上下架需要审批. */
    isNeedThingApprove!: boolean;
    /** Ads的上下架需要审批. */
    isNeedAdsApprove!: boolean;
    /** APP的上下架需要审批. */
    isNeedAppApprove!: boolean;
    /** 设备上下线是否要审核 */
    isNeedDeviceApprove!: boolean;
    /** 红包上下线审核 */
    isNeedCouponApprove!: boolean;
    /** 广告是否自动下发, */
    isAdsAutoSendDown!: boolean;
    /** App是否下发 */
    isAppAutoSendDown!: boolean;
    /** APP是否自动下发 */
    isProductAutoSendDown!: boolean;
    /** 红包是否下发 */
    isCouponAutoSendDown!: boolean;
    /** Ads是否下发是否接受 */
    canAcceptAdsAutoSendDown!: boolean;
    /** App是否下发是否接受 */
    canAcceptAppAutoSendDown!: boolean;
    /** Product是否下发是否接受 */
    canAcceptProductAutoSendDown!: boolean;
    /** 红包是否下发是否接受 */
    canAcceptCouponAutoSendDown!: boolean;
    /** 店铺地址的ID */
    positionId!: number | undefined;
    position!: PositionDto;
    /** 详细地址 */
    addressDetail!: string | undefined;
    /** 开店时间 */
    openingTime!: moment.Moment | undefined;
    /** 关店时间 */
    closedTime!: moment.Moment | undefined;
    /** 自己电商的二维码规则. */
    qrcodeRules!: string | undefined;
    /** 默认在线店铺名称 */
    defaultOnlineShopName!: string | undefined;
    type!: StoreType;
    /** 店铺名称 */
    displayName!: string;
    /** 组织架构的ID */
    organizationUnitId!: number | undefined;
    /** 淘宝店铺的ID */
    taobaoStoreId!: string | undefined;
    /** 店铺类型 */
    storeType!: string | undefined;
    /** 店铺的设备信息 */
    storeDevicesInfo!: string | undefined;
    /** 房间ID */
    roomIds!: string | undefined;
    /** 品牌ID */
    brandId!: number | undefined;

    constructor(data?: IUpdateStoreInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.outerId = _data["outerId"];
            this.qrCodeExtraInfo = _data["qrCodeExtraInfo"];
            this.logoUrl = _data["logoUrl"];
            this.webAddressUrl = _data["webAddressUrl"];
            this.qrCodeUrl = _data["qrCodeUrl"];
            this.contact = _data["contact"];
            this.categoryId = _data["categoryId"];
            this.isNeedThingApprove = _data["isNeedThingApprove"];
            this.isNeedAdsApprove = _data["isNeedAdsApprove"];
            this.isNeedAppApprove = _data["isNeedAppApprove"];
            this.isNeedDeviceApprove = _data["isNeedDeviceApprove"];
            this.isNeedCouponApprove = _data["isNeedCouponApprove"];
            this.isAdsAutoSendDown = _data["isAdsAutoSendDown"];
            this.isAppAutoSendDown = _data["isAppAutoSendDown"];
            this.isProductAutoSendDown = _data["isProductAutoSendDown"];
            this.isCouponAutoSendDown = _data["isCouponAutoSendDown"];
            this.canAcceptAdsAutoSendDown = _data["canAcceptAdsAutoSendDown"];
            this.canAcceptAppAutoSendDown = _data["canAcceptAppAutoSendDown"];
            this.canAcceptProductAutoSendDown = _data["canAcceptProductAutoSendDown"];
            this.canAcceptCouponAutoSendDown = _data["canAcceptCouponAutoSendDown"];
            this.positionId = _data["positionId"];
            this.position = _data["position"] ? PositionDto.fromJS(_data["position"]) : <any>undefined;
            this.addressDetail = _data["addressDetail"];
            this.openingTime = _data["openingTime"] ? moment(_data["openingTime"].toString()) : <any>undefined;
            this.closedTime = _data["closedTime"] ? moment(_data["closedTime"].toString()) : <any>undefined;
            this.qrcodeRules = _data["qrcodeRules"];
            this.defaultOnlineShopName = _data["defaultOnlineShopName"];
            this.type = _data["type"];
            this.displayName = _data["displayName"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.taobaoStoreId = _data["taobaoStoreId"];
            this.storeType = _data["storeType"];
            this.storeDevicesInfo = _data["storeDevicesInfo"];
            this.roomIds = _data["roomIds"];
            this.brandId = _data["brandId"];
        }
    }

    static fromJS(data: any): UpdateStoreInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateStoreInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["outerId"] = this.outerId;
        data["qrCodeExtraInfo"] = this.qrCodeExtraInfo;
        data["logoUrl"] = this.logoUrl;
        data["webAddressUrl"] = this.webAddressUrl;
        data["qrCodeUrl"] = this.qrCodeUrl;
        data["contact"] = this.contact;
        data["categoryId"] = this.categoryId;
        data["isNeedThingApprove"] = this.isNeedThingApprove;
        data["isNeedAdsApprove"] = this.isNeedAdsApprove;
        data["isNeedAppApprove"] = this.isNeedAppApprove;
        data["isNeedDeviceApprove"] = this.isNeedDeviceApprove;
        data["isNeedCouponApprove"] = this.isNeedCouponApprove;
        data["isAdsAutoSendDown"] = this.isAdsAutoSendDown;
        data["isAppAutoSendDown"] = this.isAppAutoSendDown;
        data["isProductAutoSendDown"] = this.isProductAutoSendDown;
        data["isCouponAutoSendDown"] = this.isCouponAutoSendDown;
        data["canAcceptAdsAutoSendDown"] = this.canAcceptAdsAutoSendDown;
        data["canAcceptAppAutoSendDown"] = this.canAcceptAppAutoSendDown;
        data["canAcceptProductAutoSendDown"] = this.canAcceptProductAutoSendDown;
        data["canAcceptCouponAutoSendDown"] = this.canAcceptCouponAutoSendDown;
        data["positionId"] = this.positionId;
        data["position"] = this.position ? this.position.toJSON() : <any>undefined;
        data["addressDetail"] = this.addressDetail;
        data["openingTime"] = this.openingTime ? this.openingTime.toISOString() : <any>undefined;
        data["closedTime"] = this.closedTime ? this.closedTime.toISOString() : <any>undefined;
        data["qrcodeRules"] = this.qrcodeRules;
        data["defaultOnlineShopName"] = this.defaultOnlineShopName;
        data["type"] = this.type;
        data["displayName"] = this.displayName;
        data["organizationUnitId"] = this.organizationUnitId;
        data["taobaoStoreId"] = this.taobaoStoreId;
        data["storeType"] = this.storeType;
        data["storeDevicesInfo"] = this.storeDevicesInfo;
        data["roomIds"] = this.roomIds;
        data["brandId"] = this.brandId;
        return data; 
    }
}

export interface IUpdateStoreInput {
    /** 店铺ID */
    id: number;
    /** 门店商家自用编码,T-6300182 */
    outerId: string | undefined;
    /** 二维码的额外信息 */
    qrCodeExtraInfo: string | undefined;
    /** 店铺的Logo */
    logoUrl: string | undefined;
    /** 实体店铺的官网地址，一般情况下，是公共平台，只要带入店的id，就知道这家店的商品. */
    webAddressUrl: string | undefined;
    /** 二维码 */
    qrCodeUrl: string | undefined;
    /** 门店联系方式，多个以;分隔，如：0571-81113563-123;0571-81113563;13826881688;400-820-5555 */
    contact: string | undefined;
    /** 门店类目 */
    categoryId: string | undefined;
    /** Thing的上下架需要审批. */
    isNeedThingApprove: boolean;
    /** Ads的上下架需要审批. */
    isNeedAdsApprove: boolean;
    /** APP的上下架需要审批. */
    isNeedAppApprove: boolean;
    /** 设备上下线是否要审核 */
    isNeedDeviceApprove: boolean;
    /** 红包上下线审核 */
    isNeedCouponApprove: boolean;
    /** 广告是否自动下发, */
    isAdsAutoSendDown: boolean;
    /** App是否下发 */
    isAppAutoSendDown: boolean;
    /** APP是否自动下发 */
    isProductAutoSendDown: boolean;
    /** 红包是否下发 */
    isCouponAutoSendDown: boolean;
    /** Ads是否下发是否接受 */
    canAcceptAdsAutoSendDown: boolean;
    /** App是否下发是否接受 */
    canAcceptAppAutoSendDown: boolean;
    /** Product是否下发是否接受 */
    canAcceptProductAutoSendDown: boolean;
    /** 红包是否下发是否接受 */
    canAcceptCouponAutoSendDown: boolean;
    /** 店铺地址的ID */
    positionId: number | undefined;
    position: PositionDto;
    /** 详细地址 */
    addressDetail: string | undefined;
    /** 开店时间 */
    openingTime: moment.Moment | undefined;
    /** 关店时间 */
    closedTime: moment.Moment | undefined;
    /** 自己电商的二维码规则. */
    qrcodeRules: string | undefined;
    /** 默认在线店铺名称 */
    defaultOnlineShopName: string | undefined;
    type: StoreType;
    /** 店铺名称 */
    displayName: string;
    /** 组织架构的ID */
    organizationUnitId: number | undefined;
    /** 淘宝店铺的ID */
    taobaoStoreId: string | undefined;
    /** 店铺类型 */
    storeType: string | undefined;
    /** 店铺的设备信息 */
    storeDevicesInfo: string | undefined;
    /** 房间ID */
    roomIds: string | undefined;
    /** 品牌ID */
    brandId: number | undefined;
}

export class Position implements IPosition {
    state!: string | undefined;
    area!: string | undefined;
    province!: string | undefined;
    city!: string | undefined;
    county!: string | undefined;
    location!: string | undefined;
    zipCode!: string | undefined;
    longitude!: number | undefined;
    latitude!: number | undefined;
    code!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IPosition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.state = _data["state"];
            this.area = _data["area"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.county = _data["county"];
            this.location = _data["location"];
            this.zipCode = _data["zipCode"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
            this.code = _data["code"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Position {
        data = typeof data === 'object' ? data : {};
        let result = new Position();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["area"] = this.area;
        data["province"] = this.province;
        data["city"] = this.city;
        data["county"] = this.county;
        data["location"] = this.location;
        data["zipCode"] = this.zipCode;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["code"] = this.code;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IPosition {
    state: string | undefined;
    area: string | undefined;
    province: string | undefined;
    city: string | undefined;
    county: string | undefined;
    location: string | undefined;
    zipCode: string | undefined;
    longitude: number | undefined;
    latitude: number | undefined;
    code: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class Store implements IStore {
    organizationUnitId!: number | undefined;
    isNeedThingApprove!: boolean;
    isNeedAdsApprove!: boolean;
    isNeedAppApprove!: boolean;
    isNeedDeviceApprove!: boolean;
    isNeedCouponApprove!: boolean;
    isAdsAutoSendDown!: boolean;
    isAppAutoSendDown!: boolean;
    isProductAutoSendDown!: boolean;
    isCouponAutoSendDown!: boolean;
    canAcceptAdsAutoSendDown!: boolean;
    canAcceptAppAutoSendDown!: boolean;
    canAcceptProductAutoSendDown!: boolean;
    canAcceptCouponAutoSendDown!: boolean;
    position!: Position;
    storeType!: string | undefined;
    storeDevicesInfo!: string | undefined;
    storeStatus!: StoreStatus;
    roomIds!: string | undefined;
    brandId!: number | undefined;
    tenantId!: number;
    displayName!: string;
    outerId!: string | undefined;
    qrCodeExtraInfo!: string | undefined;
    logoUrl!: string | undefined;
    webAddressUrl!: string | undefined;
    qrCodeUrl!: string | undefined;
    contact!: string | undefined;
    categoryId!: string | undefined;
    positionId!: number | undefined;
    addressDetail!: string | undefined;
    openingTime!: moment.Moment | undefined;
    closedTime!: moment.Moment | undefined;
    qrcodeRules!: string | undefined;
    defaultOnlineShopName!: string | undefined;
    type!: StoreType;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IStore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationUnitId = _data["organizationUnitId"];
            this.isNeedThingApprove = _data["isNeedThingApprove"];
            this.isNeedAdsApprove = _data["isNeedAdsApprove"];
            this.isNeedAppApprove = _data["isNeedAppApprove"];
            this.isNeedDeviceApprove = _data["isNeedDeviceApprove"];
            this.isNeedCouponApprove = _data["isNeedCouponApprove"];
            this.isAdsAutoSendDown = _data["isAdsAutoSendDown"];
            this.isAppAutoSendDown = _data["isAppAutoSendDown"];
            this.isProductAutoSendDown = _data["isProductAutoSendDown"];
            this.isCouponAutoSendDown = _data["isCouponAutoSendDown"];
            this.canAcceptAdsAutoSendDown = _data["canAcceptAdsAutoSendDown"];
            this.canAcceptAppAutoSendDown = _data["canAcceptAppAutoSendDown"];
            this.canAcceptProductAutoSendDown = _data["canAcceptProductAutoSendDown"];
            this.canAcceptCouponAutoSendDown = _data["canAcceptCouponAutoSendDown"];
            this.position = _data["position"] ? Position.fromJS(_data["position"]) : <any>undefined;
            this.storeType = _data["storeType"];
            this.storeDevicesInfo = _data["storeDevicesInfo"];
            this.storeStatus = _data["storeStatus"];
            this.roomIds = _data["roomIds"];
            this.brandId = _data["brandId"];
            this.tenantId = _data["tenantId"];
            this.displayName = _data["displayName"];
            this.outerId = _data["outerId"];
            this.qrCodeExtraInfo = _data["qrCodeExtraInfo"];
            this.logoUrl = _data["logoUrl"];
            this.webAddressUrl = _data["webAddressUrl"];
            this.qrCodeUrl = _data["qrCodeUrl"];
            this.contact = _data["contact"];
            this.categoryId = _data["categoryId"];
            this.positionId = _data["positionId"];
            this.addressDetail = _data["addressDetail"];
            this.openingTime = _data["openingTime"] ? moment(_data["openingTime"].toString()) : <any>undefined;
            this.closedTime = _data["closedTime"] ? moment(_data["closedTime"].toString()) : <any>undefined;
            this.qrcodeRules = _data["qrcodeRules"];
            this.defaultOnlineShopName = _data["defaultOnlineShopName"];
            this.type = _data["type"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Store {
        data = typeof data === 'object' ? data : {};
        let result = new Store();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["isNeedThingApprove"] = this.isNeedThingApprove;
        data["isNeedAdsApprove"] = this.isNeedAdsApprove;
        data["isNeedAppApprove"] = this.isNeedAppApprove;
        data["isNeedDeviceApprove"] = this.isNeedDeviceApprove;
        data["isNeedCouponApprove"] = this.isNeedCouponApprove;
        data["isAdsAutoSendDown"] = this.isAdsAutoSendDown;
        data["isAppAutoSendDown"] = this.isAppAutoSendDown;
        data["isProductAutoSendDown"] = this.isProductAutoSendDown;
        data["isCouponAutoSendDown"] = this.isCouponAutoSendDown;
        data["canAcceptAdsAutoSendDown"] = this.canAcceptAdsAutoSendDown;
        data["canAcceptAppAutoSendDown"] = this.canAcceptAppAutoSendDown;
        data["canAcceptProductAutoSendDown"] = this.canAcceptProductAutoSendDown;
        data["canAcceptCouponAutoSendDown"] = this.canAcceptCouponAutoSendDown;
        data["position"] = this.position ? this.position.toJSON() : <any>undefined;
        data["storeType"] = this.storeType;
        data["storeDevicesInfo"] = this.storeDevicesInfo;
        data["storeStatus"] = this.storeStatus;
        data["roomIds"] = this.roomIds;
        data["brandId"] = this.brandId;
        data["tenantId"] = this.tenantId;
        data["displayName"] = this.displayName;
        data["outerId"] = this.outerId;
        data["qrCodeExtraInfo"] = this.qrCodeExtraInfo;
        data["logoUrl"] = this.logoUrl;
        data["webAddressUrl"] = this.webAddressUrl;
        data["qrCodeUrl"] = this.qrCodeUrl;
        data["contact"] = this.contact;
        data["categoryId"] = this.categoryId;
        data["positionId"] = this.positionId;
        data["addressDetail"] = this.addressDetail;
        data["openingTime"] = this.openingTime ? this.openingTime.toISOString() : <any>undefined;
        data["closedTime"] = this.closedTime ? this.closedTime.toISOString() : <any>undefined;
        data["qrcodeRules"] = this.qrcodeRules;
        data["defaultOnlineShopName"] = this.defaultOnlineShopName;
        data["type"] = this.type;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IStore {
    organizationUnitId: number | undefined;
    isNeedThingApprove: boolean;
    isNeedAdsApprove: boolean;
    isNeedAppApprove: boolean;
    isNeedDeviceApprove: boolean;
    isNeedCouponApprove: boolean;
    isAdsAutoSendDown: boolean;
    isAppAutoSendDown: boolean;
    isProductAutoSendDown: boolean;
    isCouponAutoSendDown: boolean;
    canAcceptAdsAutoSendDown: boolean;
    canAcceptAppAutoSendDown: boolean;
    canAcceptProductAutoSendDown: boolean;
    canAcceptCouponAutoSendDown: boolean;
    position: Position;
    storeType: string | undefined;
    storeDevicesInfo: string | undefined;
    storeStatus: StoreStatus;
    roomIds: string | undefined;
    brandId: number | undefined;
    tenantId: number;
    displayName: string;
    outerId: string | undefined;
    qrCodeExtraInfo: string | undefined;
    logoUrl: string | undefined;
    webAddressUrl: string | undefined;
    qrCodeUrl: string | undefined;
    contact: string | undefined;
    categoryId: string | undefined;
    positionId: number | undefined;
    addressDetail: string | undefined;
    openingTime: moment.Moment | undefined;
    closedTime: moment.Moment | undefined;
    qrcodeRules: string | undefined;
    defaultOnlineShopName: string | undefined;
    type: StoreType;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

/** 发布店铺 */
export class PublishStoresInput implements IPublishStoresInput {
    entityIds!: number[] | undefined;
    ouList!: IdTypeDto[] | undefined;
    /** add,addonly,delete */
    action!: string | undefined;

    constructor(data?: IPublishStoresInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["entityIds"])) {
                this.entityIds = [] as any;
                for (let item of _data["entityIds"])
                    this.entityIds!.push(item);
            }
            if (Array.isArray(_data["ouList"])) {
                this.ouList = [] as any;
                for (let item of _data["ouList"])
                    this.ouList!.push(IdTypeDto.fromJS(item));
            }
            this.action = _data["action"];
        }
    }

    static fromJS(data: any): PublishStoresInput {
        data = typeof data === 'object' ? data : {};
        let result = new PublishStoresInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.entityIds)) {
            data["entityIds"] = [];
            for (let item of this.entityIds)
                data["entityIds"].push(item);
        }
        if (Array.isArray(this.ouList)) {
            data["ouList"] = [];
            for (let item of this.ouList)
                data["ouList"].push(item.toJSON());
        }
        data["action"] = this.action;
        return data; 
    }
}

/** 发布店铺 */
export interface IPublishStoresInput {
    entityIds: number[] | undefined;
    ouList: IdTypeDto[] | undefined;
    /** add,addonly,delete */
    action: string | undefined;
}

export class StoreAuditInput implements IStoreAuditInput {
    storeIds!: number[] | undefined;
    currentAuditStatus!: StoreStatus;
    targetAuditStatus!: StoreStatus;

    constructor(data?: IStoreAuditInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["storeIds"])) {
                this.storeIds = [] as any;
                for (let item of _data["storeIds"])
                    this.storeIds!.push(item);
            }
            this.currentAuditStatus = _data["currentAuditStatus"];
            this.targetAuditStatus = _data["targetAuditStatus"];
        }
    }

    static fromJS(data: any): StoreAuditInput {
        data = typeof data === 'object' ? data : {};
        let result = new StoreAuditInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.storeIds)) {
            data["storeIds"] = [];
            for (let item of this.storeIds)
                data["storeIds"].push(item);
        }
        data["currentAuditStatus"] = this.currentAuditStatus;
        data["targetAuditStatus"] = this.targetAuditStatus;
        return data; 
    }
}

export interface IStoreAuditInput {
    storeIds: number[] | undefined;
    currentAuditStatus: StoreStatus;
    targetAuditStatus: StoreStatus;
}

/** 新建店铺额外信息 */
export class CreateStoreExtraInput implements ICreateStoreExtraInput {
    /** 店铺ID */
    storeId!: number;
    platformType!: ExternalEnum;
    /** 店铺额外信息的ID */
    extraStoreId!: string | undefined;
    /** 额外信息内容 */
    contact!: string | undefined;
    bizType!: string | undefined;
    /** 店铺分类的ID */
    categoryId!: string | undefined;
    /** 二维码额外信息 */
    qrCodeExtraInfo!: string | undefined;

    constructor(data?: ICreateStoreExtraInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.storeId = _data["storeId"];
            this.platformType = _data["platformType"];
            this.extraStoreId = _data["extraStoreId"];
            this.contact = _data["contact"];
            this.bizType = _data["bizType"];
            this.categoryId = _data["categoryId"];
            this.qrCodeExtraInfo = _data["qrCodeExtraInfo"];
        }
    }

    static fromJS(data: any): CreateStoreExtraInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateStoreExtraInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["storeId"] = this.storeId;
        data["platformType"] = this.platformType;
        data["extraStoreId"] = this.extraStoreId;
        data["contact"] = this.contact;
        data["bizType"] = this.bizType;
        data["categoryId"] = this.categoryId;
        data["qrCodeExtraInfo"] = this.qrCodeExtraInfo;
        return data; 
    }
}

/** 新建店铺额外信息 */
export interface ICreateStoreExtraInput {
    /** 店铺ID */
    storeId: number;
    platformType: ExternalEnum;
    /** 店铺额外信息的ID */
    extraStoreId: string | undefined;
    /** 额外信息内容 */
    contact: string | undefined;
    bizType: string | undefined;
    /** 店铺分类的ID */
    categoryId: string | undefined;
    /** 二维码额外信息 */
    qrCodeExtraInfo: string | undefined;
}

export class StoreExtraDto implements IStoreExtraDto {
    tenantId!: number;
    storeId!: number;
    storeName!: string | undefined;
    platformType!: ExternalEnum;
    extraStoreId!: string | undefined;
    contact!: string | undefined;
    bizType!: string | undefined;
    categoryId!: string | undefined;
    qrCodeExtraInfo!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IStoreExtraDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.storeId = _data["storeId"];
            this.storeName = _data["storeName"];
            this.platformType = _data["platformType"];
            this.extraStoreId = _data["extraStoreId"];
            this.contact = _data["contact"];
            this.bizType = _data["bizType"];
            this.categoryId = _data["categoryId"];
            this.qrCodeExtraInfo = _data["qrCodeExtraInfo"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): StoreExtraDto {
        data = typeof data === 'object' ? data : {};
        let result = new StoreExtraDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["storeId"] = this.storeId;
        data["storeName"] = this.storeName;
        data["platformType"] = this.platformType;
        data["extraStoreId"] = this.extraStoreId;
        data["contact"] = this.contact;
        data["bizType"] = this.bizType;
        data["categoryId"] = this.categoryId;
        data["qrCodeExtraInfo"] = this.qrCodeExtraInfo;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IStoreExtraDto {
    tenantId: number;
    storeId: number;
    storeName: string | undefined;
    platformType: ExternalEnum;
    extraStoreId: string | undefined;
    contact: string | undefined;
    bizType: string | undefined;
    categoryId: string | undefined;
    qrCodeExtraInfo: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class UpdateStoreExtraInput implements IUpdateStoreExtraInput {
    id!: number;
    /** 店铺ID */
    storeId!: number;
    platformType!: ExternalEnum;
    /** 店铺额外信息的ID */
    extraStoreId!: string | undefined;
    /** 额外信息内容 */
    contact!: string | undefined;
    bizType!: string | undefined;
    /** 店铺分类的ID */
    categoryId!: string | undefined;
    /** 二维码额外信息 */
    qrCodeExtraInfo!: string | undefined;

    constructor(data?: IUpdateStoreExtraInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.storeId = _data["storeId"];
            this.platformType = _data["platformType"];
            this.extraStoreId = _data["extraStoreId"];
            this.contact = _data["contact"];
            this.bizType = _data["bizType"];
            this.categoryId = _data["categoryId"];
            this.qrCodeExtraInfo = _data["qrCodeExtraInfo"];
        }
    }

    static fromJS(data: any): UpdateStoreExtraInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateStoreExtraInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["storeId"] = this.storeId;
        data["platformType"] = this.platformType;
        data["extraStoreId"] = this.extraStoreId;
        data["contact"] = this.contact;
        data["bizType"] = this.bizType;
        data["categoryId"] = this.categoryId;
        data["qrCodeExtraInfo"] = this.qrCodeExtraInfo;
        return data; 
    }
}

export interface IUpdateStoreExtraInput {
    id: number;
    /** 店铺ID */
    storeId: number;
    platformType: ExternalEnum;
    /** 店铺额外信息的ID */
    extraStoreId: string | undefined;
    /** 额外信息内容 */
    contact: string | undefined;
    bizType: string | undefined;
    /** 店铺分类的ID */
    categoryId: string | undefined;
    /** 二维码额外信息 */
    qrCodeExtraInfo: string | undefined;
}

export class StoreExtraDtoPagedResultDto implements IStoreExtraDtoPagedResultDto {
    totalCount!: number;
    items!: StoreExtraDto[] | undefined;

    constructor(data?: IStoreExtraDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(StoreExtraDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StoreExtraDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StoreExtraDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStoreExtraDtoPagedResultDto {
    totalCount: number;
    items: StoreExtraDto[] | undefined;
}

export class StoreKPIDto implements IStoreKPIDto {
    storeName!: string | undefined;
    storeOuterId!: string | undefined;
    scaleTime!: moment.Moment;
    kpiScale!: GroupKPIScaleEnum;
    /** 考核内容 :点击数，销售额 */
    name!: string | undefined;
    value!: number;
    description!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IStoreKPIDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.storeName = _data["storeName"];
            this.storeOuterId = _data["storeOuterId"];
            this.scaleTime = _data["scaleTime"] ? moment(_data["scaleTime"].toString()) : <any>undefined;
            this.kpiScale = _data["kpiScale"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.description = _data["description"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): StoreKPIDto {
        data = typeof data === 'object' ? data : {};
        let result = new StoreKPIDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["storeName"] = this.storeName;
        data["storeOuterId"] = this.storeOuterId;
        data["scaleTime"] = this.scaleTime ? this.scaleTime.toISOString() : <any>undefined;
        data["kpiScale"] = this.kpiScale;
        data["name"] = this.name;
        data["value"] = this.value;
        data["description"] = this.description;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IStoreKPIDto {
    storeName: string | undefined;
    storeOuterId: string | undefined;
    scaleTime: moment.Moment;
    kpiScale: GroupKPIScaleEnum;
    /** 考核内容 :点击数，销售额 */
    name: string | undefined;
    value: number;
    description: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class StoreKPIDtoPagedResultDto implements IStoreKPIDtoPagedResultDto {
    totalCount!: number;
    items!: StoreKPIDto[] | undefined;

    constructor(data?: IStoreKPIDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(StoreKPIDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StoreKPIDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StoreKPIDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStoreKPIDtoPagedResultDto {
    totalCount: number;
    items: StoreKPIDto[] | undefined;
}

/** 新建店铺KPI */
export class CreateStoreKpiDtoInput implements ICreateStoreKpiDtoInput {
    /** 店铺ID */
    storeId!: number;
    /** 考核日期 */
    scaleTime!: string | undefined;
    kpiScale!: GroupKPIScaleEnum;
    /** 考核内容 :点击数，销售额 */
    name!: string | undefined;
    /** 分值 */
    value!: number;
    /** 描述 */
    description!: string | undefined;

    constructor(data?: ICreateStoreKpiDtoInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.storeId = _data["storeId"];
            this.scaleTime = _data["scaleTime"];
            this.kpiScale = _data["kpiScale"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateStoreKpiDtoInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateStoreKpiDtoInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["storeId"] = this.storeId;
        data["scaleTime"] = this.scaleTime;
        data["kpiScale"] = this.kpiScale;
        data["name"] = this.name;
        data["value"] = this.value;
        data["description"] = this.description;
        return data; 
    }
}

/** 新建店铺KPI */
export interface ICreateStoreKpiDtoInput {
    /** 店铺ID */
    storeId: number;
    /** 考核日期 */
    scaleTime: string | undefined;
    kpiScale: GroupKPIScaleEnum;
    /** 考核内容 :点击数，销售额 */
    name: string | undefined;
    /** 分值 */
    value: number;
    /** 描述 */
    description: string | undefined;
}

export class UpdateStoreKpiDtoInput implements IUpdateStoreKpiDtoInput {
    id!: number;
    /** 店铺ID */
    storeId!: number;
    /** 考核日期 */
    scaleTime!: string | undefined;
    kpiScale!: GroupKPIScaleEnum;
    /** 考核内容 :点击数，销售额 */
    name!: string | undefined;
    /** 分值 */
    value!: number;
    /** 描述 */
    description!: string | undefined;

    constructor(data?: IUpdateStoreKpiDtoInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.storeId = _data["storeId"];
            this.scaleTime = _data["scaleTime"];
            this.kpiScale = _data["kpiScale"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateStoreKpiDtoInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateStoreKpiDtoInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["storeId"] = this.storeId;
        data["scaleTime"] = this.scaleTime;
        data["kpiScale"] = this.kpiScale;
        data["name"] = this.name;
        data["value"] = this.value;
        data["description"] = this.description;
        return data; 
    }
}

export interface IUpdateStoreKpiDtoInput {
    id: number;
    /** 店铺ID */
    storeId: number;
    /** 考核日期 */
    scaleTime: string | undefined;
    kpiScale: GroupKPIScaleEnum;
    /** 考核内容 :点击数，销售额 */
    name: string | undefined;
    /** 分值 */
    value: number;
    /** 描述 */
    description: string | undefined;
}

export enum TagType {
    Resource = 0,
    Device = 1,
    Product = 2,
    Ads = 3,
    Other = 4,
    Brand = 5,
    Question = 6,
    Counter = 7,
    WechatPublicMessage = 8,
    UxPage = 9,
}

export class TagDto implements ITagDto {
    value!: string | undefined;
    type!: TagType;
    iconUrl!: string | undefined;
    isSpecial!: boolean;
    tenantId!: number;
    organizationUnitId!: number | undefined;
    /** 显示 Entity 的排序顺序. */
    orderNumber!: number;
    description!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: ITagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.type = _data["type"];
            this.iconUrl = _data["iconUrl"];
            this.isSpecial = _data["isSpecial"];
            this.tenantId = _data["tenantId"];
            this.organizationUnitId = _data["organizationUnitId"];
            this.orderNumber = _data["orderNumber"];
            this.description = _data["description"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TagDto {
        data = typeof data === 'object' ? data : {};
        let result = new TagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["type"] = this.type;
        data["iconUrl"] = this.iconUrl;
        data["isSpecial"] = this.isSpecial;
        data["tenantId"] = this.tenantId;
        data["organizationUnitId"] = this.organizationUnitId;
        data["orderNumber"] = this.orderNumber;
        data["description"] = this.description;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITagDto {
    value: string | undefined;
    type: TagType;
    iconUrl: string | undefined;
    isSpecial: boolean;
    tenantId: number;
    organizationUnitId: number | undefined;
    /** 显示 Entity 的排序顺序. */
    orderNumber: number;
    description: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class TagDtoPagedResultDto implements ITagDtoPagedResultDto {
    totalCount!: number;
    items!: TagDto[] | undefined;

    constructor(data?: ITagDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TagDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TagDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new TagDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITagDtoPagedResultDto {
    totalCount: number;
    items: TagDto[] | undefined;
}

export class CreateTagInput implements ICreateTagInput {
    value!: string | undefined;
    type!: TagType;
    iconUrl!: string | undefined;
    isSpecial!: boolean;
    /** 显示 Entity 的排序顺序. */
    orderNumber!: number;
    description!: string | undefined;

    constructor(data?: ICreateTagInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.type = _data["type"];
            this.iconUrl = _data["iconUrl"];
            this.isSpecial = _data["isSpecial"];
            this.orderNumber = _data["orderNumber"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateTagInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTagInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["type"] = this.type;
        data["iconUrl"] = this.iconUrl;
        data["isSpecial"] = this.isSpecial;
        data["orderNumber"] = this.orderNumber;
        data["description"] = this.description;
        return data; 
    }
}

export interface ICreateTagInput {
    value: string | undefined;
    type: TagType;
    iconUrl: string | undefined;
    isSpecial: boolean;
    /** 显示 Entity 的排序顺序. */
    orderNumber: number;
    description: string | undefined;
}

export class UpdateTagInput implements IUpdateTagInput {
    id!: number;
    value!: string | undefined;
    type!: TagType;
    iconUrl!: string | undefined;
    isSpecial!: boolean;
    /** 显示 Entity 的排序顺序. */
    orderNumber!: number;
    description!: string | undefined;

    constructor(data?: IUpdateTagInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.value = _data["value"];
            this.type = _data["type"];
            this.iconUrl = _data["iconUrl"];
            this.isSpecial = _data["isSpecial"];
            this.orderNumber = _data["orderNumber"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateTagInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTagInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        data["type"] = this.type;
        data["iconUrl"] = this.iconUrl;
        data["isSpecial"] = this.isSpecial;
        data["orderNumber"] = this.orderNumber;
        data["description"] = this.description;
        return data; 
    }
}

export interface IUpdateTagInput {
    id: number;
    value: string | undefined;
    type: TagType;
    iconUrl: string | undefined;
    isSpecial: boolean;
    /** 显示 Entity 的排序顺序. */
    orderNumber: number;
    description: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}