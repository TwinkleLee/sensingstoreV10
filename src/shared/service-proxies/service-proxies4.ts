/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.3.0 (NJsonSchema v10.3.6.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { DateTime } from 'luxon';
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_METAPHYSICS_URL = new InjectionToken<string>('API_METAPHYSICS_URL');

@Injectable()
export class DateMetaPhysicsServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_METAPHYSICS_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    importDateMetaphysics(input: GetImportDateMetaPhysicsInput | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/DateMetaPhysics/ImportDateMetaphysics";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportDateMetaphysics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportDateMetaphysics(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processImportDateMetaphysics(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param startTime (optional) 
     * @param endTime (optional) 
     * @param typeId (optional) 
     * @param metaPhysicsId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getDateMetaphysicsList(startTime: moment.Moment | null | undefined, endTime: moment.Moment | null | undefined, typeId: number | null | undefined, metaPhysicsId: number | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfDateMetaphysicsListDto> {
        let url_ = this.baseUrl + "/api/services/app/DateMetaPhysics/GetDateMetaphysicsList?";
        if (startTime !== undefined && startTime !== null)
            url_ += "StartTime=" + encodeURIComponent(startTime ? "" + startTime.toJSON() : "") + "&";
        if (endTime !== undefined && endTime !== null)
            url_ += "EndTime=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        if (typeId !== undefined && typeId !== null)
            url_ += "TypeId=" + encodeURIComponent("" + typeId) + "&";
        if (metaPhysicsId !== undefined && metaPhysicsId !== null)
            url_ += "MetaPhysicsId=" + encodeURIComponent("" + metaPhysicsId) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDateMetaphysicsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDateMetaphysicsList(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfDateMetaphysicsListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfDateMetaphysicsListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDateMetaphysicsList(response: HttpResponseBase): Observable<PagedResultDtoOfDateMetaphysicsListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfDateMetaphysicsListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfDateMetaphysicsListDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getDateMetaPhysics(id: number | null | undefined): Observable<DateMetaphysicsDto> {
        let url_ = this.baseUrl + "/api/services/app/DateMetaPhysics/GetDateMetaPhysics?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDateMetaPhysics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDateMetaPhysics(<any>response_);
                } catch (e) {
                    return <Observable<DateMetaphysicsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DateMetaphysicsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDateMetaPhysics(response: HttpResponseBase): Observable<DateMetaphysicsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DateMetaphysicsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DateMetaphysicsDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    postImportFile(input: FileParameter | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/DateMetaPhysics/PostImportFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (input !== null && input !== undefined)
            content_.append("input", input.data, input.fileName ? input.fileName : "input");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostImportFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostImportFile(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processPostImportFile(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    createDateMetaPhysics(input: CreateDateMetaPhysicsInput | null | undefined): Observable<DateMetaphysicsDto> {
        let url_ = this.baseUrl + "/api/services/app/DateMetaPhysics/CreateDateMetaPhysics";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateDateMetaPhysics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDateMetaPhysics(<any>response_);
                } catch (e) {
                    return <Observable<DateMetaphysicsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DateMetaphysicsDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateDateMetaPhysics(response: HttpResponseBase): Observable<DateMetaphysicsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DateMetaphysicsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DateMetaphysicsDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    updateDateMetaphysics(input: UpdateDateMetaPhysicsInput | null | undefined): Observable<DateMetaphysicsDto> {
        let url_ = this.baseUrl + "/api/services/app/DateMetaPhysics/UpdateDateMetaphysics";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateDateMetaphysics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateDateMetaphysics(<any>response_);
                } catch (e) {
                    return <Observable<DateMetaphysicsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DateMetaphysicsDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateDateMetaphysics(response: HttpResponseBase): Observable<DateMetaphysicsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DateMetaphysicsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DateMetaphysicsDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteDateMetaphysics(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/DateMetaPhysics/DeleteDateMetaphysics?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDateMetaphysics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDateMetaphysics(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDateMetaphysics(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    deleteDateMetaphysicsList(input: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/DateMetaPhysics/DeleteDateMetaphysicsList?";
        if (input !== undefined && input !== null)
            input && input.forEach(item => { url_ += "input=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDateMetaphysicsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDateMetaphysicsList(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDateMetaphysicsList(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    createRecommend(input: CreateRecommendInput | null | undefined): Observable<RecommendDto> {
        let url_ = this.baseUrl + "/api/services/app/DateMetaPhysics/CreateRecommend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRecommend(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRecommend(<any>response_);
                } catch (e) {
                    return <Observable<RecommendDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecommendDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateRecommend(response: HttpResponseBase): Observable<RecommendDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecommendDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecommendDto>(<any>null);
    }

    /**
     * @param startTime (optional) 
     * @param endTime (optional) 
     * @param typeId (optional) 
     * @param metaPhysicsId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getDateMetaphysicsBySubkey(subKey: string, startTime: moment.Moment | null | undefined, endTime: moment.Moment | null | undefined, typeId: number | null | undefined, metaPhysicsId: number | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfDateMetaphysicsDto> {
        let url_ = this.baseUrl + "/api/services/app/DateMetaPhysics/GetDateMetaphysicsBySubkey?";
        if (subKey === undefined || subKey === null)
            throw new Error("The parameter 'subKey' must be defined and cannot be null.");
        else
            url_ += "SubKey=" + encodeURIComponent("" + subKey) + "&";
        if (startTime !== undefined && startTime !== null)
            url_ += "StartTime=" + encodeURIComponent(startTime ? "" + startTime.toJSON() : "") + "&";
        if (endTime !== undefined && endTime !== null)
            url_ += "EndTime=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        if (typeId !== undefined && typeId !== null)
            url_ += "TypeId=" + encodeURIComponent("" + typeId) + "&";
        if (metaPhysicsId !== undefined && metaPhysicsId !== null)
            url_ += "MetaPhysicsId=" + encodeURIComponent("" + metaPhysicsId) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDateMetaphysicsBySubkey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDateMetaphysicsBySubkey(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfDateMetaphysicsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfDateMetaphysicsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDateMetaphysicsBySubkey(response: HttpResponseBase): Observable<PagedResultDtoOfDateMetaphysicsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfDateMetaphysicsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfDateMetaphysicsDto>(<any>null);
    }

    /**
     * @return Success
     */
    healthCheck(): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/DateMetaPhysics/HealthCheck";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHealthCheck(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHealthCheck(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processHealthCheck(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class FaceTagsServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_METAPHYSICS_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    postImportFile(input: FileParameter | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/PostImportFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (input !== null && input !== undefined)
            content_.append("input", input.data, input.fileName ? input.fileName : "input");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostImportFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostImportFile(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processPostImportFile(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @return Success
     */
    syncFromHost(): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/SyncFromHost";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSyncFromHost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSyncFromHost(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processSyncFromHost(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param gender (optional) 
     * @param age (optional) 
     * @param happiness (optional) 
     * @param beautyScore (optional) 
     * @param extensionData (optional) 
     * @return Success
     */
    getTagRecommendsBySubkey(subKey: string, gender: string | null | undefined, age: number | null | undefined, happiness: number | null | undefined, beautyScore: number | null | undefined, extensionData: string | null | undefined): Observable<FaceTagsRecommendsDto> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/GetTagRecommendsBySubkey?";
        if (subKey === undefined || subKey === null)
            throw new Error("The parameter 'subKey' must be defined and cannot be null.");
        else
            url_ += "SubKey=" + encodeURIComponent("" + subKey) + "&";
        if (gender !== undefined && gender !== null)
            url_ += "Gender=" + encodeURIComponent("" + gender) + "&";
        if (age !== undefined && age !== null)
            url_ += "Age=" + encodeURIComponent("" + age) + "&";
        if (happiness !== undefined && happiness !== null)
            url_ += "Happiness=" + encodeURIComponent("" + happiness) + "&";
        if (beautyScore !== undefined && beautyScore !== null)
            url_ += "BeautyScore=" + encodeURIComponent("" + beautyScore) + "&";
        if (extensionData !== undefined && extensionData !== null)
            url_ += "ExtensionData=" + encodeURIComponent("" + extensionData) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTagRecommendsBySubkey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTagRecommendsBySubkey(<any>response_);
                } catch (e) {
                    return <Observable<FaceTagsRecommendsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FaceTagsRecommendsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTagRecommendsBySubkey(response: HttpResponseBase): Observable<FaceTagsRecommendsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FaceTagsRecommendsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FaceTagsRecommendsDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    batchEnableTags(input: number[] | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/BatchEnableTags";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBatchEnableTags(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchEnableTags(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processBatchEnableTags(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    batchDisableTags(input: number[] | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/BatchDisableTags";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBatchDisableTags(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchDisableTags(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processBatchDisableTags(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    getTagRecommendsByFace(input: GetTagRecommendsByFaceInput | null | undefined): Observable<FaceTagsRecommendsDto> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/GetTagRecommendsByFace";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTagRecommendsByFace(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTagRecommendsByFace(<any>response_);
                } catch (e) {
                    return <Observable<FaceTagsRecommendsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FaceTagsRecommendsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTagRecommendsByFace(response: HttpResponseBase): Observable<FaceTagsRecommendsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FaceTagsRecommendsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FaceTagsRecommendsDto>(<any>null);
    }

    /**
     * @param gender (optional) 
     * @param priority (optional) 
     * @param isEnabled (optional) 
     * @param type (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getFaceTagList(gender: string | null | undefined, priority: number | null | undefined, isEnabled: boolean | null | undefined, type: string | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfFaceTagDto> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/GetFaceTagList?";
        if (gender !== undefined && gender !== null)
            url_ += "Gender=" + encodeURIComponent("" + gender) + "&";
        if (priority !== undefined && priority !== null)
            url_ += "Priority=" + encodeURIComponent("" + priority) + "&";
        if (isEnabled !== undefined && isEnabled !== null)
            url_ += "IsEnabled=" + encodeURIComponent("" + isEnabled) + "&";
        if (type !== undefined && type !== null)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFaceTagList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFaceTagList(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfFaceTagDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfFaceTagDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetFaceTagList(response: HttpResponseBase): Observable<PagedResultDtoOfFaceTagDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfFaceTagDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfFaceTagDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getFaceTagById(id: number | null | undefined): Observable<FaceTagDto> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/GetFaceTagById?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFaceTagById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFaceTagById(<any>response_);
                } catch (e) {
                    return <Observable<FaceTagDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FaceTagDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetFaceTagById(response: HttpResponseBase): Observable<FaceTagDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FaceTagDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FaceTagDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    createFaceTag(input: CreateFaceTagInput | null | undefined): Observable<FaceTagDto> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/CreateFaceTag";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateFaceTag(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateFaceTag(<any>response_);
                } catch (e) {
                    return <Observable<FaceTagDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FaceTagDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateFaceTag(response: HttpResponseBase): Observable<FaceTagDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FaceTagDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FaceTagDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    updateFaceTag(input: UpdateFaceTagInput | null | undefined): Observable<FaceTagDto> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/UpdateFaceTag";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFaceTag(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFaceTag(<any>response_);
                } catch (e) {
                    return <Observable<FaceTagDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FaceTagDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateFaceTag(response: HttpResponseBase): Observable<FaceTagDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FaceTagDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FaceTagDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteFaceTag(id: number | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/DeleteFaceTag?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFaceTag(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFaceTag(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFaceTag(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    deleteFaceTagList(input: number[] | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/DeleteFaceTagList?";
        if (input !== undefined && input !== null)
            input && input.forEach(item => { url_ += "input=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFaceTagList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFaceTagList(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFaceTagList(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteFaceRecommend(id: number | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/DeleteFaceRecommend?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFaceRecommend(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFaceRecommend(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFaceRecommend(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    deleteFaceRecommendList(input: number[] | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/DeleteFaceRecommendList?";
        if (input !== undefined && input !== null)
            input && input.forEach(item => { url_ += "input=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFaceRecommendList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFaceRecommendList(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFaceRecommendList(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    postGetTagByFace(input: FileParameter | null | undefined): Observable<FaceTagDto> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/PostGetTagByFace";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (input !== null && input !== undefined)
            content_.append("input", input.data, input.fileName ? input.fileName : "input");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostGetTagByFace(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostGetTagByFace(<any>response_);
                } catch (e) {
                    return <Observable<FaceTagDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FaceTagDto>><any>_observableThrow(response_);
        }));
    }

    protected processPostGetTagByFace(response: HttpResponseBase): Observable<FaceTagDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FaceTagDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FaceTagDto>(<any>null);
    }

    /**
     * @return Success
     */
    healthCheck(): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FaceTags/HealthCheck";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHealthCheck(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHealthCheck(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processHealthCheck(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class IdentityServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_METAPHYSICS_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getClaims(): Observable<string> {
        let url_ = this.baseUrl + "/Identity/GetClaims";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClaims(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetClaims(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class MetaPhysicsServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_METAPHYSICS_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    importMetaphysics(): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/ImportMetaphysics";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportMetaphysics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportMetaphysics(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processImportMetaphysics(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param startTime (optional) 
     * @param endTime (optional) 
     * @param typeId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getCopyMetaPhysics(startTime: moment.Moment | null | undefined, endTime: moment.Moment | null | undefined, typeId: number | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/GetCopyMetaPhysics?";
        if (startTime !== undefined && startTime !== null)
            url_ += "StartTime=" + encodeURIComponent(startTime ? "" + startTime.toJSON() : "") + "&";
        if (endTime !== undefined && endTime !== null)
            url_ += "EndTime=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        if (typeId !== undefined && typeId !== null)
            url_ += "TypeId=" + encodeURIComponent("" + typeId) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCopyMetaPhysics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCopyMetaPhysics(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetCopyMetaPhysics(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param typeId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getMetaPhysicsList(typeId: number | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfMetaPhysicsDto> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/GetMetaPhysicsList?";
        if (typeId !== undefined && typeId !== null)
            url_ += "TypeId=" + encodeURIComponent("" + typeId) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMetaPhysicsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMetaPhysicsList(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMetaPhysicsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMetaPhysicsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMetaPhysicsList(response: HttpResponseBase): Observable<PagedResultDtoOfMetaPhysicsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMetaPhysicsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMetaPhysicsDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    createMetaPhysics(input: CreateMetaPhysicsInput | null | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/CreateMetaPhysics";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateMetaPhysics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMetaPhysics(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreateMetaPhysics(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    updateMetaphysics(input: UpdateMetaPhysicsInput | null | undefined): Observable<MetaPhysicsDto> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/UpdateMetaphysics";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateMetaphysics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMetaphysics(<any>response_);
                } catch (e) {
                    return <Observable<MetaPhysicsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MetaPhysicsDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMetaphysics(response: HttpResponseBase): Observable<MetaPhysicsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MetaPhysicsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MetaPhysicsDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteMetaphysics(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/DeleteMetaphysics?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMetaphysics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMetaphysics(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMetaphysics(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    deleteMetaphysicsList(input: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/DeleteMetaphysicsList?";
        if (input !== undefined && input !== null)
            input && input.forEach(item => { url_ += "input=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMetaphysicsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMetaphysicsList(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMetaphysicsList(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getMetaPhysics(id: number | null | undefined): Observable<MetaPhysicsDto> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/GetMetaPhysics?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMetaPhysics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMetaPhysics(<any>response_);
                } catch (e) {
                    return <Observable<MetaPhysicsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MetaPhysicsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMetaPhysics(response: HttpResponseBase): Observable<MetaPhysicsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MetaPhysicsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MetaPhysicsDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getHostMetaphysicsTypes(filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfMetaphysicsTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/GetHostMetaphysicsTypes?";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHostMetaphysicsTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHostMetaphysicsTypes(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMetaphysicsTypeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMetaphysicsTypeDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetHostMetaphysicsTypes(response: HttpResponseBase): Observable<PagedResultDtoOfMetaphysicsTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMetaphysicsTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMetaphysicsTypeDto>(<any>null);
    }

    /**
     * @param typeId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getMetaphysicsListBySubkey(subKey: string, typeId: number | null | undefined, filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfMetaPhysicsDto> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/GetMetaphysicsListBySubkey?";
        if (subKey === undefined || subKey === null)
            throw new Error("The parameter 'subKey' must be defined and cannot be null.");
        else
            url_ += "SubKey=" + encodeURIComponent("" + subKey) + "&";
        if (typeId !== undefined && typeId !== null)
            url_ += "TypeId=" + encodeURIComponent("" + typeId) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMetaphysicsListBySubkey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMetaphysicsListBySubkey(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMetaPhysicsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMetaPhysicsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMetaphysicsListBySubkey(response: HttpResponseBase): Observable<PagedResultDtoOfMetaPhysicsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMetaPhysicsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMetaPhysicsDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getMetaphysicBySubkeyAndId(id: number | null | undefined, subKey: string): Observable<MetaPhysicsDto> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/GetMetaphysicBySubkeyAndId?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (subKey === undefined || subKey === null)
            throw new Error("The parameter 'subKey' must be defined and cannot be null.");
        else
            url_ += "SubKey=" + encodeURIComponent("" + subKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMetaphysicBySubkeyAndId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMetaphysicBySubkeyAndId(<any>response_);
                } catch (e) {
                    return <Observable<MetaPhysicsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MetaPhysicsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMetaphysicBySubkeyAndId(response: HttpResponseBase): Observable<MetaPhysicsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MetaPhysicsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MetaPhysicsDto>(<any>null);
    }

    /**
     * @param typeId (optional) 
     * @return Success
     */
    getRandomMetaphysicBySubkeyAndTypeId(subKey: string, typeId: number | null | undefined): Observable<MetaPhysicsDto> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/GetRandomMetaphysicBySubkeyAndTypeId?";
        if (subKey === undefined || subKey === null)
            throw new Error("The parameter 'subKey' must be defined and cannot be null.");
        else
            url_ += "SubKey=" + encodeURIComponent("" + subKey) + "&";
        if (typeId !== undefined && typeId !== null)
            url_ += "TypeId=" + encodeURIComponent("" + typeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRandomMetaphysicBySubkeyAndTypeId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRandomMetaphysicBySubkeyAndTypeId(<any>response_);
                } catch (e) {
                    return <Observable<MetaPhysicsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MetaPhysicsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRandomMetaphysicBySubkeyAndTypeId(response: HttpResponseBase): Observable<MetaPhysicsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MetaPhysicsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MetaPhysicsDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getMetaPhysicsTypes(filter: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfMetaphysicsTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/GetMetaPhysicsTypes?";
        if (filter !== undefined && filter !== null)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting !== undefined && sorting !== null)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMetaPhysicsTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMetaPhysicsTypes(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMetaphysicsTypeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMetaphysicsTypeDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMetaPhysicsTypes(response: HttpResponseBase): Observable<PagedResultDtoOfMetaphysicsTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMetaphysicsTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMetaphysicsTypeDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    createMetaPhysicsType(input: CreateMetaphysicsTypeInput | null | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/CreateMetaPhysicsType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateMetaPhysicsType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMetaPhysicsType(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreateMetaPhysicsType(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    updateMetaphysicsType(input: UpdateMetaphysicsTypeInput | null | undefined): Observable<MetaphysicsTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/UpdateMetaphysicsType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateMetaphysicsType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMetaphysicsType(<any>response_);
                } catch (e) {
                    return <Observable<MetaphysicsTypeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MetaphysicsTypeDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMetaphysicsType(response: HttpResponseBase): Observable<MetaphysicsTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MetaphysicsTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MetaphysicsTypeDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteMetaphysicsType(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/DeleteMetaphysicsType?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMetaphysicsType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMetaphysicsType(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMetaphysicsType(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    deleteMetaphysicsTypeList(input: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/DeleteMetaphysicsTypeList?";
        if (input !== undefined && input !== null)
            input && input.forEach(item => { url_ += "input=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMetaphysicsTypeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMetaphysicsTypeList(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMetaphysicsTypeList(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    healthCheck(): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/MetaPhysics/HealthCheck";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHealthCheck(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHealthCheck(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processHealthCheck(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

export class GetImportDateMetaPhysicsInput implements IGetImportDateMetaPhysicsInput {
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    typeId!: number | undefined;
    metaPhysicsId!: number | undefined;
    filter!: string | undefined;
    sorting!: string | undefined;
    maxResultCount!: number | undefined;
    skipCount!: number | undefined;

    constructor(data?: IGetImportDateMetaPhysicsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? moment(_data["endTime"].toString()) : <any>undefined;
            this.typeId = _data["typeId"];
            this.metaPhysicsId = _data["metaPhysicsId"];
            this.filter = _data["filter"];
            this.sorting = _data["sorting"];
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
        }
    }

    static fromJS(data: any): GetImportDateMetaPhysicsInput {
        data = typeof data === 'object' ? data : {};
        let result = new GetImportDateMetaPhysicsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["typeId"] = this.typeId;
        data["metaPhysicsId"] = this.metaPhysicsId;
        data["filter"] = this.filter;
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data; 
    }
}

export interface IGetImportDateMetaPhysicsInput {
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    typeId: number | undefined;
    metaPhysicsId: number | undefined;
    filter: string | undefined;
    sorting: string | undefined;
    maxResultCount: number | undefined;
    skipCount: number | undefined;
}

export class PagedResultDtoOfDateMetaphysicsListDto implements IPagedResultDtoOfDateMetaphysicsListDto {
    totalCount!: number | undefined;
    items!: DateMetaphysicsListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfDateMetaphysicsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DateMetaphysicsListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDateMetaphysicsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDateMetaphysicsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfDateMetaphysicsListDto {
    totalCount: number | undefined;
    items: DateMetaphysicsListDto[] | undefined;
}

export class DateMetaphysicsListDto implements IDateMetaphysicsListDto {
    metaphysicsId!: number | undefined;
    metaphysicsName!: string | undefined;
    date!: moment.Moment | undefined;
    lucks!: LuckDto[] | undefined;
    typeName!: string | undefined;
    extensionData!: string | undefined;
    from!: string | undefined;
    fromLogoUrl!: string | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment | undefined;
    creatorUserId!: number | undefined;
    id!: number | undefined;

    constructor(data?: IDateMetaphysicsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.metaphysicsId = _data["metaphysicsId"];
            this.metaphysicsName = _data["metaphysicsName"];
            this.date = _data["date"] ? moment(_data["date"].toString()) : <any>undefined;
            if (Array.isArray(_data["lucks"])) {
                this.lucks = [] as any;
                for (let item of _data["lucks"])
                    this.lucks!.push(LuckDto.fromJS(item));
            }
            this.typeName = _data["typeName"];
            this.extensionData = _data["extensionData"];
            this.from = _data["from"];
            this.fromLogoUrl = _data["fromLogoUrl"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DateMetaphysicsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new DateMetaphysicsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["metaphysicsId"] = this.metaphysicsId;
        data["metaphysicsName"] = this.metaphysicsName;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        if (Array.isArray(this.lucks)) {
            data["lucks"] = [];
            for (let item of this.lucks)
                data["lucks"].push(item.toJSON());
        }
        data["typeName"] = this.typeName;
        data["extensionData"] = this.extensionData;
        data["from"] = this.from;
        data["fromLogoUrl"] = this.fromLogoUrl;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IDateMetaphysicsListDto {
    metaphysicsId: number | undefined;
    metaphysicsName: string | undefined;
    date: moment.Moment | undefined;
    lucks: LuckDto[] | undefined;
    typeName: string | undefined;
    extensionData: string | undefined;
    from: string | undefined;
    fromLogoUrl: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class LuckDto implements ILuckDto {
    id!: number | undefined;
    tenantId!: number | undefined;
    type!: string | undefined;
    number!: string | undefined;
    numberPresummary!: string | undefined;
    color!: string | undefined;
    colorPresummary!: string | undefined;
    direction!: string | undefined;
    directionPresummary!: string | undefined;
    summary!: string | undefined;
    summaryPresummary!: string | undefined;
    love!: string | undefined;
    lovePresummary!: string | undefined;
    career!: string | undefined;
    careerPresummary!: string | undefined;
    fortune!: string | undefined;
    fortunePresummary!: string | undefined;
    health!: string | undefined;
    healthPresummary!: string | undefined;
    bestMatch!: string | undefined;
    keyword!: string | undefined;
    dateMetaphysicsId!: number | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment | undefined;
    creatorUserId!: number | undefined;

    constructor(data?: ILuckDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.type = _data["type"];
            this.number = _data["number"];
            this.numberPresummary = _data["numberPresummary"];
            this.color = _data["color"];
            this.colorPresummary = _data["colorPresummary"];
            this.direction = _data["direction"];
            this.directionPresummary = _data["directionPresummary"];
            this.summary = _data["summary"];
            this.summaryPresummary = _data["summaryPresummary"];
            this.love = _data["love"];
            this.lovePresummary = _data["lovePresummary"];
            this.career = _data["career"];
            this.careerPresummary = _data["careerPresummary"];
            this.fortune = _data["fortune"];
            this.fortunePresummary = _data["fortunePresummary"];
            this.health = _data["health"];
            this.healthPresummary = _data["healthPresummary"];
            this.bestMatch = _data["bestMatch"];
            this.keyword = _data["keyword"];
            this.dateMetaphysicsId = _data["dateMetaphysicsId"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
        }
    }

    static fromJS(data: any): LuckDto {
        data = typeof data === 'object' ? data : {};
        let result = new LuckDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["type"] = this.type;
        data["number"] = this.number;
        data["numberPresummary"] = this.numberPresummary;
        data["color"] = this.color;
        data["colorPresummary"] = this.colorPresummary;
        data["direction"] = this.direction;
        data["directionPresummary"] = this.directionPresummary;
        data["summary"] = this.summary;
        data["summaryPresummary"] = this.summaryPresummary;
        data["love"] = this.love;
        data["lovePresummary"] = this.lovePresummary;
        data["career"] = this.career;
        data["careerPresummary"] = this.careerPresummary;
        data["fortune"] = this.fortune;
        data["fortunePresummary"] = this.fortunePresummary;
        data["health"] = this.health;
        data["healthPresummary"] = this.healthPresummary;
        data["bestMatch"] = this.bestMatch;
        data["keyword"] = this.keyword;
        data["dateMetaphysicsId"] = this.dateMetaphysicsId;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface ILuckDto {
    id: number | undefined;
    tenantId: number | undefined;
    type: string | undefined;
    number: string | undefined;
    numberPresummary: string | undefined;
    color: string | undefined;
    colorPresummary: string | undefined;
    direction: string | undefined;
    directionPresummary: string | undefined;
    summary: string | undefined;
    summaryPresummary: string | undefined;
    love: string | undefined;
    lovePresummary: string | undefined;
    career: string | undefined;
    careerPresummary: string | undefined;
    fortune: string | undefined;
    fortunePresummary: string | undefined;
    health: string | undefined;
    healthPresummary: string | undefined;
    bestMatch: string | undefined;
    keyword: string | undefined;
    dateMetaphysicsId: number | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
}

export class DateMetaphysicsDto implements IDateMetaphysicsDto {
    tenantId!: number | undefined;
    metaphysicsId!: number | undefined;
    metaPhysics!: MetaPhysicsDto | undefined;
    date!: moment.Moment | undefined;
    lucks!: LuckDto[] | undefined;
    recommneds!: RecommendDto[] | undefined;
    extensionData!: string | undefined;
    from!: string | undefined;
    fromLogoUrl!: string | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment | undefined;
    creatorUserId!: number | undefined;
    id!: number | undefined;

    constructor(data?: IDateMetaphysicsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.metaphysicsId = _data["metaphysicsId"];
            this.metaPhysics = _data["metaPhysics"] ? MetaPhysicsDto.fromJS(_data["metaPhysics"]) : <any>undefined;
            this.date = _data["date"] ? moment(_data["date"].toString()) : <any>undefined;
            if (Array.isArray(_data["lucks"])) {
                this.lucks = [] as any;
                for (let item of _data["lucks"])
                    this.lucks!.push(LuckDto.fromJS(item));
            }
            if (Array.isArray(_data["recommneds"])) {
                this.recommneds = [] as any;
                for (let item of _data["recommneds"])
                    this.recommneds!.push(RecommendDto.fromJS(item));
            }
            this.extensionData = _data["extensionData"];
            this.from = _data["from"];
            this.fromLogoUrl = _data["fromLogoUrl"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DateMetaphysicsDto {
        data = typeof data === 'object' ? data : {};
        let result = new DateMetaphysicsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["metaphysicsId"] = this.metaphysicsId;
        data["metaPhysics"] = this.metaPhysics ? this.metaPhysics.toJSON() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        if (Array.isArray(this.lucks)) {
            data["lucks"] = [];
            for (let item of this.lucks)
                data["lucks"].push(item.toJSON());
        }
        if (Array.isArray(this.recommneds)) {
            data["recommneds"] = [];
            for (let item of this.recommneds)
                data["recommneds"].push(item.toJSON());
        }
        data["extensionData"] = this.extensionData;
        data["from"] = this.from;
        data["fromLogoUrl"] = this.fromLogoUrl;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IDateMetaphysicsDto {
    tenantId: number | undefined;
    metaphysicsId: number | undefined;
    metaPhysics: MetaPhysicsDto | undefined;
    date: moment.Moment | undefined;
    lucks: LuckDto[] | undefined;
    recommneds: RecommendDto[] | undefined;
    extensionData: string | undefined;
    from: string | undefined;
    fromLogoUrl: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class MetaPhysicsDto implements IMetaPhysicsDto {
    tenantId!: number | undefined;
    typeId!: number | undefined;
    type!: MetaphysicsTypeDto | undefined;
    name!: string | undefined;
    aliasName!: string | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    logoUrl!: string | undefined;
    picUrl!: string | undefined;
    description!: string | undefined;
    from!: string | undefined;
    fromLogoUrl!: string | undefined;
    themeColor!: string | undefined;
    outerId!: string | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment | undefined;
    creatorUserId!: number | undefined;
    id!: number | undefined;

    constructor(data?: IMetaPhysicsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.typeId = _data["typeId"];
            this.type = _data["type"] ? MetaphysicsTypeDto.fromJS(_data["type"]) : <any>undefined;
            this.name = _data["name"];
            this.aliasName = _data["aliasName"];
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? moment(_data["endTime"].toString()) : <any>undefined;
            this.logoUrl = _data["logoUrl"];
            this.picUrl = _data["picUrl"];
            this.description = _data["description"];
            this.from = _data["from"];
            this.fromLogoUrl = _data["fromLogoUrl"];
            this.themeColor = _data["themeColor"];
            this.outerId = _data["outerId"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): MetaPhysicsDto {
        data = typeof data === 'object' ? data : {};
        let result = new MetaPhysicsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["typeId"] = this.typeId;
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["aliasName"] = this.aliasName;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["logoUrl"] = this.logoUrl;
        data["picUrl"] = this.picUrl;
        data["description"] = this.description;
        data["from"] = this.from;
        data["fromLogoUrl"] = this.fromLogoUrl;
        data["themeColor"] = this.themeColor;
        data["outerId"] = this.outerId;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IMetaPhysicsDto {
    tenantId: number | undefined;
    typeId: number | undefined;
    type: MetaphysicsTypeDto | undefined;
    name: string | undefined;
    aliasName: string | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    logoUrl: string | undefined;
    picUrl: string | undefined;
    description: string | undefined;
    from: string | undefined;
    fromLogoUrl: string | undefined;
    themeColor: string | undefined;
    outerId: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class RecommendDto implements IRecommendDto {
    id!: number | undefined;
    type!: string | undefined;
    thingId!: string | undefined;
    reason!: string | undefined;
    tenantId!: number | undefined;
    dateMetaphysicsId!: number | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment | undefined;
    creatorUserId!: number | undefined;

    constructor(data?: IRecommendDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.thingId = _data["thingId"];
            this.reason = _data["reason"];
            this.tenantId = _data["tenantId"];
            this.dateMetaphysicsId = _data["dateMetaphysicsId"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
        }
    }

    static fromJS(data: any): RecommendDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecommendDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["thingId"] = this.thingId;
        data["reason"] = this.reason;
        data["tenantId"] = this.tenantId;
        data["dateMetaphysicsId"] = this.dateMetaphysicsId;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IRecommendDto {
    id: number | undefined;
    type: string | undefined;
    thingId: string | undefined;
    reason: string | undefined;
    tenantId: number | undefined;
    dateMetaphysicsId: number | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
}

export class MetaphysicsTypeDto implements IMetaphysicsTypeDto {
    name!: string | undefined;
    tenantId!: number | undefined;
    description!: string | undefined;
    isDeleted!: boolean | undefined;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment | undefined;
    creatorUserId!: number | undefined;
    id!: number | undefined;

    constructor(data?: IMetaphysicsTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.tenantId = _data["tenantId"];
            this.description = _data["description"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): MetaphysicsTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new MetaphysicsTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["tenantId"] = this.tenantId;
        data["description"] = this.description;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IMetaphysicsTypeDto {
    name: string | undefined;
    tenantId: number | undefined;
    description: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class CreateDateMetaPhysicsInput implements ICreateDateMetaPhysicsInput {
    metaphysicsId!: number;
    date!: moment.Moment;
    lucks!: CreateLuckInput[] | undefined;
    recommneds!: CreateRecommendInput[] | undefined;
    extensionData!: string | undefined;
    from!: string | undefined;
    fromLogoUrl!: string | undefined;

    constructor(data?: ICreateDateMetaPhysicsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.metaphysicsId = _data["metaphysicsId"];
            this.date = _data["date"] ? moment(_data["date"].toString()) : <any>undefined;
            if (Array.isArray(_data["lucks"])) {
                this.lucks = [] as any;
                for (let item of _data["lucks"])
                    this.lucks!.push(CreateLuckInput.fromJS(item));
            }
            if (Array.isArray(_data["recommneds"])) {
                this.recommneds = [] as any;
                for (let item of _data["recommneds"])
                    this.recommneds!.push(CreateRecommendInput.fromJS(item));
            }
            this.extensionData = _data["extensionData"];
            this.from = _data["from"];
            this.fromLogoUrl = _data["fromLogoUrl"];
        }
    }

    static fromJS(data: any): CreateDateMetaPhysicsInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDateMetaPhysicsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["metaphysicsId"] = this.metaphysicsId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        if (Array.isArray(this.lucks)) {
            data["lucks"] = [];
            for (let item of this.lucks)
                data["lucks"].push(item.toJSON());
        }
        if (Array.isArray(this.recommneds)) {
            data["recommneds"] = [];
            for (let item of this.recommneds)
                data["recommneds"].push(item.toJSON());
        }
        data["extensionData"] = this.extensionData;
        data["from"] = this.from;
        data["fromLogoUrl"] = this.fromLogoUrl;
        return data; 
    }
}

export interface ICreateDateMetaPhysicsInput {
    metaphysicsId: number;
    date: moment.Moment;
    lucks: CreateLuckInput[] | undefined;
    recommneds: CreateRecommendInput[] | undefined;
    extensionData: string | undefined;
    from: string | undefined;
    fromLogoUrl: string | undefined;
}

export class CreateLuckInput implements ICreateLuckInput {
    dateMetaphysicsId!: number | undefined;
    type!: string | undefined;
    number!: string | undefined;
    numberPresummary!: string | undefined;
    color!: string | undefined;
    colorPresummary!: string | undefined;
    direction!: string | undefined;
    directionPresummary!: string | undefined;
    summary!: string | undefined;
    summaryPresummary!: string | undefined;
    love!: string | undefined;
    lovePresummary!: string | undefined;
    career!: string | undefined;
    careerPresummary!: string | undefined;
    fortune!: string | undefined;
    fortunePresummary!: string | undefined;
    health!: string | undefined;
    healthPresummary!: string | undefined;
    bestMatch!: string | undefined;
    keyword!: string | undefined;

    constructor(data?: ICreateLuckInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dateMetaphysicsId = _data["dateMetaphysicsId"];
            this.type = _data["type"];
            this.number = _data["number"];
            this.numberPresummary = _data["numberPresummary"];
            this.color = _data["color"];
            this.colorPresummary = _data["colorPresummary"];
            this.direction = _data["direction"];
            this.directionPresummary = _data["directionPresummary"];
            this.summary = _data["summary"];
            this.summaryPresummary = _data["summaryPresummary"];
            this.love = _data["love"];
            this.lovePresummary = _data["lovePresummary"];
            this.career = _data["career"];
            this.careerPresummary = _data["careerPresummary"];
            this.fortune = _data["fortune"];
            this.fortunePresummary = _data["fortunePresummary"];
            this.health = _data["health"];
            this.healthPresummary = _data["healthPresummary"];
            this.bestMatch = _data["bestMatch"];
            this.keyword = _data["keyword"];
        }
    }

    static fromJS(data: any): CreateLuckInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLuckInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateMetaphysicsId"] = this.dateMetaphysicsId;
        data["type"] = this.type;
        data["number"] = this.number;
        data["numberPresummary"] = this.numberPresummary;
        data["color"] = this.color;
        data["colorPresummary"] = this.colorPresummary;
        data["direction"] = this.direction;
        data["directionPresummary"] = this.directionPresummary;
        data["summary"] = this.summary;
        data["summaryPresummary"] = this.summaryPresummary;
        data["love"] = this.love;
        data["lovePresummary"] = this.lovePresummary;
        data["career"] = this.career;
        data["careerPresummary"] = this.careerPresummary;
        data["fortune"] = this.fortune;
        data["fortunePresummary"] = this.fortunePresummary;
        data["health"] = this.health;
        data["healthPresummary"] = this.healthPresummary;
        data["bestMatch"] = this.bestMatch;
        data["keyword"] = this.keyword;
        return data; 
    }
}

export interface ICreateLuckInput {
    dateMetaphysicsId: number | undefined;
    type: string | undefined;
    number: string | undefined;
    numberPresummary: string | undefined;
    color: string | undefined;
    colorPresummary: string | undefined;
    direction: string | undefined;
    directionPresummary: string | undefined;
    summary: string | undefined;
    summaryPresummary: string | undefined;
    love: string | undefined;
    lovePresummary: string | undefined;
    career: string | undefined;
    careerPresummary: string | undefined;
    fortune: string | undefined;
    fortunePresummary: string | undefined;
    health: string | undefined;
    healthPresummary: string | undefined;
    bestMatch: string | undefined;
    keyword: string | undefined;
}

export class CreateRecommendInput implements ICreateRecommendInput {
    dateMetaphysicsId!: number | undefined;
    type!: string | undefined;
    thingId!: string | undefined;
    reason!: string | undefined;

    constructor(data?: ICreateRecommendInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dateMetaphysicsId = _data["dateMetaphysicsId"];
            this.type = _data["type"];
            this.thingId = _data["thingId"];
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): CreateRecommendInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRecommendInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateMetaphysicsId"] = this.dateMetaphysicsId;
        data["type"] = this.type;
        data["thingId"] = this.thingId;
        data["reason"] = this.reason;
        return data; 
    }
}

export interface ICreateRecommendInput {
    dateMetaphysicsId: number | undefined;
    type: string | undefined;
    thingId: string | undefined;
    reason: string | undefined;
}

export class UpdateDateMetaPhysicsInput implements IUpdateDateMetaPhysicsInput {
    id!: number | undefined;
    metaphysicsId!: number;
    date!: moment.Moment;
    lucks!: CreateLuckInput[] | undefined;
    recommneds!: CreateRecommendInput[] | undefined;
    extensionData!: string | undefined;
    from!: string | undefined;
    fromLogoUrl!: string | undefined;

    constructor(data?: IUpdateDateMetaPhysicsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.metaphysicsId = _data["metaphysicsId"];
            this.date = _data["date"] ? moment(_data["date"].toString()) : <any>undefined;
            if (Array.isArray(_data["lucks"])) {
                this.lucks = [] as any;
                for (let item of _data["lucks"])
                    this.lucks!.push(CreateLuckInput.fromJS(item));
            }
            if (Array.isArray(_data["recommneds"])) {
                this.recommneds = [] as any;
                for (let item of _data["recommneds"])
                    this.recommneds!.push(CreateRecommendInput.fromJS(item));
            }
            this.extensionData = _data["extensionData"];
            this.from = _data["from"];
            this.fromLogoUrl = _data["fromLogoUrl"];
        }
    }

    static fromJS(data: any): UpdateDateMetaPhysicsInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDateMetaPhysicsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["metaphysicsId"] = this.metaphysicsId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        if (Array.isArray(this.lucks)) {
            data["lucks"] = [];
            for (let item of this.lucks)
                data["lucks"].push(item.toJSON());
        }
        if (Array.isArray(this.recommneds)) {
            data["recommneds"] = [];
            for (let item of this.recommneds)
                data["recommneds"].push(item.toJSON());
        }
        data["extensionData"] = this.extensionData;
        data["from"] = this.from;
        data["fromLogoUrl"] = this.fromLogoUrl;
        return data; 
    }
}

export interface IUpdateDateMetaPhysicsInput {
    id: number | undefined;
    metaphysicsId: number;
    date: moment.Moment;
    lucks: CreateLuckInput[] | undefined;
    recommneds: CreateRecommendInput[] | undefined;
    extensionData: string | undefined;
    from: string | undefined;
    fromLogoUrl: string | undefined;
}

export class PagedResultDtoOfDateMetaphysicsDto implements IPagedResultDtoOfDateMetaphysicsDto {
    totalCount!: number | undefined;
    items!: DateMetaphysicsDto[] | undefined;

    constructor(data?: IPagedResultDtoOfDateMetaphysicsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DateMetaphysicsDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDateMetaphysicsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDateMetaphysicsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfDateMetaphysicsDto {
    totalCount: number | undefined;
    items: DateMetaphysicsDto[] | undefined;
}

export class FaceTagsRecommendsDto implements IFaceTagsRecommendsDto {
    recommends!: FaceRecommendDto[] | undefined;
    tags!: FaceTagListDto[] | undefined;

    constructor(data?: IFaceTagsRecommendsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["recommends"])) {
                this.recommends = [] as any;
                for (let item of _data["recommends"])
                    this.recommends!.push(FaceRecommendDto.fromJS(item));
            }
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(FaceTagListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FaceTagsRecommendsDto {
        data = typeof data === 'object' ? data : {};
        let result = new FaceTagsRecommendsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.recommends)) {
            data["recommends"] = [];
            for (let item of this.recommends)
                data["recommends"].push(item.toJSON());
        }
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFaceTagsRecommendsDto {
    recommends: FaceRecommendDto[] | undefined;
    tags: FaceTagListDto[] | undefined;
}

export class FaceRecommendDto implements IFaceRecommendDto {
    type!: string | undefined;
    thingId!: string | undefined;
    reason!: string | undefined;
    tagId!: number | undefined;
    tenantId!: number | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment | undefined;
    creatorUserId!: number | undefined;
    id!: number | undefined;

    constructor(data?: IFaceRecommendDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.thingId = _data["thingId"];
            this.reason = _data["reason"];
            this.tagId = _data["tagId"];
            this.tenantId = _data["tenantId"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): FaceRecommendDto {
        data = typeof data === 'object' ? data : {};
        let result = new FaceRecommendDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["thingId"] = this.thingId;
        data["reason"] = this.reason;
        data["tagId"] = this.tagId;
        data["tenantId"] = this.tenantId;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IFaceRecommendDto {
    type: string | undefined;
    thingId: string | undefined;
    reason: string | undefined;
    tagId: number | undefined;
    tenantId: number | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class FaceTagListDto implements IFaceTagListDto {
    tenantId!: number | undefined;
    name!: string | undefined;
    iconUrl!: string | undefined;
    gender!: string | undefined;
    priority!: number | undefined;
    ageRange!: string | undefined;
    happinessRange!: string | undefined;
    beautyScoreRange!: string | undefined;
    extensionData!: string | undefined;
    isEnabled!: boolean | undefined;
    type!: string | undefined;
    description!: string | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment | undefined;
    creatorUserId!: number | undefined;
    id!: number | undefined;

    constructor(data?: IFaceTagListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.iconUrl = _data["iconUrl"];
            this.gender = _data["gender"];
            this.priority = _data["priority"];
            this.ageRange = _data["ageRange"];
            this.happinessRange = _data["happinessRange"];
            this.beautyScoreRange = _data["beautyScoreRange"];
            this.extensionData = _data["extensionData"];
            this.isEnabled = _data["isEnabled"];
            this.type = _data["type"];
            this.description = _data["description"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): FaceTagListDto {
        data = typeof data === 'object' ? data : {};
        let result = new FaceTagListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["iconUrl"] = this.iconUrl;
        data["gender"] = this.gender;
        data["priority"] = this.priority;
        data["ageRange"] = this.ageRange;
        data["happinessRange"] = this.happinessRange;
        data["beautyScoreRange"] = this.beautyScoreRange;
        data["extensionData"] = this.extensionData;
        data["isEnabled"] = this.isEnabled;
        data["type"] = this.type;
        data["description"] = this.description;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IFaceTagListDto {
    tenantId: number | undefined;
    name: string | undefined;
    iconUrl: string | undefined;
    gender: string | undefined;
    priority: number | undefined;
    ageRange: string | undefined;
    happinessRange: string | undefined;
    beautyScoreRange: string | undefined;
    extensionData: string | undefined;
    isEnabled: boolean | undefined;
    type: string | undefined;
    description: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class GetTagRecommendsByFaceInput implements IGetTagRecommendsByFaceInput {
    subKey!: string;
    headImage!: string | undefined;
    extensionData!: string | undefined;

    constructor(data?: IGetTagRecommendsByFaceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subKey = _data["subKey"];
            this.headImage = _data["headImage"];
            this.extensionData = _data["extensionData"];
        }
    }

    static fromJS(data: any): GetTagRecommendsByFaceInput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTagRecommendsByFaceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subKey"] = this.subKey;
        data["headImage"] = this.headImage;
        data["extensionData"] = this.extensionData;
        return data; 
    }
}

export interface IGetTagRecommendsByFaceInput {
    subKey: string;
    headImage: string | undefined;
    extensionData: string | undefined;
}

export class PagedResultDtoOfFaceTagDto implements IPagedResultDtoOfFaceTagDto {
    totalCount!: number | undefined;
    items!: FaceTagDto[] | undefined;

    constructor(data?: IPagedResultDtoOfFaceTagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(FaceTagDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfFaceTagDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfFaceTagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfFaceTagDto {
    totalCount: number | undefined;
    items: FaceTagDto[] | undefined;
}

export class FaceTagDto implements IFaceTagDto {
    recommends!: FaceRecommendDto[] | undefined;
    tenantId!: number | undefined;
    name!: string | undefined;
    iconUrl!: string | undefined;
    gender!: string | undefined;
    priority!: number | undefined;
    ageRange!: string | undefined;
    happinessRange!: string | undefined;
    beautyScoreRange!: string | undefined;
    extensionData!: string | undefined;
    isEnabled!: boolean | undefined;
    type!: string | undefined;
    description!: string | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment | undefined;
    creatorUserId!: number | undefined;
    id!: number | undefined;

    constructor(data?: IFaceTagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["recommends"])) {
                this.recommends = [] as any;
                for (let item of _data["recommends"])
                    this.recommends!.push(FaceRecommendDto.fromJS(item));
            }
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.iconUrl = _data["iconUrl"];
            this.gender = _data["gender"];
            this.priority = _data["priority"];
            this.ageRange = _data["ageRange"];
            this.happinessRange = _data["happinessRange"];
            this.beautyScoreRange = _data["beautyScoreRange"];
            this.extensionData = _data["extensionData"];
            this.isEnabled = _data["isEnabled"];
            this.type = _data["type"];
            this.description = _data["description"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): FaceTagDto {
        data = typeof data === 'object' ? data : {};
        let result = new FaceTagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.recommends)) {
            data["recommends"] = [];
            for (let item of this.recommends)
                data["recommends"].push(item.toJSON());
        }
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["iconUrl"] = this.iconUrl;
        data["gender"] = this.gender;
        data["priority"] = this.priority;
        data["ageRange"] = this.ageRange;
        data["happinessRange"] = this.happinessRange;
        data["beautyScoreRange"] = this.beautyScoreRange;
        data["extensionData"] = this.extensionData;
        data["isEnabled"] = this.isEnabled;
        data["type"] = this.type;
        data["description"] = this.description;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IFaceTagDto {
    recommends: FaceRecommendDto[] | undefined;
    tenantId: number | undefined;
    name: string | undefined;
    iconUrl: string | undefined;
    gender: string | undefined;
    priority: number | undefined;
    ageRange: string | undefined;
    happinessRange: string | undefined;
    beautyScoreRange: string | undefined;
    extensionData: string | undefined;
    isEnabled: boolean | undefined;
    type: string | undefined;
    description: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class CreateFaceTagInput implements ICreateFaceTagInput {
    name!: string;
    iconUrl!: string | undefined;
    gender!: string | undefined;
    priority!: number | undefined;
    ageRange!: string | undefined;
    happinessRange!: string | undefined;
    beautyScoreRange!: string | undefined;
    extensionData!: string | undefined;
    isEnabled!: boolean | undefined;
    type!: string | undefined;
    description!: string | undefined;
    recommends!: CeateFaceRecommendInput[] | undefined;

    constructor(data?: ICreateFaceTagInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.iconUrl = _data["iconUrl"];
            this.gender = _data["gender"];
            this.priority = _data["priority"];
            this.ageRange = _data["ageRange"];
            this.happinessRange = _data["happinessRange"];
            this.beautyScoreRange = _data["beautyScoreRange"];
            this.extensionData = _data["extensionData"];
            this.isEnabled = _data["isEnabled"];
            this.type = _data["type"];
            this.description = _data["description"];
            if (Array.isArray(_data["recommends"])) {
                this.recommends = [] as any;
                for (let item of _data["recommends"])
                    this.recommends!.push(CeateFaceRecommendInput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateFaceTagInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFaceTagInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["iconUrl"] = this.iconUrl;
        data["gender"] = this.gender;
        data["priority"] = this.priority;
        data["ageRange"] = this.ageRange;
        data["happinessRange"] = this.happinessRange;
        data["beautyScoreRange"] = this.beautyScoreRange;
        data["extensionData"] = this.extensionData;
        data["isEnabled"] = this.isEnabled;
        data["type"] = this.type;
        data["description"] = this.description;
        if (Array.isArray(this.recommends)) {
            data["recommends"] = [];
            for (let item of this.recommends)
                data["recommends"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateFaceTagInput {
    name: string;
    iconUrl: string | undefined;
    gender: string | undefined;
    priority: number | undefined;
    ageRange: string | undefined;
    happinessRange: string | undefined;
    beautyScoreRange: string | undefined;
    extensionData: string | undefined;
    isEnabled: boolean | undefined;
    type: string | undefined;
    description: string | undefined;
    recommends: CeateFaceRecommendInput[] | undefined;
}

export class CeateFaceRecommendInput implements ICeateFaceRecommendInput {
    type!: string | undefined;
    thingId!: string | undefined;
    reason!: string | undefined;
    tagId!: number | undefined;

    constructor(data?: ICeateFaceRecommendInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.thingId = _data["thingId"];
            this.reason = _data["reason"];
            this.tagId = _data["tagId"];
        }
    }

    static fromJS(data: any): CeateFaceRecommendInput {
        data = typeof data === 'object' ? data : {};
        let result = new CeateFaceRecommendInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["thingId"] = this.thingId;
        data["reason"] = this.reason;
        data["tagId"] = this.tagId;
        return data; 
    }
}

export interface ICeateFaceRecommendInput {
    type: string | undefined;
    thingId: string | undefined;
    reason: string | undefined;
    tagId: number | undefined;
}

export class UpdateFaceTagInput implements IUpdateFaceTagInput {
    id!: number;
    iconUrl!: string | undefined;
    gender!: string | undefined;
    priority!: number | undefined;
    ageRange!: string | undefined;
    happinessRange!: string | undefined;
    beautyScoreRange!: string | undefined;
    extensionData!: string | undefined;
    isEnabled!: boolean | undefined;
    type!: string | undefined;
    description!: string | undefined;
    recommends!: CeateFaceRecommendInput[] | undefined;

    constructor(data?: IUpdateFaceTagInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.iconUrl = _data["iconUrl"];
            this.gender = _data["gender"];
            this.priority = _data["priority"];
            this.ageRange = _data["ageRange"];
            this.happinessRange = _data["happinessRange"];
            this.beautyScoreRange = _data["beautyScoreRange"];
            this.extensionData = _data["extensionData"];
            this.isEnabled = _data["isEnabled"];
            this.type = _data["type"];
            this.description = _data["description"];
            if (Array.isArray(_data["recommends"])) {
                this.recommends = [] as any;
                for (let item of _data["recommends"])
                    this.recommends!.push(CeateFaceRecommendInput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateFaceTagInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFaceTagInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["iconUrl"] = this.iconUrl;
        data["gender"] = this.gender;
        data["priority"] = this.priority;
        data["ageRange"] = this.ageRange;
        data["happinessRange"] = this.happinessRange;
        data["beautyScoreRange"] = this.beautyScoreRange;
        data["extensionData"] = this.extensionData;
        data["isEnabled"] = this.isEnabled;
        data["type"] = this.type;
        data["description"] = this.description;
        if (Array.isArray(this.recommends)) {
            data["recommends"] = [];
            for (let item of this.recommends)
                data["recommends"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateFaceTagInput {
    id: number;
    iconUrl: string | undefined;
    gender: string | undefined;
    priority: number | undefined;
    ageRange: string | undefined;
    happinessRange: string | undefined;
    beautyScoreRange: string | undefined;
    extensionData: string | undefined;
    isEnabled: boolean | undefined;
    type: string | undefined;
    description: string | undefined;
    recommends: CeateFaceRecommendInput[] | undefined;
}

export class PagedResultDtoOfMetaPhysicsDto implements IPagedResultDtoOfMetaPhysicsDto {
    totalCount!: number | undefined;
    items!: MetaPhysicsDto[] | undefined;

    constructor(data?: IPagedResultDtoOfMetaPhysicsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MetaPhysicsDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMetaPhysicsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMetaPhysicsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfMetaPhysicsDto {
    totalCount: number | undefined;
    items: MetaPhysicsDto[] | undefined;
}

export class CreateMetaPhysicsInput implements ICreateMetaPhysicsInput {
    typeId!: number | undefined;
    name!: string | undefined;
    aliasName!: string | undefined;
    startTime!: moment.Moment;
    endTime!: moment.Moment;
    logoUrl!: string | undefined;
    picUrl!: string | undefined;
    description!: string | undefined;
    from!: string | undefined;
    fromLogoUrl!: string | undefined;
    themeColor!: string | undefined;
    outerId!: string | undefined;
    sort!: string | undefined;

    constructor(data?: ICreateMetaPhysicsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.typeId = _data["typeId"];
            this.name = _data["name"];
            this.aliasName = _data["aliasName"];
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? moment(_data["endTime"].toString()) : <any>undefined;
            this.logoUrl = _data["logoUrl"];
            this.picUrl = _data["picUrl"];
            this.description = _data["description"];
            this.from = _data["from"];
            this.fromLogoUrl = _data["fromLogoUrl"];
            this.themeColor = _data["themeColor"];
            this.outerId = _data["outerId"];
            this.sort = _data["sort"];
        }
    }

    static fromJS(data: any): CreateMetaPhysicsInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMetaPhysicsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["typeId"] = this.typeId;
        data["name"] = this.name;
        data["aliasName"] = this.aliasName;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["logoUrl"] = this.logoUrl;
        data["picUrl"] = this.picUrl;
        data["description"] = this.description;
        data["from"] = this.from;
        data["fromLogoUrl"] = this.fromLogoUrl;
        data["themeColor"] = this.themeColor;
        data["outerId"] = this.outerId;
        data["sort"] = this.sort;
        return data; 
    }
}

export interface ICreateMetaPhysicsInput {
    typeId: number | undefined;
    name: string | undefined;
    aliasName: string | undefined;
    startTime: moment.Moment;
    endTime: moment.Moment;
    logoUrl: string | undefined;
    picUrl: string | undefined;
    description: string | undefined;
    from: string | undefined;
    fromLogoUrl: string | undefined;
    themeColor: string | undefined;
    outerId: string | undefined;
    sort: string | undefined;
}

export class UpdateMetaPhysicsInput implements IUpdateMetaPhysicsInput {
    id!: number;
    typeId!: number | undefined;
    name!: string | undefined;
    aliasName!: string | undefined;
    startTime!: moment.Moment;
    endTime!: moment.Moment;
    logoUrl!: string | undefined;
    picUrl!: string | undefined;
    description!: string | undefined;
    from!: string | undefined;
    fromLogoUrl!: string | undefined;
    themeColor!: string | undefined;
    outerId!: string | undefined;
    sort!: string | undefined;

    constructor(data?: IUpdateMetaPhysicsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.typeId = _data["typeId"];
            this.name = _data["name"];
            this.aliasName = _data["aliasName"];
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? moment(_data["endTime"].toString()) : <any>undefined;
            this.logoUrl = _data["logoUrl"];
            this.picUrl = _data["picUrl"];
            this.description = _data["description"];
            this.from = _data["from"];
            this.fromLogoUrl = _data["fromLogoUrl"];
            this.themeColor = _data["themeColor"];
            this.outerId = _data["outerId"];
            this.sort = _data["sort"];
        }
    }

    static fromJS(data: any): UpdateMetaPhysicsInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMetaPhysicsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["typeId"] = this.typeId;
        data["name"] = this.name;
        data["aliasName"] = this.aliasName;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["logoUrl"] = this.logoUrl;
        data["picUrl"] = this.picUrl;
        data["description"] = this.description;
        data["from"] = this.from;
        data["fromLogoUrl"] = this.fromLogoUrl;
        data["themeColor"] = this.themeColor;
        data["outerId"] = this.outerId;
        data["sort"] = this.sort;
        return data; 
    }
}

export interface IUpdateMetaPhysicsInput {
    id: number;
    typeId: number | undefined;
    name: string | undefined;
    aliasName: string | undefined;
    startTime: moment.Moment;
    endTime: moment.Moment;
    logoUrl: string | undefined;
    picUrl: string | undefined;
    description: string | undefined;
    from: string | undefined;
    fromLogoUrl: string | undefined;
    themeColor: string | undefined;
    outerId: string | undefined;
    sort: string | undefined;
}

export class PagedResultDtoOfMetaphysicsTypeDto implements IPagedResultDtoOfMetaphysicsTypeDto {
    totalCount!: number | undefined;
    items!: MetaphysicsTypeDto[] | undefined;

    constructor(data?: IPagedResultDtoOfMetaphysicsTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MetaphysicsTypeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMetaphysicsTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMetaphysicsTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfMetaphysicsTypeDto {
    totalCount: number | undefined;
    items: MetaphysicsTypeDto[] | undefined;
}

export class CreateMetaphysicsTypeInput implements ICreateMetaphysicsTypeInput {
    name!: string | undefined;
    description!: string | undefined;

    constructor(data?: ICreateMetaphysicsTypeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateMetaphysicsTypeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMetaphysicsTypeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data; 
    }
}

export interface ICreateMetaphysicsTypeInput {
    name: string | undefined;
    description: string | undefined;
}

export class UpdateMetaphysicsTypeInput implements IUpdateMetaphysicsTypeInput {
    id!: number | undefined;
    name!: string | undefined;
    description!: string | undefined;

    constructor(data?: IUpdateMetaphysicsTypeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateMetaphysicsTypeInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMetaphysicsTypeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data; 
    }
}

export interface IUpdateMetaphysicsTypeInput {
    id: number | undefined;
    name: string | undefined;
    description: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}