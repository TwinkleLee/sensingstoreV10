/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.3.0 (NJsonSchema v10.3.6.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { DateTime } from 'luxon';
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_PAGER_URL = new InjectionToken<string>('API_PAGER_URL');

@Injectable()
export class IdentityServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_PAGER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getClaims(): Observable<string> {
        let url_ = this.baseUrl + "/Identity/GetClaims";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClaims(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetClaims(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class MarketingServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_PAGER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 创建市场营销的渠道
     * @param body (optional) 
     * @return Success
     */
    createApplication(body: CreateMarketingApplicationInput | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Marketing/CreateApplication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateApplication(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateApplication(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreateApplication(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * 更新市场营销的渠道
     * @param body (optional) 
     * @return Success
     */
    updateApplication(body: UpdateMarketingApplicationInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Marketing/UpdateApplication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateApplication(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateApplication(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateApplication(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除市场营销渠道
     * @param id (optional) 
     * @return Success
     */
    deleteApplication(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Marketing/DeleteApplication?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteApplication(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteApplication(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteApplication(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 批量删除市场营销渠道的
     * @param body (optional) 
     * @return Success
     */
    batchDeleteApplication(body: number[] | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Marketing/BatchDeleteApplication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBatchDeleteApplication(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchDeleteApplication(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processBatchDeleteApplication(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取市场营销应用，支持分页
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getApplications(filter: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<MarketingApplicationDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Marketing/GetApplications?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApplications(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApplications(<any>response_);
                } catch (e) {
                    return <Observable<MarketingApplicationDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MarketingApplicationDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetApplications(response: HttpResponseBase): Observable<MarketingApplicationDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MarketingApplicationDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MarketingApplicationDtoPagedResultDto>(<any>null);
    }

    /**
     * 获取单个的市场营销渠道
     * @param id (optional) 
     * @return Success
     */
    getApplicationById(id: number | undefined): Observable<MarketingApplicationDto> {
        let url_ = this.baseUrl + "/api/services/app/Marketing/GetApplicationById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApplicationById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApplicationById(<any>response_);
                } catch (e) {
                    return <Observable<MarketingApplicationDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MarketingApplicationDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetApplicationById(response: HttpResponseBase): Observable<MarketingApplicationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MarketingApplicationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MarketingApplicationDto>(<any>null);
    }

    /**
     * 获取线上推广渠道的详细页面，支持分页
     * @param marketingApplicationId (optional) 特定的市场应用，如果不传, 会返回当前租付下的所有
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getApplicationPages(marketingApplicationId: number | undefined, filter: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<MarketingPageDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Marketing/GetApplicationPages?";
        if (marketingApplicationId === null)
            throw new Error("The parameter 'marketingApplicationId' cannot be null.");
        else if (marketingApplicationId !== undefined)
            url_ += "MarketingApplicationId=" + encodeURIComponent("" + marketingApplicationId) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApplicationPages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApplicationPages(<any>response_);
                } catch (e) {
                    return <Observable<MarketingPageDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MarketingPageDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetApplicationPages(response: HttpResponseBase): Observable<MarketingPageDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MarketingPageDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MarketingPageDtoPagedResultDto>(<any>null);
    }

    /**
     * 创建
     * @param body (optional) 
     * @return Success
     */
    createPages(body: CreateMaketingPageInput | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Marketing/CreatePages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreatePages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreatePages(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreatePages(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updatePages(body: UpdatePagesInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Marketing/UpdatePages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePages(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdatePages(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deletePage(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Marketing/DeletePage?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeletePage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeletePage(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeletePage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    batchDeletePages(body: number[] | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Marketing/BatchDeletePages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBatchDeletePages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchDeletePages(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processBatchDeletePages(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param productId (optional) 
     * @param skuId (optional) 
     * @param deviceActivityGameId (optional) 
     * @param salesId (optional) 
     * @param tenantId (optional) 
     * @return Success
     */
    getPageExtras(applicationName: string, pageName: string, productId: number | undefined, skuId: number | undefined, deviceActivityGameId: number | undefined, salesId: number | undefined, tenantId: number | undefined): Observable<PageExtrasDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Marketing/GetPageExtras?";
        if (applicationName === undefined || applicationName === null)
            throw new Error("The parameter 'applicationName' must be defined and cannot be null.");
        else
            url_ += "ApplicationName=" + encodeURIComponent("" + applicationName) + "&";
        if (pageName === undefined || pageName === null)
            throw new Error("The parameter 'pageName' must be defined and cannot be null.");
        else
            url_ += "PageName=" + encodeURIComponent("" + pageName) + "&";
        if (productId === null)
            throw new Error("The parameter 'productId' cannot be null.");
        else if (productId !== undefined)
            url_ += "ProductId=" + encodeURIComponent("" + productId) + "&";
        if (skuId === null)
            throw new Error("The parameter 'skuId' cannot be null.");
        else if (skuId !== undefined)
            url_ += "SkuId=" + encodeURIComponent("" + skuId) + "&";
        if (deviceActivityGameId === null)
            throw new Error("The parameter 'deviceActivityGameId' cannot be null.");
        else if (deviceActivityGameId !== undefined)
            url_ += "DeviceActivityGameId=" + encodeURIComponent("" + deviceActivityGameId) + "&";
        if (salesId === null)
            throw new Error("The parameter 'salesId' cannot be null.");
        else if (salesId !== undefined)
            url_ += "SalesId=" + encodeURIComponent("" + salesId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "tenantId": tenantId !== undefined && tenantId !== null ? "" + tenantId : "",
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPageExtras(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPageExtras(<any>response_);
                } catch (e) {
                    return <Observable<PageExtrasDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PageExtrasDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPageExtras(response: HttpResponseBase): Observable<PageExtrasDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PageExtrasDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PageExtrasDto[]>(<any>null);
    }
}

@Injectable()
export class MarketingUserDataServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_PAGER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 添加用户的市场埋点数据
     * @param appKey (optional) 
     * @param body (optional) 
     * @return Success
     */
    addMarketingUserData(appKey: string | undefined, body: AddMarketingUserDataInput | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/MarketingUserData/AddMarketingUserData?";
        if (appKey === null)
            throw new Error("The parameter 'appKey' cannot be null.");
        else if (appKey !== undefined)
            url_ += "appKey=" + encodeURIComponent("" + appKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddMarketingUserData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddMarketingUserData(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processAddMarketingUserData(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * 更新市场埋点的数据
     * @param appKey (optional) 
     * @param id (optional) 
     * @return Success
     */
    updateMarketUserData(appKey: string | undefined, id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MarketingUserData/UpdateMarketUserData?";
        if (appKey === null)
            throw new Error("The parameter 'appKey' cannot be null.");
        else if (appKey !== undefined)
            url_ += "appKey=" + encodeURIComponent("" + appKey) + "&";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateMarketUserData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMarketUserData(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMarketUserData(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取特定Action总数
     * @param collectionStartTime (optional) 
     * @param collectionEndTime (optional) 
     * @param openId (optional) 
     * @param from (optional) 
     * @param pageName (optional) 
     * @param applicationName (optional) 
     * @param tenantId (optional) 
     * @return Success
     */
    getSpecifiedActionCount(recordAction: string, collectionStartTime: moment.Moment | undefined, collectionEndTime: moment.Moment | undefined, openId: string | undefined, from: string | undefined, pageName: string | undefined, applicationName: string | undefined, tenantId: number | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/MarketingUserData/GetSpecifiedActionCount?";
        if (recordAction === undefined || recordAction === null)
            throw new Error("The parameter 'recordAction' must be defined and cannot be null.");
        else
            url_ += "recordAction=" + encodeURIComponent("" + recordAction) + "&";
        if (collectionStartTime === null)
            throw new Error("The parameter 'collectionStartTime' cannot be null.");
        else if (collectionStartTime !== undefined)
            url_ += "CollectionStartTime=" + encodeURIComponent(collectionStartTime ? "" + collectionStartTime.toJSON() : "") + "&";
        if (collectionEndTime === null)
            throw new Error("The parameter 'collectionEndTime' cannot be null.");
        else if (collectionEndTime !== undefined)
            url_ += "CollectionEndTime=" + encodeURIComponent(collectionEndTime ? "" + collectionEndTime.toJSON() : "") + "&";
        if (openId === null)
            throw new Error("The parameter 'openId' cannot be null.");
        else if (openId !== undefined)
            url_ += "OpenId=" + encodeURIComponent("" + openId) + "&";
        if (from === null)
            throw new Error("The parameter 'from' cannot be null.");
        else if (from !== undefined)
            url_ += "From=" + encodeURIComponent("" + from) + "&";
        if (pageName === null)
            throw new Error("The parameter 'pageName' cannot be null.");
        else if (pageName !== undefined)
            url_ += "PageName=" + encodeURIComponent("" + pageName) + "&";
        if (applicationName === null)
            throw new Error("The parameter 'applicationName' cannot be null.");
        else if (applicationName !== undefined)
            url_ += "ApplicationName=" + encodeURIComponent("" + applicationName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "tenantId": tenantId !== undefined && tenantId !== null ? "" + tenantId : "",
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSpecifiedActionCount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSpecifiedActionCount(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processGetSpecifiedActionCount(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * 获取最近的参观者
     * @param applicationName (optional) 
     * @param pageName (optional) 
     * @param tenantId (optional) 
     * @return Success
     */
    getRecentVisitorInfo(applicationName: string | undefined, pageName: string | undefined, tenantId: number | undefined): Observable<VisitorInfoDto> {
        let url_ = this.baseUrl + "/api/services/app/MarketingUserData/GetRecentVisitorInfo?";
        if (applicationName === null)
            throw new Error("The parameter 'applicationName' cannot be null.");
        else if (applicationName !== undefined)
            url_ += "ApplicationName=" + encodeURIComponent("" + applicationName) + "&";
        if (pageName === null)
            throw new Error("The parameter 'pageName' cannot be null.");
        else if (pageName !== undefined)
            url_ += "PageName=" + encodeURIComponent("" + pageName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "tenantId": tenantId !== undefined && tenantId !== null ? "" + tenantId : "",
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecentVisitorInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecentVisitorInfo(<any>response_);
                } catch (e) {
                    return <Observable<VisitorInfoDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<VisitorInfoDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRecentVisitorInfo(response: HttpResponseBase): Observable<VisitorInfoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VisitorInfoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VisitorInfoDto>(<any>null);
    }

    /**
     * 获取最新的市场数据的记录
     * @param tenantId (optional) 
     * @return Success
     */
    getRecentAction4Hall(tenantId: number | undefined): Observable<RecentActionDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MarketingUserData/GetRecentAction4Hall";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "tenantId": tenantId !== undefined && tenantId !== null ? "" + tenantId : "",
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecentAction4Hall(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecentAction4Hall(<any>response_);
                } catch (e) {
                    return <Observable<RecentActionDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecentActionDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRecentAction4Hall(response: HttpResponseBase): Observable<RecentActionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RecentActionDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecentActionDto[]>(<any>null);
    }
}

@Injectable()
export class UserAppointmentServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_PAGER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 新增预约
     * @param tenantId (optional) 
     * @param body (optional) 
     * @return Success
     */
    createAppointment(tenantId: number | undefined, body: CreateUserAppointmentInput | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/UserAppointment/CreateAppointment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "tenantId": tenantId !== undefined && tenantId !== null ? "" + tenantId : "",
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateAppointment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateAppointment(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreateAppointment(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * @param tenantId (optional) 
     * @param body (optional) 
     * @return Success
     */
    updateAppointment(tenantId: number | undefined, body: UpdateUserAppointmentInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserAppointment/UpdateAppointment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "tenantId": tenantId !== undefined && tenantId !== null ? "" + tenantId : "",
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAppointment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAppointment(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateAppointment(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取用户的预约
     * @param openId (optional) 获取特定用户的预约，可选
     * @param storeId (optional) 特定的店铺,可选
     * @param tenantId 特定的租付
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getAppointmentsForHall(openId: string | undefined, storeId: number | undefined, tenantId: number, filter: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<UserAppointmentDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/UserAppointment/GetAppointmentsForHall?";
        if (openId === null)
            throw new Error("The parameter 'openId' cannot be null.");
        else if (openId !== undefined)
            url_ += "OpenId=" + encodeURIComponent("" + openId) + "&";
        if (storeId === null)
            throw new Error("The parameter 'storeId' cannot be null.");
        else if (storeId !== undefined)
            url_ += "StoreId=" + encodeURIComponent("" + storeId) + "&";
        if (tenantId === undefined || tenantId === null)
            throw new Error("The parameter 'tenantId' must be defined and cannot be null.");
        else
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppointmentsForHall(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppointmentsForHall(<any>response_);
                } catch (e) {
                    return <Observable<UserAppointmentDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserAppointmentDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAppointmentsForHall(response: HttpResponseBase): Observable<UserAppointmentDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserAppointmentDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserAppointmentDtoPagedResultDto>(<any>null);
    }

    /**
     * @param tenantId (optional) 
     * @param body (optional) 
     * @return Success
     */
    auditAppointment(tenantId: number | undefined, body: AuditUserAppointmentInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserAppointment/AuditAppointment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "tenantId": tenantId !== undefined && tenantId !== null ? "" + tenantId : "",
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuditAppointment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuditAppointment(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAuditAppointment(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class UserFeedbackServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_PAGER_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取用户的反馈列表，支持分页
     * @param handled (optional) 
     * @param marketingApplicationId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getUserFeedbacks(handled: boolean | undefined, marketingApplicationId: number | undefined, filter: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<UserFeedbackDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/UserFeedback/GetUserFeedbacks?";
        if (handled === null)
            throw new Error("The parameter 'handled' cannot be null.");
        else if (handled !== undefined)
            url_ += "Handled=" + encodeURIComponent("" + handled) + "&";
        if (marketingApplicationId === null)
            throw new Error("The parameter 'marketingApplicationId' cannot be null.");
        else if (marketingApplicationId !== undefined)
            url_ += "MarketingApplicationId=" + encodeURIComponent("" + marketingApplicationId) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserFeedbacks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserFeedbacks(<any>response_);
                } catch (e) {
                    return <Observable<UserFeedbackDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserFeedbackDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserFeedbacks(response: HttpResponseBase): Observable<UserFeedbackDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserFeedbackDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserFeedbackDtoPagedResultDto>(<any>null);
    }

    /**
     * 批量数量用户的反馈
     * @param body (optional) 
     * @return Success
     */
    handleUserFeedbacks(body: HandleFeedbacksInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserFeedback/HandleUserFeedbacks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandleUserFeedbacks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandleUserFeedbacks(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processHandleUserFeedbacks(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 创建用户新建的预约，一般是第三方进行调用的
     * @param appKey (optional) 
     * @param body (optional) 
     * @return Success
     */
    addOrUpdateUserFeedback(appKey: string | undefined, body: AddOrUpdateFeedbackInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserFeedback/AddOrUpdateUserFeedback?";
        if (appKey === null)
            throw new Error("The parameter 'appKey' cannot be null.");
        else if (appKey !== undefined)
            url_ += "appKey=" + encodeURIComponent("" + appKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateUserFeedback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateUserFeedback(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateUserFeedback(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class AddMarketingUserDataInput implements IAddMarketingUserDataInput {
    /** 用户的数据属于特殊设备 */
    deviceId!: number | undefined;
    /** 具体的数据来自于那个软件 */
    softwareId!: number | undefined;
    /** 市场推广分类，默认为官网 */
    applicationName!: string | undefined;
    /** 线上推广渠道的具体页面名称 */
    pageName!: string | undefined;
    /** 当前用户可留下一些简单的信息，或者兴趣点 */
    comment!: string | undefined;
    /** 用户的唯一标识，如微信公众号的OpenId,淘宝的UUId等 */
    openId!: string | undefined;
    userInPlatform!: string | undefined;
    /** 会员信息的ID */
    memberId!: number | undefined;
    /** 用户行为的动作，用户的感知，如See,Listen */
    action!: string | undefined;
    /** 数据的来源 */
    from!: string | undefined;
    /** 分享者对应的服务人员Id */
    salesId!: number | undefined;
    /** 用户感知的开始时间 */
    startTime!: moment.Moment | undefined;
    /** 用户感知的结束时间 */
    endTime!: moment.Moment | undefined;
    /** 一段时间内感知的次数 */
    increment!: number;
    residenceTime!: number;
    url!: string | undefined;
    extensionData!: string | undefined;

    constructor(data?: IAddMarketingUserDataInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"];
            this.softwareId = _data["softwareId"];
            this.applicationName = _data["applicationName"];
            this.pageName = _data["pageName"];
            this.comment = _data["comment"];
            this.openId = _data["openId"];
            this.userInPlatform = _data["userInPlatform"];
            this.memberId = _data["memberId"];
            this.action = _data["action"];
            this.from = _data["from"];
            this.salesId = _data["salesId"];
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? moment(_data["endTime"].toString()) : <any>undefined;
            this.increment = _data["increment"];
            this.residenceTime = _data["residenceTime"];
            this.url = _data["url"];
            this.extensionData = _data["extensionData"];
        }
    }

    static fromJS(data: any): AddMarketingUserDataInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddMarketingUserDataInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        data["softwareId"] = this.softwareId;
        data["applicationName"] = this.applicationName;
        data["pageName"] = this.pageName;
        data["comment"] = this.comment;
        data["openId"] = this.openId;
        data["userInPlatform"] = this.userInPlatform;
        data["memberId"] = this.memberId;
        data["action"] = this.action;
        data["from"] = this.from;
        data["salesId"] = this.salesId;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["increment"] = this.increment;
        data["residenceTime"] = this.residenceTime;
        data["url"] = this.url;
        data["extensionData"] = this.extensionData;
        return data; 
    }
}

export interface IAddMarketingUserDataInput {
    /** 用户的数据属于特殊设备 */
    deviceId: number | undefined;
    /** 具体的数据来自于那个软件 */
    softwareId: number | undefined;
    /** 市场推广分类，默认为官网 */
    applicationName: string | undefined;
    /** 线上推广渠道的具体页面名称 */
    pageName: string | undefined;
    /** 当前用户可留下一些简单的信息，或者兴趣点 */
    comment: string | undefined;
    /** 用户的唯一标识，如微信公众号的OpenId,淘宝的UUId等 */
    openId: string | undefined;
    userInPlatform: string | undefined;
    /** 会员信息的ID */
    memberId: number | undefined;
    /** 用户行为的动作，用户的感知，如See,Listen */
    action: string | undefined;
    /** 数据的来源 */
    from: string | undefined;
    /** 分享者对应的服务人员Id */
    salesId: number | undefined;
    /** 用户感知的开始时间 */
    startTime: moment.Moment | undefined;
    /** 用户感知的结束时间 */
    endTime: moment.Moment | undefined;
    /** 一段时间内感知的次数 */
    increment: number;
    residenceTime: number;
    url: string | undefined;
    extensionData: string | undefined;
}

export class AddOrUpdateFeedbackInput implements IAddOrUpdateFeedbackInput {
    tenantId!: number;
    /** 分享者对应的服务人员Id */
    salesId!: number | undefined;
    handled!: boolean;
    handleContent!: string | undefined;
    from!: string | undefined;
    /** 属于那个市场活动下的 */
    marketingApplicationId!: number | undefined;
    /** 反馈的类型 */
    type!: string | undefined;
    /** 反馈的具体事情,需要和其它的微服务结合，这里只做些记录. */
    thingId!: number | undefined;
    description!: string | undefined;
    /** 用户的姓名 */
    name!: string | undefined;
    tel!: string | undefined;
    /** 用户的唯一标识，如微信公众号的OpenId,淘宝的UUId等 */
    openId!: string | undefined;
    userInPlatform!: string | undefined;
    /** 会员信息的ID */
    memberId!: number | undefined;
    companyId!: number;
    company!: string | undefined;

    constructor(data?: IAddOrUpdateFeedbackInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.salesId = _data["salesId"];
            this.handled = _data["handled"];
            this.handleContent = _data["handleContent"];
            this.from = _data["from"];
            this.marketingApplicationId = _data["marketingApplicationId"];
            this.type = _data["type"];
            this.thingId = _data["thingId"];
            this.description = _data["description"];
            this.name = _data["name"];
            this.tel = _data["tel"];
            this.openId = _data["openId"];
            this.userInPlatform = _data["userInPlatform"];
            this.memberId = _data["memberId"];
            this.companyId = _data["companyId"];
            this.company = _data["company"];
        }
    }

    static fromJS(data: any): AddOrUpdateFeedbackInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateFeedbackInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["salesId"] = this.salesId;
        data["handled"] = this.handled;
        data["handleContent"] = this.handleContent;
        data["from"] = this.from;
        data["marketingApplicationId"] = this.marketingApplicationId;
        data["type"] = this.type;
        data["thingId"] = this.thingId;
        data["description"] = this.description;
        data["name"] = this.name;
        data["tel"] = this.tel;
        data["openId"] = this.openId;
        data["userInPlatform"] = this.userInPlatform;
        data["memberId"] = this.memberId;
        data["companyId"] = this.companyId;
        data["company"] = this.company;
        return data; 
    }
}

export interface IAddOrUpdateFeedbackInput {
    tenantId: number;
    /** 分享者对应的服务人员Id */
    salesId: number | undefined;
    handled: boolean;
    handleContent: string | undefined;
    from: string | undefined;
    /** 属于那个市场活动下的 */
    marketingApplicationId: number | undefined;
    /** 反馈的类型 */
    type: string | undefined;
    /** 反馈的具体事情,需要和其它的微服务结合，这里只做些记录. */
    thingId: number | undefined;
    description: string | undefined;
    /** 用户的姓名 */
    name: string | undefined;
    tel: string | undefined;
    /** 用户的唯一标识，如微信公众号的OpenId,淘宝的UUId等 */
    openId: string | undefined;
    userInPlatform: string | undefined;
    /** 会员信息的ID */
    memberId: number | undefined;
    companyId: number;
    company: string | undefined;
}

export enum AppointmentStatus {
    Applied = 0,
    Cancel = 1,
    Accepted = 2,
    Rejected = 3,
    Completed = 4,
}

export class AuditUserAppointmentInput implements IAuditUserAppointmentInput {
    userAppointmentId!: number;
    targetStatus!: AppointmentStatus;

    constructor(data?: IAuditUserAppointmentInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userAppointmentId = _data["userAppointmentId"];
            this.targetStatus = _data["targetStatus"];
        }
    }

    static fromJS(data: any): AuditUserAppointmentInput {
        data = typeof data === 'object' ? data : {};
        let result = new AuditUserAppointmentInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userAppointmentId"] = this.userAppointmentId;
        data["targetStatus"] = this.targetStatus;
        return data; 
    }
}

export interface IAuditUserAppointmentInput {
    userAppointmentId: number;
    targetStatus: AppointmentStatus;
}

export class CreateMaketingPageInput implements ICreateMaketingPageInput {
    /** 所属的Maketing应用 */
    applicationId!: number;
    name!: string | undefined;
    url!: string | undefined;
    iconUrl!: string | undefined;
    description!: string | undefined;
    extensionData!: string | undefined;
    /** 当前营销页面关联的额外信息，如销售工程师等 */
    pageExtras!: PageExtraInput[] | undefined;

    constructor(data?: ICreateMaketingPageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applicationId = _data["applicationId"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.iconUrl = _data["iconUrl"];
            this.description = _data["description"];
            this.extensionData = _data["extensionData"];
            if (Array.isArray(_data["pageExtras"])) {
                this.pageExtras = [] as any;
                for (let item of _data["pageExtras"])
                    this.pageExtras!.push(PageExtraInput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateMaketingPageInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaketingPageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicationId"] = this.applicationId;
        data["name"] = this.name;
        data["url"] = this.url;
        data["iconUrl"] = this.iconUrl;
        data["description"] = this.description;
        data["extensionData"] = this.extensionData;
        if (Array.isArray(this.pageExtras)) {
            data["pageExtras"] = [];
            for (let item of this.pageExtras)
                data["pageExtras"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateMaketingPageInput {
    /** 所属的Maketing应用 */
    applicationId: number;
    name: string | undefined;
    url: string | undefined;
    iconUrl: string | undefined;
    description: string | undefined;
    extensionData: string | undefined;
    /** 当前营销页面关联的额外信息，如销售工程师等 */
    pageExtras: PageExtraInput[] | undefined;
}

export class CreateMarketingApplicationInput implements ICreateMarketingApplicationInput {
    name!: string | undefined;
    host!: string | undefined;
    iconUrl!: string | undefined;
    description!: string | undefined;
    extensionData!: string | undefined;

    constructor(data?: ICreateMarketingApplicationInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.host = _data["host"];
            this.iconUrl = _data["iconUrl"];
            this.description = _data["description"];
            this.extensionData = _data["extensionData"];
        }
    }

    static fromJS(data: any): CreateMarketingApplicationInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMarketingApplicationInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["host"] = this.host;
        data["iconUrl"] = this.iconUrl;
        data["description"] = this.description;
        data["extensionData"] = this.extensionData;
        return data; 
    }
}

export interface ICreateMarketingApplicationInput {
    name: string | undefined;
    host: string | undefined;
    iconUrl: string | undefined;
    description: string | undefined;
    extensionData: string | undefined;
}

/** 创建用户的预约信息 */
export class CreateUserAppointmentInput implements ICreateUserAppointmentInput {
    tenantId!: number;
    /** 预约是否关联智能设备 */
    deviceId!: number | undefined;
    /** 展厅/店的Id */
    storeId!: number | undefined;
    /** 用户的唯一标识 */
    openId!: string | undefined;
    userInPlatform!: string | undefined;
    /** 会员信息的ID */
    memberId!: number | undefined;
    /** 预约人姓名 */
    name!: string | undefined;
    /** 预约人电话 */
    phone!: string | undefined;
    /** 预约访客人数 */
    visitorCount!: number;
    /** 预约公司名称 */
    companyName!: string | undefined;
    /** 预约的类型 */
    type!: string | undefined;
    /** 预约时间参观或者访问的具体时间，具体处理的时候，一般会前后半小时 */
    appointmentTime!: moment.Moment | undefined;
    /** 预约时的备注 */
    remarks!: string | undefined;
    appointmentStatus!: AppointmentStatus;
    /** 理由,例如拒绝理由 */
    reason!: string | undefined;
    /** 预约分配给的对应销售工程师 */
    salesId!: number | undefined;
    /** 预约来源 来自wechat之类 douyin */
    from!: string | undefined;

    constructor(data?: ICreateUserAppointmentInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.deviceId = _data["deviceId"];
            this.storeId = _data["storeId"];
            this.openId = _data["openId"];
            this.userInPlatform = _data["userInPlatform"];
            this.memberId = _data["memberId"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.visitorCount = _data["visitorCount"];
            this.companyName = _data["companyName"];
            this.type = _data["type"];
            this.appointmentTime = _data["appointmentTime"] ? moment(_data["appointmentTime"].toString()) : <any>undefined;
            this.remarks = _data["remarks"];
            this.appointmentStatus = _data["appointmentStatus"];
            this.reason = _data["reason"];
            this.salesId = _data["salesId"];
            this.from = _data["from"];
        }
    }

    static fromJS(data: any): CreateUserAppointmentInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserAppointmentInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["deviceId"] = this.deviceId;
        data["storeId"] = this.storeId;
        data["openId"] = this.openId;
        data["userInPlatform"] = this.userInPlatform;
        data["memberId"] = this.memberId;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["visitorCount"] = this.visitorCount;
        data["companyName"] = this.companyName;
        data["type"] = this.type;
        data["appointmentTime"] = this.appointmentTime ? this.appointmentTime.toISOString() : <any>undefined;
        data["remarks"] = this.remarks;
        data["appointmentStatus"] = this.appointmentStatus;
        data["reason"] = this.reason;
        data["salesId"] = this.salesId;
        data["from"] = this.from;
        return data; 
    }
}

/** 创建用户的预约信息 */
export interface ICreateUserAppointmentInput {
    tenantId: number;
    /** 预约是否关联智能设备 */
    deviceId: number | undefined;
    /** 展厅/店的Id */
    storeId: number | undefined;
    /** 用户的唯一标识 */
    openId: string | undefined;
    userInPlatform: string | undefined;
    /** 会员信息的ID */
    memberId: number | undefined;
    /** 预约人姓名 */
    name: string | undefined;
    /** 预约人电话 */
    phone: string | undefined;
    /** 预约访客人数 */
    visitorCount: number;
    /** 预约公司名称 */
    companyName: string | undefined;
    /** 预约的类型 */
    type: string | undefined;
    /** 预约时间参观或者访问的具体时间，具体处理的时候，一般会前后半小时 */
    appointmentTime: moment.Moment | undefined;
    /** 预约时的备注 */
    remarks: string | undefined;
    appointmentStatus: AppointmentStatus;
    /** 理由,例如拒绝理由 */
    reason: string | undefined;
    /** 预约分配给的对应销售工程师 */
    salesId: number | undefined;
    /** 预约来源 来自wechat之类 douyin */
    from: string | undefined;
}

export enum EnumSnsType {
    Taobao = 0,
    WeChat = 1,
    Others = 2,
}

export class HandleFeedbacksInput implements IHandleFeedbacksInput {
    ids!: number[] | undefined;
    handleContent!: string | undefined;

    constructor(data?: IHandleFeedbacksInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
            this.handleContent = _data["handleContent"];
        }
    }

    static fromJS(data: any): HandleFeedbacksInput {
        data = typeof data === 'object' ? data : {};
        let result = new HandleFeedbacksInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        data["handleContent"] = this.handleContent;
        return data; 
    }
}

export interface IHandleFeedbacksInput {
    ids: number[] | undefined;
    handleContent: string | undefined;
}

export class MarketingApplication implements IMarketingApplication {
    tenantId!: number;
    appKey!: string | undefined;
    name!: string | undefined;
    host!: string | undefined;
    iconUrl!: string | undefined;
    description!: string | undefined;
    extensionData!: string | undefined;
    marketingPages!: MarketingPage[] | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IMarketingApplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.appKey = _data["appKey"];
            this.name = _data["name"];
            this.host = _data["host"];
            this.iconUrl = _data["iconUrl"];
            this.description = _data["description"];
            this.extensionData = _data["extensionData"];
            if (Array.isArray(_data["marketingPages"])) {
                this.marketingPages = [] as any;
                for (let item of _data["marketingPages"])
                    this.marketingPages!.push(MarketingPage.fromJS(item));
            }
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): MarketingApplication {
        data = typeof data === 'object' ? data : {};
        let result = new MarketingApplication();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["appKey"] = this.appKey;
        data["name"] = this.name;
        data["host"] = this.host;
        data["iconUrl"] = this.iconUrl;
        data["description"] = this.description;
        data["extensionData"] = this.extensionData;
        if (Array.isArray(this.marketingPages)) {
            data["marketingPages"] = [];
            for (let item of this.marketingPages)
                data["marketingPages"].push(item.toJSON());
        }
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IMarketingApplication {
    tenantId: number;
    appKey: string | undefined;
    name: string | undefined;
    host: string | undefined;
    iconUrl: string | undefined;
    description: string | undefined;
    extensionData: string | undefined;
    marketingPages: MarketingPage[] | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class MarketingApplicationDto implements IMarketingApplicationDto {
    tenantId!: number;
    /** 接口上传数据的密码，注意保密 */
    appKey!: string | undefined;
    /** 应用的名称 */
    name!: string | undefined;
    /** 应用的主机 */
    host!: string | undefined;
    /** 应用的图标 */
    iconUrl!: string | undefined;
    /** 描述 */
    description!: string | undefined;
    /** 拓展字段 */
    extensionData!: string | undefined;
    pages!: MarketingPage[] | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IMarketingApplicationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.appKey = _data["appKey"];
            this.name = _data["name"];
            this.host = _data["host"];
            this.iconUrl = _data["iconUrl"];
            this.description = _data["description"];
            this.extensionData = _data["extensionData"];
            if (Array.isArray(_data["pages"])) {
                this.pages = [] as any;
                for (let item of _data["pages"])
                    this.pages!.push(MarketingPage.fromJS(item));
            }
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): MarketingApplicationDto {
        data = typeof data === 'object' ? data : {};
        let result = new MarketingApplicationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["appKey"] = this.appKey;
        data["name"] = this.name;
        data["host"] = this.host;
        data["iconUrl"] = this.iconUrl;
        data["description"] = this.description;
        data["extensionData"] = this.extensionData;
        if (Array.isArray(this.pages)) {
            data["pages"] = [];
            for (let item of this.pages)
                data["pages"].push(item.toJSON());
        }
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IMarketingApplicationDto {
    tenantId: number;
    /** 接口上传数据的密码，注意保密 */
    appKey: string | undefined;
    /** 应用的名称 */
    name: string | undefined;
    /** 应用的主机 */
    host: string | undefined;
    /** 应用的图标 */
    iconUrl: string | undefined;
    /** 描述 */
    description: string | undefined;
    /** 拓展字段 */
    extensionData: string | undefined;
    pages: MarketingPage[] | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class MarketingApplicationDtoPagedResultDto implements IMarketingApplicationDtoPagedResultDto {
    totalCount!: number;
    items!: MarketingApplicationDto[] | undefined;

    constructor(data?: IMarketingApplicationDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MarketingApplicationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MarketingApplicationDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new MarketingApplicationDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMarketingApplicationDtoPagedResultDto {
    totalCount: number;
    items: MarketingApplicationDto[] | undefined;
}

export class MarketingPage implements IMarketingPage {
    tenantId!: number;
    marketingApplicationId!: number;
    marketingApplication!: MarketingApplication;
    name!: string | undefined;
    url!: string | undefined;
    iconUrl!: string | undefined;
    description!: string | undefined;
    extensionData!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IMarketingPage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.marketingApplicationId = _data["marketingApplicationId"];
            this.marketingApplication = _data["marketingApplication"] ? MarketingApplication.fromJS(_data["marketingApplication"]) : <any>undefined;
            this.name = _data["name"];
            this.url = _data["url"];
            this.iconUrl = _data["iconUrl"];
            this.description = _data["description"];
            this.extensionData = _data["extensionData"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): MarketingPage {
        data = typeof data === 'object' ? data : {};
        let result = new MarketingPage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["marketingApplicationId"] = this.marketingApplicationId;
        data["marketingApplication"] = this.marketingApplication ? this.marketingApplication.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["url"] = this.url;
        data["iconUrl"] = this.iconUrl;
        data["description"] = this.description;
        data["extensionData"] = this.extensionData;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IMarketingPage {
    tenantId: number;
    marketingApplicationId: number;
    marketingApplication: MarketingApplication;
    name: string | undefined;
    url: string | undefined;
    iconUrl: string | undefined;
    description: string | undefined;
    extensionData: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

/** 市场营销应用的具体页面信息 */
export class MarketingPageDto implements IMarketingPageDto {
    id!: number;
    tenantId!: number;
    name!: string | undefined;
    url!: string | undefined;
    iconUrl!: string | undefined;
    description!: string | undefined;
    extensionData!: string | undefined;
    pageExtras!: PageExtraDto[] | undefined;

    constructor(data?: IMarketingPageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.iconUrl = _data["iconUrl"];
            this.description = _data["description"];
            this.extensionData = _data["extensionData"];
            if (Array.isArray(_data["pageExtras"])) {
                this.pageExtras = [] as any;
                for (let item of _data["pageExtras"])
                    this.pageExtras!.push(PageExtraDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MarketingPageDto {
        data = typeof data === 'object' ? data : {};
        let result = new MarketingPageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["url"] = this.url;
        data["iconUrl"] = this.iconUrl;
        data["description"] = this.description;
        data["extensionData"] = this.extensionData;
        if (Array.isArray(this.pageExtras)) {
            data["pageExtras"] = [];
            for (let item of this.pageExtras)
                data["pageExtras"].push(item.toJSON());
        }
        return data; 
    }
}

/** 市场营销应用的具体页面信息 */
export interface IMarketingPageDto {
    id: number;
    tenantId: number;
    name: string | undefined;
    url: string | undefined;
    iconUrl: string | undefined;
    description: string | undefined;
    extensionData: string | undefined;
    pageExtras: PageExtraDto[] | undefined;
}

export class MarketingPageDtoPagedResultDto implements IMarketingPageDtoPagedResultDto {
    totalCount!: number;
    items!: MarketingPageDto[] | undefined;

    constructor(data?: IMarketingPageDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MarketingPageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MarketingPageDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new MarketingPageDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMarketingPageDtoPagedResultDto {
    totalCount: number;
    items: MarketingPageDto[] | undefined;
}

export class NameValueDto implements INameValueDto {
    name!: string | undefined;
    value!: string | undefined;

    constructor(data?: INameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): NameValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new NameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface INameValueDto {
    name: string | undefined;
    value: string | undefined;
}

export class PageExtraDto implements IPageExtraDto {
    id!: number;
    tenantId!: number;
    pageId!: number;
    productId!: number | undefined;
    skuId!: number | undefined;
    deviceActivityGameId!: number | undefined;
    salesId!: number | undefined;

    constructor(data?: IPageExtraDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.pageId = _data["pageId"];
            this.productId = _data["productId"];
            this.skuId = _data["skuId"];
            this.deviceActivityGameId = _data["deviceActivityGameId"];
            this.salesId = _data["salesId"];
        }
    }

    static fromJS(data: any): PageExtraDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageExtraDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["pageId"] = this.pageId;
        data["productId"] = this.productId;
        data["skuId"] = this.skuId;
        data["deviceActivityGameId"] = this.deviceActivityGameId;
        data["salesId"] = this.salesId;
        return data; 
    }
}

export interface IPageExtraDto {
    id: number;
    tenantId: number;
    pageId: number;
    productId: number | undefined;
    skuId: number | undefined;
    deviceActivityGameId: number | undefined;
    salesId: number | undefined;
}

export class PageExtraInput implements IPageExtraInput {
    productId!: number | undefined;
    skuId!: number | undefined;
    deviceActivityGameId!: number | undefined;
    salesId!: number | undefined;

    constructor(data?: IPageExtraInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.skuId = _data["skuId"];
            this.deviceActivityGameId = _data["deviceActivityGameId"];
            this.salesId = _data["salesId"];
        }
    }

    static fromJS(data: any): PageExtraInput {
        data = typeof data === 'object' ? data : {};
        let result = new PageExtraInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["skuId"] = this.skuId;
        data["deviceActivityGameId"] = this.deviceActivityGameId;
        data["salesId"] = this.salesId;
        return data; 
    }
}

export interface IPageExtraInput {
    productId: number | undefined;
    skuId: number | undefined;
    deviceActivityGameId: number | undefined;
    salesId: number | undefined;
}

export class PageExtrasDto implements IPageExtrasDto {
    id!: number;
    tenantId!: number;
    applicationName!: string | undefined;
    pageName!: string | undefined;
    productId!: number | undefined;
    skuId!: number | undefined;
    deviceActivityGameId!: number | undefined;
    salesId!: number | undefined;
    snsUserInfo!: SnsUserInfo;
    description!: string | undefined;
    extensionData!: string | undefined;

    constructor(data?: IPageExtrasDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.applicationName = _data["applicationName"];
            this.pageName = _data["pageName"];
            this.productId = _data["productId"];
            this.skuId = _data["skuId"];
            this.deviceActivityGameId = _data["deviceActivityGameId"];
            this.salesId = _data["salesId"];
            this.snsUserInfo = _data["snsUserInfo"] ? SnsUserInfo.fromJS(_data["snsUserInfo"]) : <any>undefined;
            this.description = _data["description"];
            this.extensionData = _data["extensionData"];
        }
    }

    static fromJS(data: any): PageExtrasDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageExtrasDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["applicationName"] = this.applicationName;
        data["pageName"] = this.pageName;
        data["productId"] = this.productId;
        data["skuId"] = this.skuId;
        data["deviceActivityGameId"] = this.deviceActivityGameId;
        data["salesId"] = this.salesId;
        data["snsUserInfo"] = this.snsUserInfo ? this.snsUserInfo.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["extensionData"] = this.extensionData;
        return data; 
    }
}

export interface IPageExtrasDto {
    id: number;
    tenantId: number;
    applicationName: string | undefined;
    pageName: string | undefined;
    productId: number | undefined;
    skuId: number | undefined;
    deviceActivityGameId: number | undefined;
    salesId: number | undefined;
    snsUserInfo: SnsUserInfo;
    description: string | undefined;
    extensionData: string | undefined;
}

export class RecentActionDto implements IRecentActionDto {
    recordTime!: moment.Moment;
    name!: string | undefined;
    headImageUrl!: string | undefined;
    description!: string | undefined;

    constructor(data?: IRecentActionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recordTime = _data["recordTime"] ? moment(_data["recordTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.headImageUrl = _data["headImageUrl"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): RecentActionDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecentActionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recordTime"] = this.recordTime ? this.recordTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["headImageUrl"] = this.headImageUrl;
        data["description"] = this.description;
        return data; 
    }
}

export interface IRecentActionDto {
    recordTime: moment.Moment;
    name: string | undefined;
    headImageUrl: string | undefined;
    description: string | undefined;
}

export class SnsUserInfo implements ISnsUserInfo {
    id!: number | undefined;
    tenantId!: number;
    snsAppID!: string | undefined;
    subscribe!: number | undefined;
    openid!: string | undefined;
    nickname!: string | undefined;
    sex!: number | undefined;
    language!: string | undefined;
    city!: string | undefined;
    province!: string | undefined;
    country!: string | undefined;
    headimgurl!: string | undefined;
    subscribeTime!: moment.Moment | undefined;
    /** 取消关注时间 */
    unSubScribeTime!: moment.Moment | undefined;
    unionid!: string | undefined;
    remark!: string | undefined;
    weixinGroupid!: number | undefined;
    memberId!: number | undefined;
    name!: string | undefined;
    phone!: string | undefined;
    identityID!: string | undefined;
    snsType!: EnumSnsType;
    isFaceMember!: boolean;
    faceMemberId!: string | undefined;
    faceUrl!: string | undefined;

    constructor(data?: ISnsUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.snsAppID = _data["snsAppID"];
            this.subscribe = _data["subscribe"];
            this.openid = _data["openid"];
            this.nickname = _data["nickname"];
            this.sex = _data["sex"];
            this.language = _data["language"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.country = _data["country"];
            this.headimgurl = _data["headimgurl"];
            this.subscribeTime = _data["subscribeTime"] ? moment(_data["subscribeTime"].toString()) : <any>undefined;
            this.unSubScribeTime = _data["unSubScribeTime"] ? moment(_data["unSubScribeTime"].toString()) : <any>undefined;
            this.unionid = _data["unionid"];
            this.remark = _data["remark"];
            this.weixinGroupid = _data["weixinGroupid"];
            this.memberId = _data["memberId"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.identityID = _data["identityID"];
            this.snsType = _data["snsType"];
            this.isFaceMember = _data["isFaceMember"];
            this.faceMemberId = _data["faceMemberId"];
            this.faceUrl = _data["faceUrl"];
        }
    }

    static fromJS(data: any): SnsUserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SnsUserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["snsAppID"] = this.snsAppID;
        data["subscribe"] = this.subscribe;
        data["openid"] = this.openid;
        data["nickname"] = this.nickname;
        data["sex"] = this.sex;
        data["language"] = this.language;
        data["city"] = this.city;
        data["province"] = this.province;
        data["country"] = this.country;
        data["headimgurl"] = this.headimgurl;
        data["subscribeTime"] = this.subscribeTime ? this.subscribeTime.toISOString() : <any>undefined;
        data["unSubScribeTime"] = this.unSubScribeTime ? this.unSubScribeTime.toISOString() : <any>undefined;
        data["unionid"] = this.unionid;
        data["remark"] = this.remark;
        data["weixinGroupid"] = this.weixinGroupid;
        data["memberId"] = this.memberId;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["identityID"] = this.identityID;
        data["snsType"] = this.snsType;
        data["isFaceMember"] = this.isFaceMember;
        data["faceMemberId"] = this.faceMemberId;
        data["faceUrl"] = this.faceUrl;
        return data; 
    }
}

export interface ISnsUserInfo {
    id: number | undefined;
    tenantId: number;
    snsAppID: string | undefined;
    subscribe: number | undefined;
    openid: string | undefined;
    nickname: string | undefined;
    sex: number | undefined;
    language: string | undefined;
    city: string | undefined;
    province: string | undefined;
    country: string | undefined;
    headimgurl: string | undefined;
    subscribeTime: moment.Moment | undefined;
    /** 取消关注时间 */
    unSubScribeTime: moment.Moment | undefined;
    unionid: string | undefined;
    remark: string | undefined;
    weixinGroupid: number | undefined;
    memberId: number | undefined;
    name: string | undefined;
    phone: string | undefined;
    identityID: string | undefined;
    snsType: EnumSnsType;
    isFaceMember: boolean;
    faceMemberId: string | undefined;
    faceUrl: string | undefined;
}

export class UpdateMarketingApplicationInput implements IUpdateMarketingApplicationInput {
    id!: number;
    name!: string | undefined;
    host!: string | undefined;
    iconUrl!: string | undefined;
    description!: string | undefined;
    extensionData!: string | undefined;

    constructor(data?: IUpdateMarketingApplicationInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.host = _data["host"];
            this.iconUrl = _data["iconUrl"];
            this.description = _data["description"];
            this.extensionData = _data["extensionData"];
        }
    }

    static fromJS(data: any): UpdateMarketingApplicationInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMarketingApplicationInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["host"] = this.host;
        data["iconUrl"] = this.iconUrl;
        data["description"] = this.description;
        data["extensionData"] = this.extensionData;
        return data; 
    }
}

export interface IUpdateMarketingApplicationInput {
    id: number;
    name: string | undefined;
    host: string | undefined;
    iconUrl: string | undefined;
    description: string | undefined;
    extensionData: string | undefined;
}

export class UpdatePagesInput implements IUpdatePagesInput {
    id!: number;
    /** 所属的Maketing应用 */
    applicationId!: number;
    name!: string | undefined;
    url!: string | undefined;
    iconUrl!: string | undefined;
    description!: string | undefined;
    extensionData!: string | undefined;
    /** 当前营销页面关联的额外信息，如销售工程师等 */
    pageExtras!: PageExtraInput[] | undefined;

    constructor(data?: IUpdatePagesInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.applicationId = _data["applicationId"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.iconUrl = _data["iconUrl"];
            this.description = _data["description"];
            this.extensionData = _data["extensionData"];
            if (Array.isArray(_data["pageExtras"])) {
                this.pageExtras = [] as any;
                for (let item of _data["pageExtras"])
                    this.pageExtras!.push(PageExtraInput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdatePagesInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePagesInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["applicationId"] = this.applicationId;
        data["name"] = this.name;
        data["url"] = this.url;
        data["iconUrl"] = this.iconUrl;
        data["description"] = this.description;
        data["extensionData"] = this.extensionData;
        if (Array.isArray(this.pageExtras)) {
            data["pageExtras"] = [];
            for (let item of this.pageExtras)
                data["pageExtras"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdatePagesInput {
    id: number;
    /** 所属的Maketing应用 */
    applicationId: number;
    name: string | undefined;
    url: string | undefined;
    iconUrl: string | undefined;
    description: string | undefined;
    extensionData: string | undefined;
    /** 当前营销页面关联的额外信息，如销售工程师等 */
    pageExtras: PageExtraInput[] | undefined;
}

/** 更新用户的预约 */
export class UpdateUserAppointmentInput implements IUpdateUserAppointmentInput {
    id!: number;
    tenantId!: number;
    /** 预约是否关联智能设备 */
    deviceId!: number | undefined;
    /** 展厅/店的Id */
    storeId!: number | undefined;
    /** 用户的唯一标识 */
    openId!: string | undefined;
    userInPlatform!: string | undefined;
    /** 会员信息的ID */
    memberId!: number | undefined;
    /** 预约人姓名 */
    name!: string | undefined;
    /** 预约人电话 */
    phone!: string | undefined;
    /** 预约访客人数 */
    visitorCount!: number;
    /** 预约公司名称 */
    companyName!: string | undefined;
    /** 预约的类型 */
    type!: string | undefined;
    /** 预约时间参观或者访问的具体时间，具体处理的时候，一般会前后半小时 */
    appointmentTime!: moment.Moment | undefined;
    /** 预约时的备注 */
    remarks!: string | undefined;
    appointmentStatus!: AppointmentStatus;
    /** 理由,例如拒绝理由 */
    reason!: string | undefined;
    /** 预约分配给的对应销售工程师 */
    salesId!: number | undefined;
    /** 预约来源 来自wechat之类 douyin */
    from!: string | undefined;

    constructor(data?: IUpdateUserAppointmentInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.deviceId = _data["deviceId"];
            this.storeId = _data["storeId"];
            this.openId = _data["openId"];
            this.userInPlatform = _data["userInPlatform"];
            this.memberId = _data["memberId"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.visitorCount = _data["visitorCount"];
            this.companyName = _data["companyName"];
            this.type = _data["type"];
            this.appointmentTime = _data["appointmentTime"] ? moment(_data["appointmentTime"].toString()) : <any>undefined;
            this.remarks = _data["remarks"];
            this.appointmentStatus = _data["appointmentStatus"];
            this.reason = _data["reason"];
            this.salesId = _data["salesId"];
            this.from = _data["from"];
        }
    }

    static fromJS(data: any): UpdateUserAppointmentInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserAppointmentInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["deviceId"] = this.deviceId;
        data["storeId"] = this.storeId;
        data["openId"] = this.openId;
        data["userInPlatform"] = this.userInPlatform;
        data["memberId"] = this.memberId;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["visitorCount"] = this.visitorCount;
        data["companyName"] = this.companyName;
        data["type"] = this.type;
        data["appointmentTime"] = this.appointmentTime ? this.appointmentTime.toISOString() : <any>undefined;
        data["remarks"] = this.remarks;
        data["appointmentStatus"] = this.appointmentStatus;
        data["reason"] = this.reason;
        data["salesId"] = this.salesId;
        data["from"] = this.from;
        return data; 
    }
}

/** 更新用户的预约 */
export interface IUpdateUserAppointmentInput {
    id: number;
    tenantId: number;
    /** 预约是否关联智能设备 */
    deviceId: number | undefined;
    /** 展厅/店的Id */
    storeId: number | undefined;
    /** 用户的唯一标识 */
    openId: string | undefined;
    userInPlatform: string | undefined;
    /** 会员信息的ID */
    memberId: number | undefined;
    /** 预约人姓名 */
    name: string | undefined;
    /** 预约人电话 */
    phone: string | undefined;
    /** 预约访客人数 */
    visitorCount: number;
    /** 预约公司名称 */
    companyName: string | undefined;
    /** 预约的类型 */
    type: string | undefined;
    /** 预约时间参观或者访问的具体时间，具体处理的时候，一般会前后半小时 */
    appointmentTime: moment.Moment | undefined;
    /** 预约时的备注 */
    remarks: string | undefined;
    appointmentStatus: AppointmentStatus;
    /** 理由,例如拒绝理由 */
    reason: string | undefined;
    /** 预约分配给的对应销售工程师 */
    salesId: number | undefined;
    /** 预约来源 来自wechat之类 douyin */
    from: string | undefined;
}

/** 用户的预约数据和处理，可以区分不同Type的预约类型。 */
export class UserAppointmentDto implements IUserAppointmentDto {
    tenantId!: number;
    /** 预约是否关联智能设备 */
    deviceId!: number | undefined;
    /** 展厅/店的Id */
    storeId!: number | undefined;
    /** 用户的唯一标识 */
    openId!: string | undefined;
    userInPlatform!: string | undefined;
    /** 会员信息的ID */
    memberId!: number | undefined;
    /** 预约人姓名 */
    name!: string | undefined;
    /** 预约人电话 */
    phone!: string | undefined;
    /** 预约访客人数 */
    visitorCount!: number;
    /** 预约公司名称 */
    companyName!: string | undefined;
    /** 预约的类型 */
    type!: string | undefined;
    /** 预约时间参观或者访问的具体时间，具体处理的时候，一般会前后半小时 */
    appointmentTime!: moment.Moment | undefined;
    /** 预约时的备注 */
    remarks!: string | undefined;
    appointmentStatus!: AppointmentStatus;
    /** 理由,例如拒绝理由 */
    reason!: string | undefined;
    /** 预约分配给的对应销售工程师 */
    salesId!: number | undefined;
    /** 预约来源 来自wechat之类 douyin */
    from!: string | undefined;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IUserAppointmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.deviceId = _data["deviceId"];
            this.storeId = _data["storeId"];
            this.openId = _data["openId"];
            this.userInPlatform = _data["userInPlatform"];
            this.memberId = _data["memberId"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.visitorCount = _data["visitorCount"];
            this.companyName = _data["companyName"];
            this.type = _data["type"];
            this.appointmentTime = _data["appointmentTime"] ? moment(_data["appointmentTime"].toString()) : <any>undefined;
            this.remarks = _data["remarks"];
            this.appointmentStatus = _data["appointmentStatus"];
            this.reason = _data["reason"];
            this.salesId = _data["salesId"];
            this.from = _data["from"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UserAppointmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserAppointmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["deviceId"] = this.deviceId;
        data["storeId"] = this.storeId;
        data["openId"] = this.openId;
        data["userInPlatform"] = this.userInPlatform;
        data["memberId"] = this.memberId;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["visitorCount"] = this.visitorCount;
        data["companyName"] = this.companyName;
        data["type"] = this.type;
        data["appointmentTime"] = this.appointmentTime ? this.appointmentTime.toISOString() : <any>undefined;
        data["remarks"] = this.remarks;
        data["appointmentStatus"] = this.appointmentStatus;
        data["reason"] = this.reason;
        data["salesId"] = this.salesId;
        data["from"] = this.from;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

/** 用户的预约数据和处理，可以区分不同Type的预约类型。 */
export interface IUserAppointmentDto {
    tenantId: number;
    /** 预约是否关联智能设备 */
    deviceId: number | undefined;
    /** 展厅/店的Id */
    storeId: number | undefined;
    /** 用户的唯一标识 */
    openId: string | undefined;
    userInPlatform: string | undefined;
    /** 会员信息的ID */
    memberId: number | undefined;
    /** 预约人姓名 */
    name: string | undefined;
    /** 预约人电话 */
    phone: string | undefined;
    /** 预约访客人数 */
    visitorCount: number;
    /** 预约公司名称 */
    companyName: string | undefined;
    /** 预约的类型 */
    type: string | undefined;
    /** 预约时间参观或者访问的具体时间，具体处理的时候，一般会前后半小时 */
    appointmentTime: moment.Moment | undefined;
    /** 预约时的备注 */
    remarks: string | undefined;
    appointmentStatus: AppointmentStatus;
    /** 理由,例如拒绝理由 */
    reason: string | undefined;
    /** 预约分配给的对应销售工程师 */
    salesId: number | undefined;
    /** 预约来源 来自wechat之类 douyin */
    from: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class UserAppointmentDtoPagedResultDto implements IUserAppointmentDtoPagedResultDto {
    totalCount!: number;
    items!: UserAppointmentDto[] | undefined;

    constructor(data?: IUserAppointmentDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserAppointmentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserAppointmentDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserAppointmentDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserAppointmentDtoPagedResultDto {
    totalCount: number;
    items: UserAppointmentDto[] | undefined;
}

/** 用户的反馈(如改进意见，服务质量等) */
export class UserFeedbackDto implements IUserFeedbackDto {
    tenantId!: number;
    /** 分享者对应的服务人员Id */
    salesId!: number | undefined;
    handled!: boolean;
    handleContent!: string | undefined;
    from!: string | undefined;
    /** 属于那个市场活动下的 */
    marketingApplicationId!: number | undefined;
    /** 反馈的类型 */
    type!: string | undefined;
    /** 反馈的具体事情,需要和其它的微服务结合，这里只做些记录. */
    thingId!: number | undefined;
    description!: string | undefined;
    /** 用户的姓名 */
    name!: string | undefined;
    tel!: string | undefined;
    /** 用户的唯一标识，如微信公众号的OpenId,淘宝的UUId等 */
    openId!: string | undefined;
    userInPlatform!: string | undefined;
    /** 会员信息的ID */
    memberId!: number | undefined;
    companyId!: number;
    company!: string | undefined;

    constructor(data?: IUserFeedbackDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.salesId = _data["salesId"];
            this.handled = _data["handled"];
            this.handleContent = _data["handleContent"];
            this.from = _data["from"];
            this.marketingApplicationId = _data["marketingApplicationId"];
            this.type = _data["type"];
            this.thingId = _data["thingId"];
            this.description = _data["description"];
            this.name = _data["name"];
            this.tel = _data["tel"];
            this.openId = _data["openId"];
            this.userInPlatform = _data["userInPlatform"];
            this.memberId = _data["memberId"];
            this.companyId = _data["companyId"];
            this.company = _data["company"];
        }
    }

    static fromJS(data: any): UserFeedbackDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserFeedbackDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["salesId"] = this.salesId;
        data["handled"] = this.handled;
        data["handleContent"] = this.handleContent;
        data["from"] = this.from;
        data["marketingApplicationId"] = this.marketingApplicationId;
        data["type"] = this.type;
        data["thingId"] = this.thingId;
        data["description"] = this.description;
        data["name"] = this.name;
        data["tel"] = this.tel;
        data["openId"] = this.openId;
        data["userInPlatform"] = this.userInPlatform;
        data["memberId"] = this.memberId;
        data["companyId"] = this.companyId;
        data["company"] = this.company;
        return data; 
    }
}

/** 用户的反馈(如改进意见，服务质量等) */
export interface IUserFeedbackDto {
    tenantId: number;
    /** 分享者对应的服务人员Id */
    salesId: number | undefined;
    handled: boolean;
    handleContent: string | undefined;
    from: string | undefined;
    /** 属于那个市场活动下的 */
    marketingApplicationId: number | undefined;
    /** 反馈的类型 */
    type: string | undefined;
    /** 反馈的具体事情,需要和其它的微服务结合，这里只做些记录. */
    thingId: number | undefined;
    description: string | undefined;
    /** 用户的姓名 */
    name: string | undefined;
    tel: string | undefined;
    /** 用户的唯一标识，如微信公众号的OpenId,淘宝的UUId等 */
    openId: string | undefined;
    userInPlatform: string | undefined;
    /** 会员信息的ID */
    memberId: number | undefined;
    companyId: number;
    company: string | undefined;
}

export class UserFeedbackDtoPagedResultDto implements IUserFeedbackDtoPagedResultDto {
    totalCount!: number;
    items!: UserFeedbackDto[] | undefined;

    constructor(data?: IUserFeedbackDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserFeedbackDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserFeedbackDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserFeedbackDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserFeedbackDtoPagedResultDto {
    totalCount: number;
    items: UserFeedbackDto[] | undefined;
}

export class VisitorInfoDto implements IVisitorInfoDto {
    recentVisitors!: NameValueDto[] | undefined;
    visitorCount!: number;

    constructor(data?: IVisitorInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["recentVisitors"])) {
                this.recentVisitors = [] as any;
                for (let item of _data["recentVisitors"])
                    this.recentVisitors!.push(NameValueDto.fromJS(item));
            }
            this.visitorCount = _data["visitorCount"];
        }
    }

    static fromJS(data: any): VisitorInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new VisitorInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.recentVisitors)) {
            data["recentVisitors"] = [];
            for (let item of this.recentVisitors)
                data["recentVisitors"].push(item.toJSON());
        }
        data["visitorCount"] = this.visitorCount;
        return data; 
    }
}

export interface IVisitorInfoDto {
    recentVisitors: NameValueDto[] | undefined;
    visitorCount: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}