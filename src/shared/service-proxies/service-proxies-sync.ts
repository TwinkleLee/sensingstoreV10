/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.3.0 (NJsonSchema v10.3.6.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { DateTime } from 'luxon';
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_SYNC_URL = new InjectionToken<string>('API_SYNC_URL');

@Injectable()
export class BatchTaskLogServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_SYNC_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取批处理任务列表
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getBatchTaskLogs(planId: number, filter: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<BatchTaskLogDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/BatchTaskLog/GetBatchTaskLogs?";
        if (planId === undefined || planId === null)
            throw new Error("The parameter 'planId' must be defined and cannot be null.");
        else
            url_ += "PlanId=" + encodeURIComponent("" + planId) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBatchTaskLogs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBatchTaskLogs(<any>response_);
                } catch (e) {
                    return <Observable<BatchTaskLogDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BatchTaskLogDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetBatchTaskLogs(response: HttpResponseBase): Observable<BatchTaskLogDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BatchTaskLogDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BatchTaskLogDtoPagedResultDto>(<any>null);
    }
}

@Injectable()
export class IdentityServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_SYNC_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getClaims(): Observable<string> {
        let url_ = this.baseUrl + "/Identity/GetClaims";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClaims(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetClaims(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @return Success
     */
    keepIISAlive(): Observable<boolean> {
        let url_ = this.baseUrl + "/Identity/KeepIISAlive";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processKeepIISAlive(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processKeepIISAlive(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processKeepIISAlive(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }
}

@Injectable()
export class MonecityServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_SYNC_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    syncFromMonecity(body: SyncInput | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Monecity/SyncFromMonecity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSyncFromMonecity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSyncFromMonecity(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processSyncFromMonecity(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class PlanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_SYNC_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取所有计划任务的列表，支持分页
     * @param onlineStoreId (optional) 
     * @param filter (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getAll(onlineStoreId: number | undefined, filter: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Observable<PlanDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Plan/GetAll?";
        if (onlineStoreId === null)
            throw new Error("The parameter 'onlineStoreId' cannot be null.");
        else if (onlineStoreId !== undefined)
            url_ += "OnlineStoreId=" + encodeURIComponent("" + onlineStoreId) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PlanDtoPagedResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PlanDtoPagedResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PlanDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PlanDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PlanDtoPagedResultDto>(<any>null);
    }

    /**
     * 获取单个的计划任务详细信息
     * @param id (optional) 
     * @return Success
     */
    getSingle(id: number | undefined): Observable<PlanDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/Plan/GetSingle?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSingle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSingle(<any>response_);
                } catch (e) {
                    return <Observable<PlanDetailDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PlanDetailDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetSingle(response: HttpResponseBase): Observable<PlanDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PlanDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PlanDetailDto>(<any>null);
    }

    /**
     * 创建自己的定时计划任务
     * @param body (optional) 
     * @return Success
     */
    createPlan(body: CreatePlanInput | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Plan/CreatePlan";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreatePlan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreatePlan(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreatePlan(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * 更新自己的计划任务信息
     * @param body (optional) 
     * @return Success
     */
    updatePlan(body: UpdatePlanInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Plan/UpdatePlan";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePlan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePlan(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdatePlan(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除特定的任务计划
     * @param id (optional) 
     * @return Success
     */
    deletePlan(id: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Plan/DeletePlan?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeletePlan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeletePlan(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeletePlan(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 修改计划的状态
     * @param body (optional) 
     * @return Success
     */
    changePlanStatus(body: ChangePlanStatusInput | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Plan/ChangePlanStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePlanStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePlanStatus(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangePlanStatus(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class SensingDeviceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_SYNC_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    dataFeedBackToTaobao(body: DataFeedBackToTaobaoInput | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/DataFeedBackToTaobao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDataFeedBackToTaobao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDataFeedBackToTaobao(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processDataFeedBackToTaobao(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getFaceRecommend(body: GetFaceRecommendInput | undefined): Observable<GetFaceRecommendDto> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetFaceRecommend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFaceRecommend(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFaceRecommend(<any>response_);
                } catch (e) {
                    return <Observable<GetFaceRecommendDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetFaceRecommendDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetFaceRecommend(response: HttpResponseBase): Observable<GetFaceRecommendDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetFaceRecommendDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetFaceRecommendDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    isFaceMember(body: IsFaceMemberInput | undefined): Observable<GetFaceRecommendDto> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/IsFaceMember";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsFaceMember(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsFaceMember(<any>response_);
                } catch (e) {
                    return <Observable<GetFaceRecommendDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetFaceRecommendDto>><any>_observableThrow(response_);
        }));
    }

    protected processIsFaceMember(response: HttpResponseBase): Observable<GetFaceRecommendDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetFaceRecommendDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetFaceRecommendDto>(<any>null);
    }

    /**
     * @param mixNick (optional) 
     * @param appKey (optional) 
     * @param secret (optional) 
     * @return Success
     */
    getUserAvatar(mixNick: string | undefined, appKey: string | undefined, secret: string | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/GetUserAvatar?";
        if (mixNick === null)
            throw new Error("The parameter 'mixNick' cannot be null.");
        else if (mixNick !== undefined)
            url_ += "MixNick=" + encodeURIComponent("" + mixNick) + "&";
        if (appKey === null)
            throw new Error("The parameter 'appKey' cannot be null.");
        else if (appKey !== undefined)
            url_ += "AppKey=" + encodeURIComponent("" + appKey) + "&";
        if (secret === null)
            throw new Error("The parameter 'secret' cannot be null.");
        else if (secret !== undefined)
            url_ += "Secret=" + encodeURIComponent("" + secret) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserAvatar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserAvatar(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserAvatar(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addSmartStoreDevice(body: AddSmartStoreDeviceInput | undefined): Observable<GetFaceRecommendDto> {
        let url_ = this.baseUrl + "/api/services/app/SensingDevice/AddSmartStoreDevice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddSmartStoreDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddSmartStoreDevice(<any>response_);
                } catch (e) {
                    return <Observable<GetFaceRecommendDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetFaceRecommendDto>><any>_observableThrow(response_);
        }));
    }

    protected processAddSmartStoreDevice(response: HttpResponseBase): Observable<GetFaceRecommendDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetFaceRecommendDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetFaceRecommendDto>(<any>null);
    }
}

@Injectable()
export class TaobaoServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_SYNC_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取淘宝授权地址
     * @param taobaoOpenPlatformId (optional) 
     * @return Success
     */
    authorzieUrl(taobaoOpenPlatformId: number | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Taobao/AuthorzieUrl?";
        if (taobaoOpenPlatformId === null)
            throw new Error("The parameter 'taobaoOpenPlatformId' cannot be null.");
        else if (taobaoOpenPlatformId !== undefined)
            url_ += "taobaoOpenPlatformId=" + encodeURIComponent("" + taobaoOpenPlatformId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthorzieUrl(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthorzieUrl(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processAuthorzieUrl(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * 从淘宝同步商品分类和在售商品
     * @param body (optional) 
     * @return Success
     */
    syncFromTaobao(body: SyncInput | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Taobao/SyncFromTaobao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSyncFromTaobao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSyncFromTaobao(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processSyncFromTaobao(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * 刷新授权信息
     * @param refrehCode (optional) 
     * @param state (optional) 
     * @return Success
     */
    refrshAuthorizeCallBack(refrehCode: string | undefined, state: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Taobao/RefrshAuthorizeCallBack?";
        if (refrehCode === null)
            throw new Error("The parameter 'refrehCode' cannot be null.");
        else if (refrehCode !== undefined)
            url_ += "refrehCode=" + encodeURIComponent("" + refrehCode) + "&";
        if (state === null)
            throw new Error("The parameter 'state' cannot be null.");
        else if (state !== undefined)
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRefrshAuthorizeCallBack(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefrshAuthorizeCallBack(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRefrshAuthorizeCallBack(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class ThingSyncServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_SYNC_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param code (optional) 
     * @param platFormId (optional) 
     * @return Success
     */
    applyAccessToken(code: string | undefined, platFormId: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ThingSync/ApplyAccessToken?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (platFormId === null)
            throw new Error("The parameter 'platFormId' cannot be null.");
        else if (platFormId !== undefined)
            url_ += "platFormId=" + encodeURIComponent("" + platFormId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApplyAccessToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApplyAccessToken(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processApplyAccessToken(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param platFormId (optional) 
     * @return Success
     */
    refreshAccessToken(platFormId: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ThingSync/RefreshAccessToken?";
        if (platFormId === null)
            throw new Error("The parameter 'platFormId' cannot be null.");
        else if (platFormId !== undefined)
            url_ += "platFormId=" + encodeURIComponent("" + platFormId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRefreshAccessToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefreshAccessToken(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRefreshAccessToken(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 添加产品到购物车
     * @param body (optional) 
     * @return Success
     */
    addGoodsToCar(subkey: string, body: AddGoodsToCarInput | undefined): Observable<TaobaoCarDto> {
        let url_ = this.baseUrl + "/api/services/app/ThingSync/AddGoodsToCar?";
        if (subkey === undefined || subkey === null)
            throw new Error("The parameter 'subkey' must be defined and cannot be null.");
        else
            url_ += "subkey=" + encodeURIComponent("" + subkey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddGoodsToCar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddGoodsToCar(<any>response_);
                } catch (e) {
                    return <Observable<TaobaoCarDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TaobaoCarDto>><any>_observableThrow(response_);
        }));
    }

    protected processAddGoodsToCar(response: HttpResponseBase): Observable<TaobaoCarDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaobaoCarDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TaobaoCarDto>(<any>null);
    }
}

@Injectable()
export class WeimobServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_SYNC_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * get client id and secret by platformid
     * @param platformId (optional) 
     * @return Success
     */
    getCode(platformId: number | undefined): Observable<AuthorizeDto> {
        let url_ = this.baseUrl + "/api/services/app/Weimob/GetCode?";
        if (platformId === null)
            throw new Error("The parameter 'platformId' cannot be null.");
        else if (platformId !== undefined)
            url_ += "platformId=" + encodeURIComponent("" + platformId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCode(<any>response_);
                } catch (e) {
                    return <Observable<AuthorizeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthorizeDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCode(response: HttpResponseBase): Observable<AuthorizeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthorizeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthorizeDto>(<any>null);
    }

    /**
     * apply for token by code and return token id
     * @param body (optional) 
     * @return Success
     */
    authorize(body: AuthorizeDto | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Weimob/Authorize";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthorize(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthorize(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processAuthorize(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * create plan with token ID
     * @param tokenId (optional) 
     * @return Success
     */
    createPlan(tokenId: number | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Weimob/CreatePlan?";
        if (tokenId === null)
            throw new Error("The parameter 'tokenId' cannot be null.");
        else if (tokenId !== undefined)
            url_ += "tokenId=" + encodeURIComponent("" + tokenId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreatePlan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreatePlan(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreatePlan(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * sync weimob with planid
     * @param planId (optional) 
     * @return Success
     */
    syncWeimobWithPlanId(planId: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Weimob/SyncWeimobWithPlanId?";
        if (planId === null)
            throw new Error("The parameter 'planId' cannot be null.");
        else if (planId !== undefined)
            url_ += "planId=" + encodeURIComponent("" + planId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSyncWeimobWithPlanId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSyncWeimobWithPlanId(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSyncWeimobWithPlanId(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取微盟的授权地址
     * @param platformId (optional) 
     * @return Success
     */
    authorizeUrl(platformId: number | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Weimob/AuthorizeUrl?";
        if (platformId === null)
            throw new Error("The parameter 'platformId' cannot be null.");
        else if (platformId !== undefined)
            url_ += "platformId=" + encodeURIComponent("" + platformId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthorizeUrl(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthorizeUrl(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processAuthorizeUrl(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param tokenId (optional) 
     * @return Success
     */
    refreshTokenJob(tokenId: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Weimob/RefreshTokenJob?";
        if (tokenId === null)
            throw new Error("The parameter 'tokenId' cannot be null.");
        else if (tokenId !== undefined)
            url_ += "tokenId=" + encodeURIComponent("" + tokenId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRefreshTokenJob(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefreshTokenJob(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRefreshTokenJob(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class AddGoodsToCarInput implements IAddGoodsToCarInput {
    /** 商品信息，格式为 商品ID_SKU ID_数量，多条记录以逗号(,)分割 */
    item_ids!: string | undefined;
    longterm!: boolean;

    constructor(data?: IAddGoodsToCarInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item_ids = _data["item_ids"];
            this.longterm = _data["longterm"];
        }
    }

    static fromJS(data: any): AddGoodsToCarInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddGoodsToCarInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item_ids"] = this.item_ids;
        data["longterm"] = this.longterm;
        return data; 
    }
}

export interface IAddGoodsToCarInput {
    /** 商品信息，格式为 商品ID_SKU ID_数量，多条记录以逗号(,)分割 */
    item_ids: string | undefined;
    longterm: boolean;
}

export class AddSmartStoreDeviceInput implements IAddSmartStoreDeviceInput {
    appKey!: string | undefined;
    secret!: string | undefined;
    access_token!: string | undefined;
    deviceId!: string | undefined;
    deviceName!: string | undefined;
    storeId!: number | undefined;
    osType!: string | undefined;
    deviceType!: string | undefined;

    constructor(data?: IAddSmartStoreDeviceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appKey = _data["appKey"];
            this.secret = _data["secret"];
            this.access_token = _data["access_token"];
            this.deviceId = _data["deviceId"];
            this.deviceName = _data["deviceName"];
            this.storeId = _data["storeId"];
            this.osType = _data["osType"];
            this.deviceType = _data["deviceType"];
        }
    }

    static fromJS(data: any): AddSmartStoreDeviceInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddSmartStoreDeviceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appKey"] = this.appKey;
        data["secret"] = this.secret;
        data["access_token"] = this.access_token;
        data["deviceId"] = this.deviceId;
        data["deviceName"] = this.deviceName;
        data["storeId"] = this.storeId;
        data["osType"] = this.osType;
        data["deviceType"] = this.deviceType;
        return data; 
    }
}

export interface IAddSmartStoreDeviceInput {
    appKey: string | undefined;
    secret: string | undefined;
    access_token: string | undefined;
    deviceId: string | undefined;
    deviceName: string | undefined;
    storeId: number | undefined;
    osType: string | undefined;
    deviceType: string | undefined;
}

export class AuthorizeDto implements IAuthorizeDto {
    platform_id!: number;
    code!: string | undefined;
    client_id!: string | undefined;
    client_secret!: string | undefined;
    redirect_uri!: string | undefined;

    constructor(data?: IAuthorizeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.platform_id = _data["platform_id"];
            this.code = _data["code"];
            this.client_id = _data["client_id"];
            this.client_secret = _data["client_secret"];
            this.redirect_uri = _data["redirect_uri"];
        }
    }

    static fromJS(data: any): AuthorizeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorizeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["platform_id"] = this.platform_id;
        data["code"] = this.code;
        data["client_id"] = this.client_id;
        data["client_secret"] = this.client_secret;
        data["redirect_uri"] = this.redirect_uri;
        return data; 
    }
}

export interface IAuthorizeDto {
    platform_id: number;
    code: string | undefined;
    client_id: string | undefined;
    client_secret: string | undefined;
    redirect_uri: string | undefined;
}

export class BatchTaskLogDto implements IBatchTaskLogDto {
    name!: string | undefined;
    batchType!: string | undefined;
    completedCount!: number;
    totalCount!: number;
    status!: string | undefined;
    lastModificationTime!: moment.Moment | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IBatchTaskLogDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.batchType = _data["batchType"];
            this.completedCount = _data["completedCount"];
            this.totalCount = _data["totalCount"];
            this.status = _data["status"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BatchTaskLogDto {
        data = typeof data === 'object' ? data : {};
        let result = new BatchTaskLogDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["batchType"] = this.batchType;
        data["completedCount"] = this.completedCount;
        data["totalCount"] = this.totalCount;
        data["status"] = this.status;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IBatchTaskLogDto {
    name: string | undefined;
    batchType: string | undefined;
    completedCount: number;
    totalCount: number;
    status: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class BatchTaskLogDtoPagedResultDto implements IBatchTaskLogDtoPagedResultDto {
    totalCount!: number;
    items!: BatchTaskLogDto[] | undefined;

    constructor(data?: IBatchTaskLogDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BatchTaskLogDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BatchTaskLogDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new BatchTaskLogDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBatchTaskLogDtoPagedResultDto {
    totalCount: number;
    items: BatchTaskLogDto[] | undefined;
}

export class ChangePlanStatusInput implements IChangePlanStatusInput {
    planId!: number;
    isEnabled!: boolean;

    constructor(data?: IChangePlanStatusInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.planId = _data["planId"];
            this.isEnabled = _data["isEnabled"];
        }
    }

    static fromJS(data: any): ChangePlanStatusInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePlanStatusInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["planId"] = this.planId;
        data["isEnabled"] = this.isEnabled;
        return data; 
    }
}

export interface IChangePlanStatusInput {
    planId: number;
    isEnabled: boolean;
}

export class CreatePlanInput implements ICreatePlanInput {
    name!: string;
    externalAccessTokenInfoId!: number;
    schedule!: CreateScheduleInput;
    syncOption!: CreateSyncOptionInput;
    isEnabled!: boolean;

    constructor(data?: ICreatePlanInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.externalAccessTokenInfoId = _data["externalAccessTokenInfoId"];
            this.schedule = _data["schedule"] ? CreateScheduleInput.fromJS(_data["schedule"]) : <any>undefined;
            this.syncOption = _data["syncOption"] ? CreateSyncOptionInput.fromJS(_data["syncOption"]) : <any>undefined;
            this.isEnabled = _data["isEnabled"];
        }
    }

    static fromJS(data: any): CreatePlanInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePlanInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["externalAccessTokenInfoId"] = this.externalAccessTokenInfoId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : <any>undefined;
        data["syncOption"] = this.syncOption ? this.syncOption.toJSON() : <any>undefined;
        data["isEnabled"] = this.isEnabled;
        return data; 
    }
}

export interface ICreatePlanInput {
    name: string;
    externalAccessTokenInfoId: number;
    schedule: CreateScheduleInput;
    syncOption: CreateSyncOptionInput;
    isEnabled: boolean;
}

export class CreateScheduleInput implements ICreateScheduleInput {
    model!: ScheEnum;
    /** 具体执行时间 多个时间用逗号隔开09：00，18：10 */
    runTime!: string;
    /** day of the week (0 - 6) (Sunday to Saturday)
逗号隔开 1,3,5 表示每周1,周三，周5执行 */
    weeDay!: string | undefined;
    /** day of the month (1 - 31)
逗号隔开 1,3,5 表示 1号 3号 5号 */
    monthDay!: string | undefined;
    statDate!: moment.Moment | undefined;
    endDate!: moment.Moment | undefined;

    constructor(data?: ICreateScheduleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.model = _data["model"];
            this.runTime = _data["runTime"];
            this.weeDay = _data["weeDay"];
            this.monthDay = _data["monthDay"];
            this.statDate = _data["statDate"] ? moment(_data["statDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? moment(_data["endDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateScheduleInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateScheduleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["model"] = this.model;
        data["runTime"] = this.runTime;
        data["weeDay"] = this.weeDay;
        data["monthDay"] = this.monthDay;
        data["statDate"] = this.statDate ? this.statDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICreateScheduleInput {
    model: ScheEnum;
    /** 具体执行时间 多个时间用逗号隔开09：00，18：10 */
    runTime: string;
    /** day of the week (0 - 6) (Sunday to Saturday)
逗号隔开 1,3,5 表示每周1,周三，周5执行 */
    weeDay: string | undefined;
    /** day of the month (1 - 31)
逗号隔开 1,3,5 表示 1号 3号 5号 */
    monthDay: string | undefined;
    statDate: moment.Moment | undefined;
    endDate: moment.Moment | undefined;
}

export class CreateSyncOptionInput implements ICreateSyncOptionInput {
    syncType!: SyncScopeEnum;
    syncFields!: string | undefined;

    constructor(data?: ICreateSyncOptionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.syncType = _data["syncType"];
            this.syncFields = _data["syncFields"];
        }
    }

    static fromJS(data: any): CreateSyncOptionInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSyncOptionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["syncType"] = this.syncType;
        data["syncFields"] = this.syncFields;
        return data; 
    }
}

export interface ICreateSyncOptionInput {
    syncType: SyncScopeEnum;
    syncFields: string | undefined;
}

export class DataFeedBackToTaobaoInput implements IDataFeedBackToTaobaoInput {
    appKey!: string | undefined;
    secret!: string | undefined;
    deviceCode!: string | undefined;
    statusTime!: moment.Moment;
    access_token!: string | undefined;

    constructor(data?: IDataFeedBackToTaobaoInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appKey = _data["appKey"];
            this.secret = _data["secret"];
            this.deviceCode = _data["deviceCode"];
            this.statusTime = _data["statusTime"] ? moment(_data["statusTime"].toString()) : <any>undefined;
            this.access_token = _data["access_token"];
        }
    }

    static fromJS(data: any): DataFeedBackToTaobaoInput {
        data = typeof data === 'object' ? data : {};
        let result = new DataFeedBackToTaobaoInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appKey"] = this.appKey;
        data["secret"] = this.secret;
        data["deviceCode"] = this.deviceCode;
        data["statusTime"] = this.statusTime ? this.statusTime.toISOString() : <any>undefined;
        data["access_token"] = this.access_token;
        return data; 
    }
}

export interface IDataFeedBackToTaobaoInput {
    appKey: string | undefined;
    secret: string | undefined;
    deviceCode: string | undefined;
    statusTime: moment.Moment;
    access_token: string | undefined;
}

export class GetFaceRecommendDto implements IGetFaceRecommendDto {
    modle!: string | undefined;
    body!: string | undefined;
    success!: boolean;

    constructor(data?: IGetFaceRecommendDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modle = _data["modle"];
            this.body = _data["body"];
            this.success = _data["success"];
        }
    }

    static fromJS(data: any): GetFaceRecommendDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFaceRecommendDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modle"] = this.modle;
        data["body"] = this.body;
        data["success"] = this.success;
        return data; 
    }
}

export interface IGetFaceRecommendDto {
    modle: string | undefined;
    body: string | undefined;
    success: boolean;
}

export class GetFaceRecommendInput implements IGetFaceRecommendInput {
    appKey!: string | undefined;
    secret!: string | undefined;
    imageListJson!: string | undefined;
    userId!: string | undefined;
    storeId!: number | undefined;
    deviceId!: string | undefined;
    access_token!: string | undefined;

    constructor(data?: IGetFaceRecommendInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appKey = _data["appKey"];
            this.secret = _data["secret"];
            this.imageListJson = _data["imageListJson"];
            this.userId = _data["userId"];
            this.storeId = _data["storeId"];
            this.deviceId = _data["deviceId"];
            this.access_token = _data["access_token"];
        }
    }

    static fromJS(data: any): GetFaceRecommendInput {
        data = typeof data === 'object' ? data : {};
        let result = new GetFaceRecommendInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appKey"] = this.appKey;
        data["secret"] = this.secret;
        data["imageListJson"] = this.imageListJson;
        data["userId"] = this.userId;
        data["storeId"] = this.storeId;
        data["deviceId"] = this.deviceId;
        data["access_token"] = this.access_token;
        return data; 
    }
}

export interface IGetFaceRecommendInput {
    appKey: string | undefined;
    secret: string | undefined;
    imageListJson: string | undefined;
    userId: string | undefined;
    storeId: number | undefined;
    deviceId: string | undefined;
    access_token: string | undefined;
}

export class IsFaceMemberInput implements IIsFaceMemberInput {
    appKey!: string | undefined;
    secret!: string | undefined;
    access_token!: string | undefined;
    deviceCode!: string | undefined;
    face!: string | undefined;

    constructor(data?: IIsFaceMemberInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appKey = _data["appKey"];
            this.secret = _data["secret"];
            this.access_token = _data["access_token"];
            this.deviceCode = _data["deviceCode"];
            this.face = _data["face"];
        }
    }

    static fromJS(data: any): IsFaceMemberInput {
        data = typeof data === 'object' ? data : {};
        let result = new IsFaceMemberInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appKey"] = this.appKey;
        data["secret"] = this.secret;
        data["access_token"] = this.access_token;
        data["deviceCode"] = this.deviceCode;
        data["face"] = this.face;
        return data; 
    }
}

export interface IIsFaceMemberInput {
    appKey: string | undefined;
    secret: string | undefined;
    access_token: string | undefined;
    deviceCode: string | undefined;
    face: string | undefined;
}

export class PlanDetailDto implements IPlanDetailDto {
    id!: number;
    name!: string | undefined;
    externalAccessTokenInfoId!: number;
    isEnabled!: boolean;
    schedule!: UpdateScheduleInput;
    syncOption!: UpdateSyncOptionInput;

    constructor(data?: IPlanDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.externalAccessTokenInfoId = _data["externalAccessTokenInfoId"];
            this.isEnabled = _data["isEnabled"];
            this.schedule = _data["schedule"] ? UpdateScheduleInput.fromJS(_data["schedule"]) : <any>undefined;
            this.syncOption = _data["syncOption"] ? UpdateSyncOptionInput.fromJS(_data["syncOption"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PlanDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new PlanDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["externalAccessTokenInfoId"] = this.externalAccessTokenInfoId;
        data["isEnabled"] = this.isEnabled;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : <any>undefined;
        data["syncOption"] = this.syncOption ? this.syncOption.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPlanDetailDto {
    id: number;
    name: string | undefined;
    externalAccessTokenInfoId: number;
    isEnabled: boolean;
    schedule: UpdateScheduleInput;
    syncOption: UpdateSyncOptionInput;
}

export class PlanDto implements IPlanDto {
    name!: string | undefined;
    externalAccessTokenInfoId!: number;
    externalAccessInfoName!: string | undefined;
    isEnabled!: boolean;
    schedule!: UpdateScheduleInput;
    syncOption!: UpdateSyncOptionInput;
    isDeleted!: boolean;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment;
    creatorUserId!: number | undefined;
    id!: number;

    constructor(data?: IPlanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.externalAccessTokenInfoId = _data["externalAccessTokenInfoId"];
            this.externalAccessInfoName = _data["externalAccessInfoName"];
            this.isEnabled = _data["isEnabled"];
            this.schedule = _data["schedule"] ? UpdateScheduleInput.fromJS(_data["schedule"]) : <any>undefined;
            this.syncOption = _data["syncOption"] ? UpdateSyncOptionInput.fromJS(_data["syncOption"]) : <any>undefined;
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PlanDto {
        data = typeof data === 'object' ? data : {};
        let result = new PlanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["externalAccessTokenInfoId"] = this.externalAccessTokenInfoId;
        data["externalAccessInfoName"] = this.externalAccessInfoName;
        data["isEnabled"] = this.isEnabled;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : <any>undefined;
        data["syncOption"] = this.syncOption ? this.syncOption.toJSON() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IPlanDto {
    name: string | undefined;
    externalAccessTokenInfoId: number;
    externalAccessInfoName: string | undefined;
    isEnabled: boolean;
    schedule: UpdateScheduleInput;
    syncOption: UpdateSyncOptionInput;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class PlanDtoPagedResultDto implements IPlanDtoPagedResultDto {
    totalCount!: number;
    items!: PlanDto[] | undefined;

    constructor(data?: IPlanDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PlanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PlanDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new PlanDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPlanDtoPagedResultDto {
    totalCount: number;
    items: PlanDto[] | undefined;
}

export enum ScheEnum {
    Once = 0,
    Daily = 1,
    Week = 2,
    Month = 3,
}

export class SyncInput implements ISyncInput {
    syncType!: SyncScopeEnum;
    ignoreFields!: string | undefined;
    accessTokenId!: number;

    constructor(data?: ISyncInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.syncType = _data["syncType"];
            this.ignoreFields = _data["ignoreFields"];
            this.accessTokenId = _data["accessTokenId"];
        }
    }

    static fromJS(data: any): SyncInput {
        data = typeof data === 'object' ? data : {};
        let result = new SyncInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["syncType"] = this.syncType;
        data["ignoreFields"] = this.ignoreFields;
        data["accessTokenId"] = this.accessTokenId;
        return data; 
    }
}

export interface ISyncInput {
    syncType: SyncScopeEnum;
    ignoreFields: string | undefined;
    accessTokenId: number;
}

export enum SyncScopeEnum {
    Full = 0,
    LocalBasicAdd = 1,
    LocalBasicUpdate = 2,
}

export class TaobaoCarDto implements ITaobaoCarDto {
    /** 二维码短链接地址 */
    shortUrl!: string | undefined;
    /** 二维码图片URL */
    shortImgUrl!: string | undefined;

    constructor(data?: ITaobaoCarDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shortUrl = _data["shortUrl"];
            this.shortImgUrl = _data["shortImgUrl"];
        }
    }

    static fromJS(data: any): TaobaoCarDto {
        data = typeof data === 'object' ? data : {};
        let result = new TaobaoCarDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shortUrl"] = this.shortUrl;
        data["shortImgUrl"] = this.shortImgUrl;
        return data; 
    }
}

export interface ITaobaoCarDto {
    /** 二维码短链接地址 */
    shortUrl: string | undefined;
    /** 二维码图片URL */
    shortImgUrl: string | undefined;
}

export class UpdatePlanInput implements IUpdatePlanInput {
    id!: number;
    name!: string;
    externalAccessTokenInfoId!: number;
    schedule!: UpdateScheduleInput;
    syncOption!: UpdateSyncOptionInput;
    isEnabled!: boolean;

    constructor(data?: IUpdatePlanInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.externalAccessTokenInfoId = _data["externalAccessTokenInfoId"];
            this.schedule = _data["schedule"] ? UpdateScheduleInput.fromJS(_data["schedule"]) : <any>undefined;
            this.syncOption = _data["syncOption"] ? UpdateSyncOptionInput.fromJS(_data["syncOption"]) : <any>undefined;
            this.isEnabled = _data["isEnabled"];
        }
    }

    static fromJS(data: any): UpdatePlanInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePlanInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["externalAccessTokenInfoId"] = this.externalAccessTokenInfoId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : <any>undefined;
        data["syncOption"] = this.syncOption ? this.syncOption.toJSON() : <any>undefined;
        data["isEnabled"] = this.isEnabled;
        return data; 
    }
}

export interface IUpdatePlanInput {
    id: number;
    name: string;
    externalAccessTokenInfoId: number;
    schedule: UpdateScheduleInput;
    syncOption: UpdateSyncOptionInput;
    isEnabled: boolean;
}

export class UpdateScheduleInput implements IUpdateScheduleInput {
    id!: number;
    model!: ScheEnum;
    /** 具体执行时间 多个时间用逗号隔开09：00，18：10 */
    runTime!: string;
    /** day of the week (0 - 6) (Sunday to Saturday)
逗号隔开 1,3,5 表示每周1,周三，周5执行 */
    weeDay!: string | undefined;
    /** day of the month (1 - 31)
逗号隔开 1,3,5 表示 1号 3号 5号 */
    monthDay!: string | undefined;
    statDate!: moment.Moment | undefined;
    endDate!: moment.Moment | undefined;

    constructor(data?: IUpdateScheduleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.model = _data["model"];
            this.runTime = _data["runTime"];
            this.weeDay = _data["weeDay"];
            this.monthDay = _data["monthDay"];
            this.statDate = _data["statDate"] ? moment(_data["statDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? moment(_data["endDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateScheduleInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateScheduleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["model"] = this.model;
        data["runTime"] = this.runTime;
        data["weeDay"] = this.weeDay;
        data["monthDay"] = this.monthDay;
        data["statDate"] = this.statDate ? this.statDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUpdateScheduleInput {
    id: number;
    model: ScheEnum;
    /** 具体执行时间 多个时间用逗号隔开09：00，18：10 */
    runTime: string;
    /** day of the week (0 - 6) (Sunday to Saturday)
逗号隔开 1,3,5 表示每周1,周三，周5执行 */
    weeDay: string | undefined;
    /** day of the month (1 - 31)
逗号隔开 1,3,5 表示 1号 3号 5号 */
    monthDay: string | undefined;
    statDate: moment.Moment | undefined;
    endDate: moment.Moment | undefined;
}

export class UpdateSyncOptionInput implements IUpdateSyncOptionInput {
    id!: number;
    syncType!: SyncScopeEnum;
    syncFields!: string | undefined;

    constructor(data?: IUpdateSyncOptionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.syncType = _data["syncType"];
            this.syncFields = _data["syncFields"];
        }
    }

    static fromJS(data: any): UpdateSyncOptionInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSyncOptionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["syncType"] = this.syncType;
        data["syncFields"] = this.syncFields;
        return data; 
    }
}

export interface IUpdateSyncOptionInput {
    id: number;
    syncType: SyncScopeEnum;
    syncFields: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}